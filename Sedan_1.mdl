//////////////////////////////////////////////////////////////////////
 Altair HyperWorks

 Version : HWVERSION_2022.0.0.33_Mar 29 2022_22:27:26

 Model : Model

 Customer ID : 

 Date : Tue Dec  5 14:46:11 2023
//////////////////////////////////////////////////////////////////////

*BeginMDL( the_model, "Model", "2022.0.0.33" )

  *StandardInclude(FILE)
  *SetCurrentSolverMode(MotionSolve)
  *LoadPreferenceFile(MBD-Vehicle Dynamics Tools)
  *DefinitionInclude( "hwmv://autoent/../mdllib/Libs/Tasks/AltairDriver/altair_driver_system.mdl" )
  *System( sys_body, "Body", sysdef_body )
  *System( sys_frnt_susp, "Frnt macpherson susp (1 pc. LCA)", sysdef_macpherson_frnt, sys_body.b_body )
  *System( sys_steering, "Rackpin steering", sysdef_str_links, sys_frnt_susp.b_kn
           , sys_body.b_body, sys_frnt_susp.p_otrb )
  *System( sys_instrumentation, "Instrumentation", def_sys_instrumentation_ver2, sys_body
           , sys_frnt_susp, sys_rear_susp, sys_tires.ts_front, sys_tires.ts_rear )
  *System( sys_rear_susp, "Rear quadlink susp", sysdef_quadlink, sys_body.b_body
           , sys_body.b_body, sys_body.b_body )
  *System( sys_pwrtrain, "Linear Torque Map Powertrain", sysdef_pwrtrain, sys_body.b_body
           , sys_driveline.b_diff, sys_body.p_body_cg )
  *System( sys_tires, "AutoTires", sysdef_tires, sys_frnt_susp.p_wc
           , sys_rear_susp.p_wc, sys_frnt_susp.p_spalign, sys_rear_susp.p_spalign, sys_frnt_susp.b_wheel, sys_rear_susp.b_wheel )
  *System( sys_brakes, "Disk Brakes", def_disk_brakes, sys_frnt_susp.j_w_spin_rj
           , sys_rear_susp.j_w_spin_rj )
  *System( sys_driveline, "Independent fwd", sysdef_fwd, sys_frnt_susp.b_wheel
           , sys_frnt_susp.p_wc, sys_pwrtrain.b_pwrtrain, sys_frnt_susp.ds_wh_align )
  *System( altair_driver, "Altair Driver", def_ma_driver, sys_steering.sys_column.j_st_wheel
           , sys_instrumentation.b_Dummy_for_vehBody, sys_tires.m_road_ref_frnt.l, Global_Frame, sys_pwrtrain.sv_engine_speed, sys_pwrtrain.sv_throttle_output
           , sys_brakes.sv_brake_demand, sys_pwrtrain.sv_clutch_output, sys_pwrtrain.sv_driver_gear_output, sys_pwrtrain.crv_gear_ratio )
  *SetString( DS_MotionSolve_Simopts.default_run_dir,       (sysarch()=="win64"?getenv("USERPROFILE")+"/Documents":getenv("HOME")) )
  *DefineSystem( sysdef_body )
    *String( Vehicle_type, "Vehicle type", EDIT )
    *Point( p_body_cg, "Vehicle Body CG" )
    *Body( b_body, "Vehicle Body", p_body_cg, , , ,  )
    *PerpAxesJoint( j_clamp_1_body, "Body Clamp PERP", b_body, B_Ground, p_body_cg, VECTOR, Global_Frame.xaxis, VECTOR, Global_Frame.yaxis )
    *InlineJoint( j_clamp_2_body, "Body Clamp INLI", b_body, B_Ground, p_body_cg, AXIS, VECTOR, Global_Frame.zaxis )
    *Graphic( g_clamp_body, "CG clamp on body", CYLINDER, b_body, p_body_cg, VECTOR, Global_Frame.zaxis, 0, 33.33, 50, 0, CAPEND, 3 )
    *Graphic( g_clamp_grnd, "CG clamp on ground", CYLINDER, B_Ground, p_body_cg, VECTOR, Global_Frame.zaxis, 33.33, 0, 50, -50, CAPBEGIN, 3 )
    *Graphic( g_veh_glass, "Vehicle Glass", FILE, b_body, { getenv("ALTAIR_HOME") + "/hw/mdl/mdllib/Libs/Models/Body/veh_shell.h3d"}, {"silver"}, MARKER, Global_Frame, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0 )
    *Graphic( g_veh_shell, "Vehicle Shell", FILE, b_body, { getenv("ALTAIR_HOME") + "/hw/mdl/mdllib/Libs/Models/Body/veh_shell.h3d"}, {"blue"}, MARKER, Global_Frame, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0 )
    *Graphic( g_veh_lights, "Vehicle Lights", FILE, b_body, { getenv("ALTAIR_HOME") + "/hw/mdl/mdllib/Libs/Models/Body/veh_shell.h3d"}, {"frontlights"}, MARKER, Global_Frame, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0 )
    *SetString( Vehicle_type,               "Car" )
    *SetColorMaterialReference( g_veh_glass,                MODEL.mat_glass_tinted )
    *SetGraphicAttributes( g_veh_shell,                TRANSPARENT )
    *SetColorMaterialReference( g_veh_shell,                MODEL.mat_gray3 )
    *SetColorMaterialReference( g_veh_lights,               MODEL.mat_glass )
    *SetPoint( p_body_cg,                  2100, 0, 1250 )
    *SetBodyInertia( b_body,                     1000, 4.000e+08, 2.000e+09, 2.000e+09, 0.000e+00, 0.000e+00, 0.000e+00 )
  *EndDefine()
  *DefineSystem( sysdef_macpherson_frnt, b_lca_att )
    *Attachment( b_lca_att, "LCA att body", BodyPair, "LCA attaching body", ,  )
    *Option( op_spin_comp, "Spindle compliance", 2, "No", "Yes", 1, 2, "No", "Yes", EDIT )
    *PointPair( p_wheel_cg, "Wheel CG" )
    *PointPair( p_wc, "Wheel center" )
    *PointPair( p_spalign, "Spindle align" )
    *PointPair( p_kn_cg, "Knuckle CG" )
    *PointPair( p_lbj, "LBJ" )
    *PointPair( p_otrb, "OTRB" )
    *PointPair( p_lca_cg, "LCA CG" )
    *PointPair( p_lca_frnt_bush, "LCA frnt bushing" )
    *PointPair( p_lca_rear_bush, "LCA rear bushing" )
    *PointPair( p_strut_rod_upr, "Strut rod upr" )
    *PointPair( p_strut_tube_lwr, "Strut tube lwr" )
    *PointPair( p_spr_upr, "Spring upr " )
    *PointPair( p_spr_lwr, "Spring lwr " )
    *BodyPair( b_kn, "Knuckle", p_kn_cg, , , ,  )
    *BodyPair( b_lca, "Lwr control arm", p_lca_cg, , , ,  )
    *BodyPair( b_wheel, "Wheel", p_wheel_cg, , , ,  )
    *BodyPair( b_hub, "Wheel hub", p_wheel_cg, , , ,  )
    *BallJointPair( j_lbj, "Lwr ball joint", b_kn, b_lca, p_lbj )
    *if( Op_Compliant.value == "Yes" )
      *BushPair( bsh_lca_frnt, "LCA frnt bushing", b_lca, b_lca_att, p_lca_frnt_bush )
      *BushPair( bsh_lca_rear, "LCA rear bushing", b_lca, b_lca_att, p_lca_rear_bush )
      *Graphic( g_a_arm_sleeve1, "gra_a_arm_sleeve", gdef_a_arm_sleeve, b_lca
               , bsh_lca_frnt.i.origin, bsh_lca_frnt.i.zaxis )
      *Graphic( g_a_arm_bush1, "gra_a_arm_bush", gdef_a_arm_bush, bsh_lca_frnt.b2
               , bsh_lca_frnt.i.origin, bsh_lca_frnt.i.zaxis )
      *Graphic( g_a_arm_pin1, "gra_a_arm_pin", gdef_a_arm_pin, b_lca_att
               , bsh_lca_frnt.j.origin, bsh_lca_frnt.j.zaxis )
      *Graphic( g_a_arm_sleeve2, "gra_a_arm_sleeve", gdef_a_arm_sleeve, b_lca
               , bsh_lca_rear.i.origin, bsh_lca_rear.i.zaxis )
      *Graphic( g_a_arm_bush2, "gra_a_arm_bush", gdef_a_arm_bush, bsh_lca_rear.b2
               , bsh_lca_rear.i.origin, bsh_lca_rear.i.zaxis )
      *Graphic( g_a_arm_pin2, "gra_a_arm_pin", gdef_a_arm_pin, b_lca_att
               , bsh_lca_rear.j.origin, bsh_lca_rear.j.zaxis )
    *else()
      *RevJointPair( j_lca_bush, "LCA frnt|rear bushing", b_lca, b_lca_att, p_lca_frnt_bush, POINT, p_lca_rear_bush )
      *GraphicPair( Sphere1, "Sphere", SPHERE, j_lca_bush.b1, p_lca_frnt_bush, 25, 3 )
      *GraphicPair( Sphere2, "Sphere", SPHERE, j_lca_bush.b1, p_lca_rear_bush, 25, 3 )
    *endif()
    *RevJointPair( j_w_spin_rj, "Wheel spindle rj", b_hub, b_kn, p_wc, POINT, p_spalign )
    *if( op_spin_comp.value == "No" )
      *FixedJointPair( j_w_hub_fix, "Wheel|Hub fix jt", b_wheel, b_hub, p_wc )
    *else()
      *UJointPair( j_w_hub_uj, "Wheel|Hub comp u jt", b_wheel, b_hub, p_wc, SHAFT, POINT, p_spalign, CROSSPIN, VECTOR, b_wheel.cm.xaxis )
      *BushPair( bsh_w_hub, "Wheel|hub comp. bsh", b_wheel, b_hub, p_wc )
    *endif()
    *GraphicPair( Sphere, "Sphere", SPHERE, j_lbj.b1, p_lbj, 15, 3 )
    *GraphicPair( tire, "tire", TIRE, b_wheel, p_wc, POINT, p_spalign, "P215/70*15" )
    *GraphicPair( g_tire_rot, "Tire rotation", CYLINDER, b_wheel, p_wc, VECTOR, b_wheel.cm.xaxis, 5, 5, 335, -335, CAPNONE, 3 )
    *Graphic( g_kn2, "gra_kn2", gdef_kn2, b_kn
             , p_wc, p_spalign, p_strut_tube_lwr, p_strut_rod_upr, p_lbj
             , p_otrb )
    *Graphic( g_a_arm, "gra_a_arm", gdef_a_arm, b_lca
             , p_lbj, p_strut_rod_upr, p_lca_frnt_bush, p_lca_rear_bush )
    *DataSet( ds_wh_align, "Static Wheel Alignment", def_ds_wh_align )
    *Form( frm_wh_align, "Static Wheel Alignment", def_frm_wh_align, ds_wh_align )
    *System( sys_frnt_strut, "Frnt strut (with inline jts)", sysdef_strut_inl, sys_body.b_body
             , sys_frnt_susp.b_kn, sys_frnt_susp.p_strut_rod_upr, sys_frnt_susp.p_strut_tube_lwr, sys_frnt_susp.p_spr_upr, sys_frnt_susp.p_spr_lwr )
    *System( sys_frnt_stabar, "Frnt stabar with links", sysdef_stabar, sys_frnt_susp.b_lca
             , sys_body.b_body )
    *System( sys_frnt_jnc_bmp, "Frnt internal jounce bumpers", sysdef_jounce_bumper, sys_frnt_susp.sys_frnt_strut.b_strut_rod
             , sys_frnt_susp.sys_frnt_strut.b_strut_tube, sys_frnt_susp.p_strut_rod_upr, sys_frnt_susp.p_strut_tube_lwr )
    *System( sys_frnt_reb_bmp, "Frnt internal reb bumpers", sysdef_rebound_bumper, sys_frnt_susp.sys_frnt_strut.b_strut_tube
             , sys_frnt_susp.sys_frnt_strut.b_strut_rod, sys_frnt_susp.p_strut_rod_upr, sys_frnt_susp.p_strut_tube_lwr )
    *SetPoint( p_wc,                 LEFT, 1000.00, -750.00, 1000.00 )
    *SetPoint( p_spalign,            LEFT, p_wc.l.x + 100*COS(ds_wh_align.camb.value*PI/180)*SIN(ds_wh_align.toe.value*PI/180), p_wc.l.y + 100*COS(ds_wh_align.camb.value*PI/180)*COS(ds_wh_align.toe.value*PI/180), p_wc.l.z + 100*SIN(ds_wh_align.camb.value*PI/180) )
    *SetPoint( p_otrb,               LEFT, 1120.00, -675.00, 1000.00 )
    *SetPoint( p_lbj,                LEFT, 991.00, -668.00, 916.00 )
    *SetPoint( p_lca_frnt_bush,      LEFT, 841.00, -318.00, 911.00 )
    *SetPoint( p_lca_rear_bush,      LEFT, 1241.00, -318.00, 921.00 )
    *SetPoint( p_strut_rod_upr,      LEFT, 1061.00, -542.00, 1511.00 )
    *SetPoint( p_strut_tube_lwr,     LEFT, 1016.00, -623.00, 1128.50 )
    *SetPoint( p_spr_upr,            LEFT, 1061.00, -542.00, 1500.00 )
    *SetPoint( p_spr_lwr,            LEFT, 1050.00, -585.00, 1350.00 )
    *SetPoint( p_wheel_cg,           LEFT, p_wc.l.x, p_wc.l.y, p_wc.l.z )
    *SetPoint( p_kn_cg,              LEFT, p_wc.l.x, p_wc.l.y+100, p_wc.l.z )
    *SetPoint( p_lca_cg,             LEFT, 1016.00, -493.00, 926.00 )
    *SetBodyInertia( b_wheel,              LEFT, 0.5, 1.750e+04, 1.750e+04, 3.000e+04, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetOrientation( b_wheel.cm.l,               TWOAXES, ZX, POINT, p_spalign.l, VECTOR, Global_Frame.zaxis )
    *SetOrientation( b_wheel.cm.r,               TWOAXES, ZX, POINT, p_spalign.r, VECTOR, Global_Frame.zaxis )
    *SetBodyInertia( b_hub,                LEFT, 10, 70000, 70000, 1e5, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetOrientation( b_hub.cm.l,                 TWOAXES, ZX, POINT, p_spalign.l, VECTOR, Global_Frame.zaxis )
    *SetOrientation( b_hub.cm.r,                 TWOAXES, ZX, POINT, p_spalign.r, VECTOR, Global_Frame.zaxis )
    *SetBodyInertia( b_kn,                 LEFT, 3.000e+000, 4.089e+003, 4.089e+003, 4.089e+003, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetBodyInertia( b_lca,                LEFT, 2.000e+000, 2.081e+003, 2.081e+003, 2.081e+003, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetBush( bsh_lca_frnt,         LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( bsh_lca_frnt,         LEFT, TWOAXES, ZX, POINT, p_lca_rear_bush.l, POINT, p_lbj.l )
    *SetBush( bsh_lca_rear,         LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( bsh_lca_rear,         LEFT, TWOAXES, ZX, POINT, p_lca_frnt_bush.l, POINT, p_lbj.l )
    *SetBush( bsh_w_hub,            LEFT, LIN, 0.0, LIN, 0.0, LIN, 0.0, LIN, 0.0, LIN, 0.0, LIN, 0.0, LIN, 1745329.252*180/PI, LIN, 1745329.252*180/PI, LIN, 0.0*180/PI, LIN, 17453.29252*180/PI, LIN, 17453.29252*180/PI, LIN, 0.0*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( bsh_w_hub,            LEFT, TWOAXES, ZX, POINT, p_spalign.l, VECTOR, j_w_hub_uj.l.j.zaxis )
    *SetColorMaterialReference( tire.l,                     MODEL.mat_gray6 )
    *SetColorMaterialReference( tire.r,                     MODEL.mat_gray6 )
  *EndDefine()
  *DefineGraphic( gdef_a_arm_sleeve, body, p_bush, v_bush )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( p_bush, "Attachment p_bush", PointPair, "Select attachment.", ,  )
    *Attachment( v_bush, "Attachment v_bush", VectorPair, "Select attachment.", ,  )
    *GraphicPair( g_tube, "Tube", CYLINDER, body, p_bush, VECTOR, v_bush, 25, 25, 60, -30, CAPNONE, 3 )
    *GraphicPair( g_cap1, "End cap 1", CYLINDER, body, p_bush, VECTOR, v_bush, 25, 22, 0.1, 30, CAPNONE, 3 )
    *GraphicPair( g_cap2, "End cap 2", CYLINDER, body, p_bush, VECTOR, v_bush, 25, 22, 0.1, -30, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_a_arm_bush, body, p_bush, v_bush )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( p_bush, "Attachment p_bush", PointPair, "Select attachment.", ,  )
    *Attachment( v_bush, "Attachment v_bush", VectorPair, "Select attachment.", ,  )
    *GraphicPair( g_tube, "Tube", CYLINDER, body, p_bush, VECTOR, v_bush, 22, 22, 60, -30, CAPNONE, 3 )
    *GraphicPair( g_cap1, "End cap 1", CYLINDER, body, p_bush, VECTOR, v_bush, 10, 22, 2, -32, CAPNONE, 3 )
    *GraphicPair( g_cap2, "End cap 2", CYLINDER, body, p_bush, VECTOR, v_bush, 22, 10, 2, 30, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_a_arm_pin, body, p_bush, v_bush )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( p_bush, "Attachment p_bush", PointPair, "Select attachment.", ,  )
    *Attachment( v_bush, "Attachment v_bush", VectorPair, "Select attachment.", ,  )
    *GraphicPair( g_pin, "Pin", CYLINDER, body, p_bush, VECTOR, v_bush, 10, 10, 74, -37, CAPBOTH, 3 )
  *EndDefine()
  *DefineGraphic( gdef_kn2, b_kn, p_wc, p_spalign
           , p_strut_low, p_strut_upr, p_lbj, p_otrb )
    *Attachment( b_kn, "Attachment b_kn", BodyPair, "Select attachment.", ,  )
    *Attachment( p_wc, "Attachment p_wc", PointPair, "Select attachment.", ,  )
    *Attachment( p_spalign, "Attachment p_spalign", PointPair, "Select attachment.", ,  )
    *Attachment( p_strut_low, "Attachment p_strut_low", PointPair, "Select attachment.", ,  )
    *Attachment( p_strut_upr, "Attachment p_strut_upr", PointPair, "Select attachment.", ,  )
    *Attachment( p_lbj, "Attachment p_lbj", PointPair, "Select attachment.", ,  )
    *Attachment( p_otrb, "Attachment p_otrb", PointPair, "Select attachment.", ,  )
    *GraphicPair( g_lwr_stud, "Lower stud", CYLINDER, b_kn, p_lbj, POINT, p_spalign, 12, 8, 35, 0, CAPNONE, 3 )
    *GraphicPair( g_kp_bot, "Kingpin bottom", CYLINDER, b_kn, p_lbj, POINT, p_spalign, 8, g_kp_bot.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_kp_top, "Kingpin top", CYLINDER, b_kn, p_spalign, POINT, p_strut_low, 8, g_kp_top.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_spindle, "Spindle", CYLINDER, b_kn, p_wc, POINT, p_spalign, 10, g_spindle.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_st_arm, "Steer arm", CYLINDER, b_kn, p_spalign, POINT, p_otrb, 8, g_st_arm.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_sp_at_kp, "Spindle at kingpin", SPHERE, b_kn, p_spalign, 10, 3 )
    *GraphicPair( g_strut_mnt, "Strut mount", CYLINDER, b_kn, p_strut_low, POINT, p_strut_upr, 30, 30, 10, -10, CAPBOTH, 3 )
  *EndDefine()
  *DefineGraphic( gdef_a_arm, body, p_bj, p_bal
           , p_bush1, p_bush2 )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( p_bj, "Attachment p_bj", PointPair, "Select attachment.", ,  )
    *Attachment( p_bal, "Attachment p_bal", PointPair, "Select attachment.", ,  )
    *Attachment( p_bush1, "Attachment p_bush1", PointPair, "Select attachment.", ,  )
    *Attachment( p_bush2, "Attachment p_bush2", PointPair, "Select attachment.", ,  )
    *GraphicPair( g_frnt_arm, "Front arm", CYLINDER, body, p_bj, POINT, p_bush1, 12, g_frnt_arm.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_rear_arm, "Rear arm", CYLINDER, body, p_bj, POINT, p_bush2, 12, g_rear_arm.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_bj_tube, "Ball joint tube", CYLINDER, body, p_bj, POINT, p_bal, 25, 25, 35, -17.5, CAPBEGIN, 3 )
    *GraphicPair( g_bj_cap, "Ball joint cap", CYLINDER, body, p_bj, POINT, p_bal, 25, 15, 0.1, 17.5, CAPNONE, 3 )
  *EndDefine()
  *DefineDataSet( def_ds_wh_align )
    *Real( toe, "Toe (deg)", EDIT )
    *Real( camb, "Camber (deg)", EDIT )
  *EndDefine()
  *DefineForm( def_frm_wh_align, ds )
    *SetRowsCols( 2, 2 )
    *Attachment( ds, "Attachment ds", DataSet, "Select attachment.", ,  )
    *ColumnWidth( 1, 10 )
    *ColumnWidth( 2, 10 )
    *ColumnLabel( 1, 2, THIS.label )
    *SetCell( 1, 1, ds.toe.label, "", LEFT, NO_EDIT )
    *SetCell( 1, 2, ds.toe.value, "", RIGHT, EDIT )
    *SetCell( 2, 1, ds.camb.label, "", LEFT, NO_EDIT )
    *SetCell( 2, 2, ds.camb.value, "", RIGHT, EDIT )
  *EndDefine()
  *DefinitionInclude( "hwmv://autoent/definitions_mdl/sysDefDamperPair.mdl" )
  *DefineSystem( sysdef_strut_inl, b_upper_att, b_lower_att, p_strut_rod_upr
           , p_strut_tube_lwr, p_spr_upr, p_spr_lwr )
    *Attachment( b_upper_att, "Strut upr att body", BodyPair, "Strut upper attaching body", ,  )
    *Attachment( b_lower_att, "Strut lwr att body", BodyPair, "Strut lower attaching body", ,  )
    *Attachment( p_strut_rod_upr, "Top of strut rod", PointPair, "Top of strut rod", ,  )
    *Attachment( p_strut_tube_lwr, "Bottom of strut tube", PointPair, "Bottom of strut tube", ,  )
    *Attachment( p_spr_upr, "Top of spring", PointPair, "Top of spring", ,  )
    *Attachment( p_spr_lwr, "Bottom of spring", PointPair, "Bottom of spring", ,  )
    *PointPair( p_strut_rod_cg, "Strut rod CG" )
    *PointPair( p_strut_rod_lwr, "Strut rod lwr" )
    *PointPair( p_strut_tube_cg, "Strut tube CG" )
    *PointPair( p_strut_tube_upr, "Strut tube upr" )
    *BodyPair( b_strut_rod, "Strut rod (upr strut)", p_strut_rod_cg, , , ,  )
    *BodyPair( b_strut_tube, "Strut tube (lwr strut)", p_strut_tube_cg, , , ,  )
    *MarkerPair( m_cspr, "Coil Spring Orientation", b_strut_tube, p_spr_lwr )
    *Output( o_disp_coilspring_left, "Left Coil Spring Displacement", DISP, SPRINGDAMPER, cspr.l, m_cspr.l, BOTH_MARKERS )
    *Output( o_disp_coilspring_right, "Right Coil Spring Displacement", DISP, SPRINGDAMPER, cspr.r, m_cspr.r, BOTH_MARKERS )
    *Output( o_disp_shockstrut_left, "Left Shock Strut Displacement", DISP, JOINT, j_strut_lwr_inline.l, j_strut_lwr_inline.l.j, BOTH_MARKERS )
    *Output( o_disp_shockstrut_right, "Right Shock Strut Displacement", DISP, JOINT, j_strut_lwr_inline.r, j_strut_lwr_inline.r.j, BOTH_MARKERS )
    *FixedJointPair( j_strut_tube_lwr, "Strut tube bottom fixedjoint", b_strut_tube, b_lower_att, p_strut_tube_lwr )
    *InlineJointPair( j_strut_lwr_inline, "Lwr strut inline joint", b_strut_rod, b_strut_tube, p_strut_rod_lwr, ORIGIN, POINT, p_strut_tube_upr )
    *InlineJointPair( j_strut_upr_inline, "Upr strut inline joint", b_strut_tube, b_strut_rod, p_strut_tube_upr, ORIGIN, POINT, p_strut_rod_lwr )
    *UJointPair( bsh_strut_rod_upr, "Strut upr bush", b_strut_rod, b_upper_att, p_strut_rod_upr, SHAFT, POINT, p_strut_rod_lwr, CROSSPIN, VECTOR, Global_Frame.xaxis, ALLOW_COMPLIANCE )
    *if( bsh_strut_rod_upr.isbush == true )
      *Graphic( g_strut_rod1, "gra_strut_rod", gdef_strut_rod, b_strut_rod
               , p_strut_rod_upr, p_strut_rod_lwr )
      *Graphic( g_strut_bush, "gra_strut_bush", gdef_strut_bush, bsh_strut_rod_upr.b2
               , bsh_strut_rod_upr.i.origin, bsh_strut_rod_upr.i.zaxis )
    *else()
      *GraphicPair( Cylinder, "Cylinder", CYLINDER, b_strut_rod, p_strut_rod_upr, POINT, p_strut_rod_lwr, 10, Cylinder.r1, , 0.0, CAPNONE, 3 )
      *GraphicPair( g_strut_rod2, "gra_strut_rod", SPHERE, bsh_strut_rod_upr.b2, bsh_strut_rod_upr.i.origin, 25, 3 )
    *endif()
    *CoilSpringPair( cspr, "Coil spring", b_upper_att, b_strut_tube, p_spr_upr, p_spr_lwr )
    *CoilSpringPair( dmp, "Strut damper", b_strut_rod, b_strut_tube, p_strut_rod_upr, p_strut_tube_lwr )
    *System( ts_AutoDamper_front, "AutoDamperPair-Front", def_ma_damper_pair, b_strut_rod
             , b_strut_tube, p_strut_rod_upr, p_strut_tube_lwr )
    *Graphic( g_strut_tube, "gra_strut_tube", gdef_strut_tube, b_strut_tube
             , p_strut_tube_lwr, p_strut_tube_upr, p_spr_lwr, p_spr_upr )
    *GraphicPair( g_spring, "Coil spring", SPRING, cspr, cspr.p1, cspr.p2, 4, 60 )
    *GraphicPair( Cylinder1, "Cylinder", CYLINDER, b_upper_att, p_spr_upr, POINT, p_spr_lwr, 70, 70, 10, -10, CAPNONE, 3 )
    *GraphicPair( Cylinder2, "Cylinder", CYLINDER, b_upper_att, p_spr_upr, POINT, p_spr_lwr, 40, 40, 10, -10, CAPNONE, 3 )
    *GraphicPair( Cylinder3, "Cylinder", CYLINDER, b_upper_att, p_spr_upr, POINT, p_spr_lwr, 70, 40, 0.1, -10, CAPNONE, 3 )
    *DataSet( ds_strut, "Strut rod/tube lengths", dsdef_strut )
    *Form( frm_strut, "Strut rod/tube lengths", frmdef_strut, ds_strut )
    *SetEntityId( o_disp_coilspring_left,       30101010 )
    *Set( o_disp_coilspring_left.id2, 30101011 )
    *SetEntityId( o_disp_coilspring_right,       30101110 )
    *Set( o_disp_coilspring_right.id2, 30101111 )
    *SetEntityId( o_disp_shockstrut_left,       30101020 )
    *SetEntityId( o_disp_shockstrut_right,       30101120 )
    *SetReal( ds_strut.strut_len,         sqrt((p_strut_rod_upr.l.x-p_strut_tube_lwr.l.x)^2 +(p_strut_rod_upr.l.y-p_strut_tube_lwr.l.y)^2+(p_strut_rod_upr.l.z-p_strut_tube_lwr.l.z)^2) )
    *SetReal( ds_strut.strut_rod_len,       227.0 )
    *SetReal( ds_strut.strut_tube_len,       250.0 )
    *SetPoint( p_strut_rod_lwr,      LEFT, p_strut_rod_upr.l.x + (p_strut_tube_lwr.l.x-p_strut_rod_upr.l.x)/ds_strut.strut_len.value*ds_strut.strut_rod_len.value, p_strut_rod_upr.l.y + (p_strut_tube_lwr.l.y-p_strut_rod_upr.l.y)/ds_strut.strut_len.value*ds_strut.strut_rod_len.value, p_strut_rod_upr.l.z + (p_strut_tube_lwr.l.z-p_strut_rod_upr.l.z)/ds_strut.strut_len.value*ds_strut.strut_rod_len.value )
    *SetPoint( p_strut_tube_upr,     LEFT, p_strut_tube_lwr.l.x + (p_strut_rod_upr.l.x-p_strut_tube_lwr.l.x)/ds_strut.strut_len.value*ds_strut.strut_tube_len.value, p_strut_tube_lwr.l.y + (p_strut_rod_upr.l.y-p_strut_tube_lwr.l.y)/ds_strut.strut_len.value*ds_strut.strut_tube_len.value, p_strut_tube_lwr.l.z + (p_strut_rod_upr.l.z-p_strut_tube_lwr.l.z)/ds_strut.strut_len.value*ds_strut.strut_tube_len.value )
    *SetPoint( p_strut_rod_cg,       LEFT, p_strut_rod_upr.l.x / 2 + p_strut_rod_lwr.l.x / 2, p_strut_rod_upr.l.y / 2 + p_strut_rod_lwr.l.y / 2, p_strut_rod_upr.l.z / 2 + p_strut_rod_lwr.l.z / 2 )
    *SetPoint( p_strut_tube_cg,      LEFT, p_strut_tube_lwr.l.x / 2 + p_strut_tube_upr.l.x / 2, p_strut_tube_lwr.l.y / 2 + p_strut_tube_upr.l.y / 2, p_strut_tube_lwr.l.z / 2 + p_strut_tube_upr.l.z / 2 )
    *SetBodyInertia( b_strut_rod,          LEFT, 1.000e+000, 6.553e+002, 6.553e+002, 6.553e+002, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetBodyInertia( b_strut_tube,         LEFT, 1.000e+000, 6.553e+002, 6.553e+002, 6.553e+002, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetCoilSpring( cspr,                 LEFT, LIN, 30, LIN, 0, 3430, sqrt((p_spr_upr.l.x-p_spr_lwr.l.x)^2+(p_spr_upr.l.y-p_spr_lwr.l.y)^2+(p_spr_upr.l.z-p_spr_lwr.l.z)^2) )
    *SetCoilSpring( dmp,                  LEFT, LIN, 0, LIN, 1, 0, 0 )
    *SetBush( bsh_strut_rod_upr.bush, LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( bsh_strut_rod_upr.bush, LEFT, ONEAXIS, Z, POINT, p_strut_rod_lwr.l )
    *SetOrientation( m_cspr,               LEFT, TWOAXES, ZX, POINT, p_spr_upr.l, DXDYDZ, 1, 0, 0 )
  *EndDefine()
  *DefineGraphic( gdef_strut_rod, b_strut_rod, p_strut_rod_upr, p_strut_rod_lwr )
    *Attachment( b_strut_rod, "Attachment b_strut_rod", BodyPair, "Select attachment.", ,  )
    *Attachment( p_strut_rod_upr, "Attachment p_strut_rod_upr", PointPair, "Select attachment.", ,  )
    *Attachment( p_strut_rod_lwr, "Attachment p_strut_rod_lwr", PointPair, "Select attachment.", ,  )
    *GraphicPair( Cylinder1, "Cylinder", CYLINDER, b_strut_rod, p_strut_rod_upr, POINT, p_strut_rod_lwr, 10, Cylinder1.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( Cylinder2, "Cylinder", CYLINDER, b_strut_rod, p_strut_rod_upr, POINT, p_strut_rod_lwr, 10, 10, 10, -27, CAPBOTH, 3 )
    *GraphicPair( Cylinder3, "Cylinder", CYLINDER, b_strut_rod, p_strut_rod_upr, POINT, p_strut_rod_lwr, 32, 30, 2, 10, CAPNONE, 3 )
    *GraphicPair( Cylinder4, "Cylinder", CYLINDER, b_strut_rod, p_strut_rod_upr, POINT, p_strut_rod_lwr, 30, 0, 0.1, 12, CAPNONE, 3 )
    *GraphicPair( Cylinder5, "Cylinder", CYLINDER, b_strut_rod, p_strut_rod_upr, POINT, p_strut_rod_lwr, 30, 32, 2, -12, CAPNONE, 3 )
    *GraphicPair( Cylinder6, "Cylinder", CYLINDER, b_strut_rod, p_strut_rod_upr, POINT, p_strut_rod_lwr, 30, 0, 0.1, -12, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_strut_bush, body, point, align )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", PointPair, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", VectorPair, "Select attachment.", ,  )
    *GraphicPair( Cylinder1, "Cylinder", CYLINDER, body, point, VECTOR, align, 32, 32, 20, -10, CAPBOTH, 3 )
  *EndDefine()
  *DefineGraphic( gdef_strut_tube, b_tube, p_tube_lwr, p_tube_upr
           , p_spr_lwr, p_spr_upr )
    *Attachment( b_tube, "Attachment b_tube", BodyPair, "Select attachment.", ,  )
    *Attachment( p_tube_lwr, "Attachment p_tube_lwr", PointPair, "Select attachment.", ,  )
    *Attachment( p_tube_upr, "Attachment p_tube_upr", PointPair, "Select attachment.", ,  )
    *Attachment( p_spr_lwr, "Attachment p_spr_lwr", PointPair, "Select attachment.", ,  )
    *Attachment( p_spr_upr, "Attachment p_spr_upr", PointPair, "Select attachment.", ,  )
    *GraphicPair( Cylinder1, "Cylinder", CYLINDER, b_tube, p_tube_upr, POINT, p_tube_lwr, 25, Cylinder1.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( Cylinder2, "Cylinder", CYLINDER, b_tube, p_spr_lwr, POINT, p_spr_upr, 70, 70, 10, -10, CAPBEGIN, 3 )
  *EndDefine()
  *DefineDataSet( dsdef_strut )
    *Real( strut_len, "Strut length", EDIT )
    *Real( strut_rod_len, "Strut rod length", EDIT )
    *Real( strut_tube_len, "Strut tube length", EDIT )
  *EndDefine()
  *DefineForm( frmdef_strut, ds )
    *SetRowsCols( 3, 2 )
    *Attachment( ds, "Attachment ds", DataSet, "Select attachment.", ,  )
    *ColumnWidth( 1, 30 )
    *ColumnLabel( 1, 2, "Rod/Tube Lengths" )
    *SetCell( 1, 1, ds.strut_len.label, "", LEFT, NO_EDIT )
    *SetCell( 1, 2, ds.strut_len.value, "%5.1f", RIGHT, NO_EDIT )
    *SetCell( 2, 1, ds.strut_rod_len.label, "", LEFT, NO_EDIT )
    *SetCell( 2, 2, ds.strut_rod_len.value, "%5.1f", RIGHT, EDIT )
    *SetCell( 3, 1, ds.strut_tube_len.label, "", LEFT, NO_EDIT )
    *SetCell( 3, 2, ds.strut_tube_len.value, "%5.1f", RIGHT, EDIT )
  *EndDefine()
  *DefineSystem( sysdef_stabar, b_susp_att, b_frame_att )
    *Attachment( b_susp_att, "Stabar link attach", BodyPair, "Drop link attach to susp", ,  )
    *Attachment( b_frame_att, "Stabar frame attach", Body, "Stabar attach to frame", ,  )
    *Option( op_overlay_balljt, "Ball jt over bush", 2, "No", "Yes", 1, 2, "No", "Yes", EDIT )
    *PointPair( p_link_susp_att, "Drop link susp att" )
    *PointPair( p_link_cg, "Drop link CG" )
    *PointPair( p_link_stabar_att, "Drop link stabar att" )
    *PointPair( p_stabar_pt1, "Stabar pt 1" )
    *PointPair( p_stabar_pt2, "Stabar pt 2" )
    *PointPair( p_stabar_pt3, "Stabar pt 3" )
    *PointPair( p_stabar_pt4, "Stabar pt 4" )
    *PointPair( p_stabar_pt5, "Stabar pt 5" )
    *PointPair( p_stabar_pt6, "Stabar pt 6" )
    *PointPair( p_stabar_pt7, "Stabar pt 7" )
    *PointPair( p_stabar_mnt, "Stabar mount to frame" )
    *Point( p_stabar_cent, "Stabar center" )
    *PointPair( p_link_stabar_bush_ax, "Link stabar bush ax" )
    *PointPair( p_stabar_mnt_ax, "Stabar frame bush ax" )
    *PointPair( p_link_susp_bush_ax, "Link susp bush ax" )
    *BodyPair( b_link, "Drop link", p_link_cg, , , ,  )
    *PolyBeam( pb_stabar, "Stabilizer bar", p_link_stabar_att.l, p_stabar_pt1.l, p_stabar_pt2.l, p_stabar_pt3.l, p_stabar_pt4.l, p_stabar_pt5.l, p_stabar_mnt.l, p_stabar_pt6.l, p_stabar_pt7.l, p_stabar_cent, p_stabar_pt7.r, p_stabar_pt6.r, p_stabar_mnt.r, p_stabar_pt5.r, p_stabar_pt4.r, p_stabar_pt3.r, p_stabar_pt2.r, p_stabar_pt1.r, p_link_stabar_att.r )
    *BallJoint( bsh_link_stabar_l, "Link stabar bush left", b_link.l, pb_stabar.body@p_link_stabar_att.l, p_link_stabar_att.l, ALLOW_COMPLIANCE )
    *BallJoint( bsh_link_stabar_r, "Link stabar bush right", b_link.r, pb_stabar.body@p_link_stabar_att.r, p_link_stabar_att.r, ALLOW_COMPLIANCE )
    *RevJoint( bsh_stabar_mnt_l, "Stabar frame bush left", b_frame_att, pb_stabar.body@p_stabar_mnt.l, p_stabar_mnt.l, POINT, p_stabar_mnt_ax.l, ALLOW_COMPLIANCE )
    *RevJoint( bsh_stabar_mnt_r, "Stabar frame bush right", b_frame_att, pb_stabar.body@p_stabar_mnt.r, p_stabar_mnt.r, POINT, p_stabar_mnt_ax.r, ALLOW_COMPLIANCE )
    *UJointPair( bsh_link_susp, "Drop link susp bush ", b_link, b_susp_att, p_link_susp_att, SHAFT, POINT, p_link_stabar_att, CROSSPIN, VECTOR, V_Global_X, ALLOW_COMPLIANCE )
    *if( op_overlay_balljt.value == "Yes" && bsh_link_stabar_l.isbush == true )
      *BallJoint( j_link_stabar_l2, "Lnk stabar ball jt -l", bsh_link_stabar_l.b1, bsh_link_stabar_l.b2, bsh_link_stabar_l.i.origin )
    *endif()
    *if( op_overlay_balljt.value == "Yes" && bsh_link_stabar_r.isbush == true )
      *BallJoint( j_link_stabar_r2, "Lnk stabar ball jt -r", bsh_link_stabar_r.b1, bsh_link_stabar_r.b2, bsh_link_stabar_r.i.origin )
    *endif()
    *if( op_overlay_balljt.value == "Yes" && bsh_link_susp.isbush == true )
      *BallJointPair( j_link_susp2, "Link susp ball jt", bsh_link_susp.b1, bsh_link_susp.b2, bsh_link_susp.i.origin )
    *endif()
    *Graphic( g_stabar, "Stabar", TUBE, POLYBEAM, pb_stabar )
    *GraphicPair( g_stalink, "Stabar link", CYLINDER, b_link, p_link_susp_att, POINT, p_link_stabar_att, 5, g_stalink.r1, , 0.0, CAPNONE, 3 )
    *Graphic( g_l_stamnt_sleeve, "Left stabar mount sleeve", gdef_stamnt_sleeve, b_frame_att
             , bsh_stabar_mnt_l.i.origin, bsh_stabar_mnt_l.i.zaxis )
    *Graphic( g_r_stamnt_sleeve, "Right stabar mount sleeve", gdef_stamnt_sleeve, b_frame_att
             , bsh_stabar_mnt_r.i.origin, bsh_stabar_mnt_r.i.zaxis )
    *Graphic( g_l_stamnt_bush, "Left stabar mount bushing", gdef_stamnt_bush, bsh_stabar_mnt_l.b1
             , bsh_stabar_mnt_l.i.origin, bsh_stabar_mnt_l.i.zaxis )
    *Graphic( g_r_stamnt_bush, "Right stabar mount bushing", gdef_stamnt_bush, bsh_stabar_mnt_r.b1
             , bsh_stabar_mnt_r.i.origin, bsh_stabar_mnt_r.i.zaxis )
    *if( bsh_link_stabar_l.isbush == true )
      *Graphic( g_l_stalnk_sleeve, "Left link/bar sleeve", gdef_stalnk_sleeve, b_link.l
               , bsh_link_stabar_l.i.origin, bsh_link_stabar_l.i.zaxis )
      *Graphic( g_l_stalnk_bush, "Left link/bar bush", gdef_stalnk_bush, bsh_link_stabar_l.b1
               , bsh_link_stabar_l.i.origin, bsh_link_stabar_l.i.zaxis )
      *Graphic( g_l_stalnk_pin, "Left link/bar pin", gdef_stalnk_pin, pb_stabar.body@p_link_stabar_att.l
               , bsh_link_stabar_l.i.origin, bsh_link_stabar_l.i.zaxis )
    *else()
      *Graphic( g_bsh_link_stabar_l, "Link stabar bush left", SPHERE, bsh_link_stabar_l.b1, bsh_link_stabar_l.i.origin, 15, 3 )
    *endif()
    *if( bsh_link_stabar_r.isbush == true )
      *Graphic( g_r_stalnk_sleeve, "Right link/bar sleeve", gdef_stalnk_sleeve, b_link.r
               , bsh_link_stabar_r.i.origin, bsh_link_stabar_r.i.zaxis )
      *Graphic( g_r_stalnk_bush, "Right link/bar bush", gdef_stalnk_bush, bsh_link_stabar_r.b1
               , bsh_link_stabar_r.i.origin, bsh_link_stabar_r.i.zaxis )
      *Graphic( g_r_stalnk_pin, "Right link/bar pin", gdef_stalnk_pin, pb_stabar.body@p_link_stabar_att.r
               , bsh_link_stabar_r.i.origin, bsh_link_stabar_r.i.zaxis )
    *else()
      *Graphic( g_bsh_link_stabar_r, "Link stabar bush right", SPHERE, bsh_link_stabar_r.b1, bsh_link_stabar_r.i.origin, 15, 3 )
    *endif()
    *if( bsh_link_susp.isbush == true )
      *Graphic( g_stalnk_sleeve, "Link to susp sleeve", gdef_stalnk_sleeve_pair, b_link
               , bsh_link_susp.i.origin, bsh_link_susp.i.zaxis )
      *Graphic( g_stalnk_bush, "Link to susp bush", gdef_stalnk_bush_pair, bsh_link_susp.b1
               , bsh_link_susp.i.origin, bsh_link_susp.i.zaxis )
      *Graphic( g_stalnk_pin, "Link to susp pin", gdef_stalnk_pin_pair, b_susp_att
               , bsh_link_susp.i.origin, bsh_link_susp.i.zaxis )
    *else()
      *GraphicPair( g_bsh_link_susp, "Link susp bush", SPHERE, bsh_link_susp.b1, bsh_link_susp.i.origin, 15, 3 )
    *endif()
    *SetPoint( p_link_susp_att,      LEFT, 1120.00, -544.00, 929.00 )
    *SetPoint( p_link_cg,            LEFT, (p_link_susp_att.l.x + p_link_stabar_att.l.x)/2, (p_link_susp_att.l.y + p_link_stabar_att.l.y)/2, (p_link_susp_att.l.z + p_link_stabar_att.l.z)/2 )
    *SetPoint( p_link_stabar_att,    LEFT, 1120.00, -544.00, 989.00 )
    *SetPoint( p_stabar_pt1,         LEFT, 1120.00, -515.00, 989.00 )
    *SetPoint( p_stabar_pt2,         LEFT, 1177.00, -515.00, 981.00 )
    *SetPoint( p_stabar_pt3,         LEFT, 1240.00, -480.00, 980.00 )
    *SetPoint( p_stabar_pt4,         LEFT, 1285.00, -438.00, 988.00 )
    *SetPoint( p_stabar_pt5,         LEFT, 1300.00, -400.00, 995.00 )
    *SetPoint( p_stabar_mnt,         LEFT, 1300.00, -360.00, 995.00 )
    *SetPoint( p_stabar_pt6,         LEFT, 1300.00, -200.00, 995.00 )
    *SetPoint( p_stabar_pt7,         LEFT, 1300.00, -100.00, 995.00 )
    *SetPoint( p_stabar_cent,              1300.00, 0.00, 995.00 )
    *SetPoint( p_link_stabar_bush_ax, LEFT, 1120.00, -644.00, 989.00 )
    *SetPoint( p_stabar_mnt_ax,      LEFT, 1300.00, -460.00, 995.00 )
    *SetPoint( p_link_susp_bush_ax,  LEFT, 1220.00, -544.00, 929.00 )
    *SetBodyInertia( b_link,               LEFT, 3.000e-001, 8.811e+001, 8.811e+001, 8.811e+001, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetPolyBeamProps( pb_stabar,                  CIRCULAR, 8.00000e-06, 2.00000e+05, 7.50000e+04, 2.00000e+01, 0.00000e+00, 0.00000e+00, CRATIO, 0.01 )
    *SetOrientation( bsh_stabar_mnt_l.bush,       ONEAXIS, Z, POINT, p_stabar_mnt_ax.l )
    *SetOrientation( bsh_stabar_mnt_r.bush,       ONEAXIS, Z, POINT, p_stabar_mnt_ax.r )
    *SetOrientation( bsh_link_stabar_l.bush,       ONEAXIS, Z, POINT, p_link_stabar_bush_ax.l )
    *SetOrientation( bsh_link_stabar_r.bush,       ONEAXIS, Z, POINT, p_link_stabar_bush_ax.r )
    *SetOrientation( bsh_link_susp.bush,   LEFT, ONEAXIS, Z, POINT, p_link_susp_bush_ax.l )
    *SetBush( bsh_link_stabar_l.bush,       LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetBush( bsh_link_stabar_r.bush,       LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetBush( bsh_stabar_mnt_l.bush,       LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetBush( bsh_stabar_mnt_r.bush,       LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetBush( bsh_link_susp.bush,   LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
  *EndDefine()
  *DefineGraphic( gdef_stamnt_sleeve, body, point, align )
    *Attachment( body, "Attachment body", Body, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", Point, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", Vector, "Select attachment.", ,  )
    *Graphic( g_tube, "Tube", CYLINDER, body, point, VECTOR, align, 23, 23, 24, -12, CAPNONE, 3 )
    *Graphic( g_cap1, "End cap 1", CYLINDER, body, point, VECTOR, align, 23, 21, 0.1, 12, CAPNONE, 3 )
    *Graphic( g_cap2, "End cap 2", CYLINDER, body, point, VECTOR, align, 23, 21, 0.1, -12, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_stamnt_bush, body, point, align )
    *Attachment( body, "Attachment body", Body, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", Point, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", Vector, "Select attachment.", ,  )
    *Graphic( g_tube, "Tube", CYLINDER, body, point, VECTOR, align, 21, 21, 32, -16, CAPNONE, 3 )
    *Graphic( g_cap1, "End cap 1", CYLINDER, body, point, VECTOR, align, 21, 10, 0.1, -16, CAPNONE, 3 )
    *Graphic( g_cap2, "End cap 2", CYLINDER, body, point, VECTOR, align, 21, 10, 0.1, 16, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_stalnk_sleeve, body, point, align )
    *Attachment( body, "Attachment body", Body, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", Point, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", Vector, "Select attachment.", ,  )
    *Graphic( g_tube, "Tube", CYLINDER, body, point, VECTOR, align, 12, 12, 16, -8, CAPNONE, 3 )
    *Graphic( g_cap1, "End cap 1", CYLINDER, body, point, VECTOR, align, 12, 11, 0.1, 8, CAPNONE, 3 )
    *Graphic( g_cap2, "End cap 2", CYLINDER, body, point, VECTOR, align, 12, 11, 0.1, -8, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_stalnk_bush, body, point, align )
    *Attachment( body, "Attachment body", Body, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", Point, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", Vector, "Select attachment.", ,  )
    *Graphic( g_tube, "Tube", CYLINDER, body, point, VECTOR, align, 11, 11, 16, -8, CAPNONE, 3 )
    *Graphic( g_cap1, "End cap 1", CYLINDER, body, point, VECTOR, align, 11, 5, 0.1, -8, CAPNONE, 3 )
    *Graphic( g_cap2, "End cap 2", CYLINDER, body, point, VECTOR, align, 11, 5, 0.1, 8, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_stalnk_pin, body, point, align )
    *Attachment( body, "Attachment body", Body, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", Point, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", Vector, "Select attachment.", ,  )
    *Graphic( g_pin, "Pin", CYLINDER, body, point, VECTOR, align, 5, 5, 18, -9, CAPBOTH, 3 )
  *EndDefine()
  *DefineGraphic( gdef_stalnk_sleeve_pair, body, point, align )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", PointPair, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", VectorPair, "Select attachment.", ,  )
    *GraphicPair( g_tube, "Tube", CYLINDER, body, point, VECTOR, align, 12, 12, 16, -8, CAPNONE, 3 )
    *GraphicPair( g_cap1, "End cap 1", CYLINDER, body, point, VECTOR, align, 12, 11, 0.1, 8, CAPNONE, 3 )
    *GraphicPair( g_cap2, "End cap 2", CYLINDER, body, point, VECTOR, align, 12, 11, 0.1, -8, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_stalnk_bush_pair, body, point, align )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", PointPair, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", VectorPair, "Select attachment.", ,  )
    *GraphicPair( g_tube, "Tube", CYLINDER, body, point, VECTOR, align, 11, 11, 16, -8, CAPNONE, 3 )
    *GraphicPair( g_cap1, "End cap 1", CYLINDER, body, point, VECTOR, align, 11, 5, 0.1, -8, CAPNONE, 3 )
    *GraphicPair( g_cap2, "End cap 2", CYLINDER, body, point, VECTOR, align, 11, 5, 0.1, 8, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_stalnk_pin_pair, body, point, align )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", PointPair, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", VectorPair, "Select attachment.", ,  )
    *GraphicPair( g_pin, "Pin", CYLINDER, body, point, VECTOR, align, 5, 5, 18, -9, CAPBOTH, 3 )
  *EndDefine()
  *DefineSystem( sysdef_jounce_bumper, b_bmp_attach, b_bmp_contact, p_rod
           , p_tube )
    *Attachment( b_bmp_attach, "Rod body", BodyPair, "Rod body (rubber attaching body)", ,  )
    *Attachment( b_bmp_contact, "Tube body", BodyPair, "Tube body (contact body)", ,  )
    *Attachment( p_rod, "Upper rod", PointPair, "Upper rod point", ,  )
    *Attachment( p_tube, "Lower tube", PointPair, "Lower tube point", ,  )
    *DataSet( ds_jnc_bmp, "Jounce bumper lengths", dsdef_jnc_bmp )
    *Form( frm_jnc_bmp, "Jounce bumper lengths", frmdef_jnc_bmp, ds_jnc_bmp )
    *if( SolverMode == "ADAMS"  || SolverMode == "MotionSolve" )
      *PointPair( p_bmp_tip, "Jounce bumper tip" )
      *PointPair( p_contact, "Jounce bumper contact" )
      *MarkerPair( mrk_frc, "Force direction reference", b_bmp_contact, p_rod )
      *MarkerPair( mrk_disp, "Displacement reference", b_bmp_attach, p_bmp_tip )
      *ActionReactionForcePair( frc_bmp, "jounce bumper", TRANS, b_bmp_contact, b_bmp_attach, p_contact, mrk_frc )
      *Curve( crv1, "jounce bumper 1", 2D, CARTESIAN, WRITE, CURVE_POINTS, OPEN )
      *Output( jounce_bumper_l_disp, "Left jounce bumper disp", DISP, p_contact.l, b_bmp_contact.l, p_bmp_tip.l, b_bmp_attach.l, mrk_disp.l, BOTH_MARKERS )
      *Output( jounce_bumper_r_disp, "Right jounce bumper disp", DISP, p_contact.r, b_bmp_contact.r, p_bmp_tip.r, b_bmp_attach.r, mrk_disp.r, BOTH_MARKERS )
      *Output( jnc_bmp_l_frc, "Left jounce bumper force", FORCE, FORCE, frc_bmp.l, mrk_frc.l, BOTH_MARKERS )
      *Output( jnc_bmp_r_frc, "Right jounce bumper force", FORCE, FORCE, frc_bmp.r, mrk_frc.r, BOTH_MARKERS )
      *GraphicPair( g_jnc_bmp, "jounce bumper", CYLINDER, b_bmp_attach, p_bmp_tip, POINT, p_rod, 15, 25, 50, 0, CAPBOTH, 3 )
      *GraphicPair( g_bmp_contact, "jounce bumper contact", CYLINDER, b_bmp_contact, p_contact, VECTOR, mrk_frc.zaxis, 30, 30, 5, 0, CAPBEGIN, 3 )
    *else()
      *PointPair( p_bmp_tip1, "Jounce bumper tip" )
      *PointPair( p_contact1, "Jounce bumper contact" )
      *MarkerPair( mrk_frc1, "Force direction reference", b_bmp_attach, p_rod )
      *BushPair( bsh_jounce_bumper, "jounce bumper", b_bmp_attach, b_bmp_contact, p_rod )
      *Curve( crv_jounce_bumper, "jounce bumper", 2D, CARTESIAN, WRITE, CURVE_POINTS, OPEN )
      *Output( jounce_bumper_l_disp1, "Left jounce bumper disp", DISP, p_contact1.l, b_bmp_contact.l, p_bmp_tip1.l, b_bmp_attach.l, mrk_frc1.l, BOTH_MARKERS )
      *Output( jounce_bumper_r_disp1, "Right jounce bumper disp", DISP, p_contact1.r, b_bmp_contact.r, p_bmp_tip1.r, b_bmp_attach.r, mrk_frc1.r, BOTH_MARKERS )
      *Output( o_jounce_bumper_l_force1, "Left jounce bumper force", FORCE, BUSHING, bsh_jounce_bumper.l, mrk_frc1.l, BOTH_MARKERS )
      *Output( o_jounce_bumper_r_force1, "Right jounce bumper force", FORCE, BUSHING, bsh_jounce_bumper.r, mrk_frc1.r, BOTH_MARKERS )
      *GraphicPair( g_jnc_bush_contact1, "jounce bush contact", CYLINDER, bsh_jounce_bumper.b1, p_rod, VECTOR, mrk_frc1.zaxis, 25, 18, 50, 0, CAPBOTH, 3 )
      *GraphicPair( g_bmp_contact1, "jounce bumper contact", CYLINDER, b_bmp_contact, p_contact1, VECTOR, mrk_frc1.zaxis, 30, 30, 5, 0, CAPBOTH, 3 )
    *endif()
    *if( SolverMode == "ADAMS"  || SolverMode == "MotionSolve" )
      *SetEntityId( jounce_bumper_l_disp,       30104010 )
      *SetEntityId( jounce_bumper_r_disp,       30104110 )
      *SetEntityId( jnc_bmp_l_frc,              30104020 )
      *SetEntityId( jnc_bmp_r_frc,              30104120 )
      *SetPoint( p_bmp_tip,            LEFT, p_rod.l.x+(p_tube.l.x-p_rod.l.x)/ds_jnc_bmp.shock_len.value*ds_jnc_bmp.end_to_tip.value, p_rod.l.y+(p_tube.l.y-p_rod.l.y)/ds_jnc_bmp.shock_len.value*ds_jnc_bmp.end_to_tip.value, p_rod.l.z+(p_tube.l.z-p_rod.l.z)/ds_jnc_bmp.shock_len.value*ds_jnc_bmp.end_to_tip.value )
      *SetPoint( p_contact,            LEFT, p_rod.l.x+(p_tube.l.x-p_rod.l.x)/ds_jnc_bmp.shock_len.value*(ds_jnc_bmp.end_to_tip.value+ds_jnc_bmp.tip_to_cont.value), p_rod.l.y+(p_tube.l.y-p_rod.l.y)/ds_jnc_bmp.shock_len.value*(ds_jnc_bmp.end_to_tip.value+ds_jnc_bmp.tip_to_cont.value), p_rod.l.z+(p_tube.l.z-p_rod.l.z)/ds_jnc_bmp.shock_len.value*(ds_jnc_bmp.end_to_tip.value+ds_jnc_bmp.tip_to_cont.value) )
      *SetOrientation( mrk_frc,              LEFT, ONEAXIS, Z, POINT, p_contact.l )
      *SetOrientation( mrk_disp,             LEFT, ONEAXIS, Z, POINT, p_rod.l )
      *SetCurve( crv1,                       MATH, 0:32:1, MATH, crv1.x^3/4, LIN_EXTRAP )
      *SetForce( frc_bmp.l,                  LIN, 0, LIN, 0, CRV, crv1, AKIMA, `IF(DZ({frc_bmp.i.l.id,%d},{mrk_disp.l.id,%d},{mrk_disp.l.id,%d}):{cr()},0,0,DZ({frc_bmp.i.l.id,%d},{mrk_disp.l.id,%d},{mrk_disp.l.id,%d}))` )
      *SetForce( frc_bmp.r,                  LIN, 0, LIN, 0, CRV, crv1, AKIMA, `IF(DZ({frc_bmp.i.r.id,%d},{mrk_disp.r.id,%d},{mrk_disp.r.id,%d}):{cr()},0,0,DZ({frc_bmp.i.r.id,%d},{mrk_disp.r.id,%d},{mrk_disp.r.id,%d}))` )
      *SetReal( ds_jnc_bmp.end_to_tip,       77 )
      *SetReal( ds_jnc_bmp.tip_to_cont,       65 )
      *SetReal( ds_jnc_bmp.shock_len,       sqrt((p_rod.l.x-p_tube.l.x)^2+(p_rod.l.y-p_tube.l.y)^2+(p_rod.l.z-p_tube.l.z)^2) )
    *else()
      *SetEntityId( jounce_bumper_l_disp1,       30104010 )
      *SetEntityId( jounce_bumper_r_disp1,       30104110 )
      *SetEntityId( o_jounce_bumper_l_force1,       30104020 )
      *SetEntityId( o_jounce_bumper_r_force1,       30104120 )
      *SetPoint( p_bmp_tip1,           LEFT, p_rod.l.x+(p_tube.l.x-p_rod.l.x)/ds_jnc_bmp.shock_len.value*ds_jnc_bmp.end_to_tip.value, p_rod.l.y+(p_tube.l.y-p_rod.l.y)/ds_jnc_bmp.shock_len.value*ds_jnc_bmp.end_to_tip.value, p_rod.l.z+(p_tube.l.z-p_rod.l.z)/ds_jnc_bmp.shock_len.value*ds_jnc_bmp.end_to_tip.value )
      *SetPoint( p_contact1,           LEFT, p_rod.l.x+(p_tube.l.x-p_rod.l.x)/ds_jnc_bmp.shock_len.value*(ds_jnc_bmp.end_to_tip.value+ds_jnc_bmp.tip_to_cont.value), p_rod.l.y+(p_tube.l.y-p_rod.l.y)/ds_jnc_bmp.shock_len.value*(ds_jnc_bmp.end_to_tip.value+ds_jnc_bmp.tip_to_cont.value), p_rod.l.z+(p_tube.l.z-p_rod.l.z)/ds_jnc_bmp.shock_len.value*(ds_jnc_bmp.end_to_tip.value+ds_jnc_bmp.tip_to_cont.value) )
      *SetOrientation( mrk_frc1,             LEFT, ONEAXIS, Z, POINT, p_tube.l )
      *SetBush( bsh_jounce_bumper,        , LIN, 0, LIN, 0, CRV, crv_jounce_bumper, AKIMA, `{bsh_jounce_bumper.l.DZ}`, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, 0, 0, 0, 0, 0, 0
                                          , LIN, 0, LIN, 0, CRV, crv_jounce_bumper, AKIMA, `{bsh_jounce_bumper.r.DZ}`, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, 0, 0, 0, 0, 0, 0 )
      *SetOrientation( bsh_jounce_bumper.l,        ONEAXIS, Z, POINT, p_tube.l )
      *SetOrientation( bsh_jounce_bumper.r,        ONEAXIS, Z, POINT, p_tube.r )
      *SetCurve( crv_jounce_bumper,          FILE, { getenv("ALTAIR_HOME") + "/hw/mdl/mdllib/Libs/Models/Frnt_bumpers/Jnc_int1/bumper_force.dat"}, "Unknown", "Block 1", "displacement", FILE, { getenv("ALTAIR_HOME") + "/hw/mdl/mdllib/Libs/Models/Frnt_bumpers/Jnc_int1/bumper_force.dat"}, "Unknown", "Block 1", "bumper_force", LIN_EXTRAP )
      *SetCurveAttributes( crv_jounce_bumper,          1, 35, -1, 0 )
      *SetReal( ds_jnc_bmp.end_to_tip,       77 )
      *SetReal( ds_jnc_bmp.tip_to_cont,       35 )
      *SetReal( ds_jnc_bmp.shock_len,       sqrt((p_rod.l.x-p_tube.l.x)^2+(p_rod.l.y-p_tube.l.y)^2+(p_rod.l.z-p_tube.l.z)^2) )
  *endif()
  *EndDefine()
  *DefineDataSet( dsdef_jnc_bmp )
    *Real( end_to_tip, "Rod upper to bumper tip (mm)", EDIT )
    *Real( tip_to_cont, "Tip to contact dist. (mm) - clearence to be set manually in the curve x offset", EDIT )
    *Real( shock_len, "Shock length (mm)", EDIT )
  *EndDefine()
  *DefineForm( frmdef_jnc_bmp, ds )
    *SetRowsCols( 2, 2 )
    *Attachment( ds, "Attachment ds", DataSet, "Select attachment.", ,  )
    *ColumnWidth( 1, 30 )
    *ColumnLabel( 1, 2, THIS.label )
    *SetCell( 1, 1, ds.end_to_tip.label, "", LEFT, NO_EDIT )
    *SetCell( 1, 2, ds.end_to_tip.value, "%5.1f", RIGHT, EDIT )
    *SetCell( 2, 1, ds.tip_to_cont.label, "", LEFT, NO_EDIT )
    *SetCell( 2, 2, ds.tip_to_cont.value, "%5.1f", RIGHT, EDIT )
  *EndDefine()
  *DefineSystem( sysdef_rebound_bumper, b_bmp_attach, b_bmp_contact, p_rod
           , p_tube )
    *Attachment( b_bmp_attach, "Tube body", BodyPair, "Tube body (rubber attaching body)", ,  )
    *Attachment( b_bmp_contact, "Rod body", BodyPair, "Rod body (contact body)", ,  )
    *Attachment( p_rod, "Upper rod", PointPair, "Upper rod point", ,  )
    *Attachment( p_tube, "Lower tube", PointPair, "Lower tube point", ,  )
    *DataSet( ds_reb_bmp, "Rebound bumper lengths", dsdef_reb_bmp )
    *Form( frm_reb_bmp, "Rebound bumper lengths", frmdef_reb_bmp, ds_reb_bmp )
    *if( SolverMode == "ADAMS"  || SolverMode == "MotionSolve" )
      *PointPair( p_bmp_tip, "Rebound bumper tip" )
      *PointPair( p_contact, "Rebound bumper contact" )
      *MarkerPair( mrk_frc, "Force direction reference", b_bmp_contact, p_rod )
      *MarkerPair( mrk_disp, "Displacement reference", b_bmp_attach, p_bmp_tip )
      *ActionReactionForcePair( frc_bmp, "rebound bumper", TRANS, b_bmp_contact, b_bmp_attach, p_contact, mrk_frc )
      *Curve( crv1, "rebound bumper 1", 2D, CARTESIAN, WRITE, CURVE_POINTS, OPEN )
      *Output( rebound_bumper_l_disp, "Left rebound bumper disp", DISP, p_contact.l, b_bmp_contact.l, p_bmp_tip.l, b_bmp_attach.l, mrk_disp.l, BOTH_MARKERS )
      *Output( rebound_bumper_r_disp, "Right rebound bumper disp", DISP, p_contact.r, b_bmp_contact.r, p_bmp_tip.r, b_bmp_attach.r, mrk_disp.r, BOTH_MARKERS )
      *Output( reb_bmp_l_frc, "Left rebound bumper force", FORCE, FORCE, frc_bmp.l, mrk_frc.l, BOTH_MARKERS )
      *Output( reb_bmp_r_frc, "Right rebound bumper force", FORCE, FORCE, frc_bmp.r, mrk_frc.r, BOTH_MARKERS )
      *GraphicPair( g_reb_bmp, "rebound bumper", CYLINDER, b_bmp_attach, p_bmp_tip, POINT, p_rod, 20, 24, 20, 0, CAPBOTH, 3 )
      *GraphicPair( g_bmp_contact, "rebound bumper contact", CYLINDER, b_bmp_contact, p_contact, VECTOR, mrk_frc.zaxis, 24, 24, 5, 0, CAPBEGIN, 3 )
    *else()
      *PointPair( p_bmp_tip1, "Rebound bumper tip" )
      *PointPair( p_contact1, "Rebound bumper contact" )
      *MarkerPair( mrk_frc1, "Force direction reference", b_bmp_attach, p_tube )
      *BushPair( bsh_rebound_bumper, "rebound bumper", b_bmp_contact, b_bmp_attach, p_tube )
      *Curve( crv_rebound_bumper, "rebound bumper", 2D, CARTESIAN, WRITE, CURVE_POINTS, OPEN )
      *Output( rebound_bumper_l_disp1, "Left rebound bumper disp", DISP, p_contact1.l, b_bmp_contact.l, p_bmp_tip1.l, b_bmp_attach.l, mrk_frc1.l, BOTH_MARKERS )
      *Output( rebound_bumper_r_disp1, "Right rebound bumper disp", DISP, p_contact1.r, b_bmp_contact.r, p_bmp_tip1.r, b_bmp_attach.r, mrk_frc1.r, BOTH_MARKERS )
      *Output( o_rebound_bumper_l_force1, "Left rebound bumper force", FORCE, BUSHING, bsh_rebound_bumper.l, mrk_frc1.l, BOTH_MARKERS )
      *Output( o_rebound_bumper_r_force1, "Right rebound bumper force", FORCE, BUSHING, bsh_rebound_bumper.r, mrk_frc1.r, BOTH_MARKERS )
      *GraphicPair( g_reb_bush_contact1, "rebound bush contact", CYLINDER, bsh_rebound_bumper.b1, p_contact1, VECTOR, mrk_frc1.zaxis, 18, 24, -30, 0, CAPBOTH, 3 )
      *GraphicPair( g_reb_bmp1, "rebound bumper", CYLINDER, b_bmp_attach, p_bmp_tip1, POINT, p_rod, 24, 24, 5, 0, CAPBOTH, 3 )
    *endif()
    *if( SolverMode == "ADAMS"  || SolverMode == "MotionSolve" )
      *SetEntityId( rebound_bumper_l_disp,       30105010 )
      *SetEntityId( rebound_bumper_r_disp,       30105110 )
      *SetEntityId( reb_bmp_l_frc,              30105020 )
      *SetEntityId( reb_bmp_r_frc,              30105120 )
      *SetPoint( p_bmp_tip,            LEFT, p_tube.l.x+(p_rod.l.x-p_tube.l.x)/ds_reb_bmp.shock_len.value*ds_reb_bmp.end_to_tip.value, p_tube.l.y+(p_rod.l.y-p_tube.l.y)/ds_reb_bmp.shock_len.value*ds_reb_bmp.end_to_tip.value, p_tube.l.z+(p_rod.l.z-p_tube.l.z)/ds_reb_bmp.shock_len.value*ds_reb_bmp.end_to_tip.value )
      *SetPoint( p_contact,            LEFT, p_tube.l.x+(p_rod.l.x-p_tube.l.x)/ds_reb_bmp.shock_len.value*(ds_reb_bmp.end_to_tip.value-ds_reb_bmp.tip_to_cont.value), p_tube.l.y+(p_rod.l.y-p_tube.l.y)/ds_reb_bmp.shock_len.value*(ds_reb_bmp.end_to_tip.value-ds_reb_bmp.tip_to_cont.value), p_tube.l.z+(p_rod.l.z-p_tube.l.z)/ds_reb_bmp.shock_len.value*(ds_reb_bmp.end_to_tip.value-ds_reb_bmp.tip_to_cont.value) )
      *SetOrientation( mrk_frc,              LEFT, ONEAXIS, Z, POINT, p_contact.l )
      *SetOrientation( mrk_disp,             LEFT, ONEAXIS, Z, POINT, p_rod.l )
      *SetCurve( crv1,                       MATH, 0:32:1, MATH, crv1.x^3/4, LIN_EXTRAP )
      *SetForce( frc_bmp.l,                  LIN, 0, LIN, 0, CRV, crv1, AKIMA, `IF(DZ({frc_bmp.i.l.id,%d},{mrk_disp.l.id,%d},{mrk_disp.l.id,%d}):{cr()},0,0,DZ({frc_bmp.i.l.id,%d},{mrk_disp.l.id,%d},{mrk_disp.l.id,%d}))` )
      *SetForce( frc_bmp.r,                  LIN, 0, LIN, 0, CRV, crv1, AKIMA, `IF(DZ({frc_bmp.i.r.id,%d},{mrk_disp.r.id,%d},{mrk_disp.r.id,%d}):{cr()},0,0,DZ({frc_bmp.i.r.id,%d},{mrk_disp.r.id,%d},{mrk_disp.r.id,%d}))` )
      *SetReal( ds_reb_bmp.end_to_tip,       115 )
      *SetReal( ds_reb_bmp.tip_to_cont,       40 )
      *SetReal( ds_reb_bmp.shock_len,       sqrt((p_rod.l.x-p_tube.l.x)^2+(p_rod.l.y-p_tube.l.y)^2+(p_rod.l.z-p_tube.l.z)^2) )
    *else()
      *SetEntityId( rebound_bumper_l_disp1,       30105010 )
      *SetEntityId( rebound_bumper_r_disp1,       30105110 )
      *SetEntityId( o_rebound_bumper_l_force1,       30105020 )
      *SetEntityId( o_rebound_bumper_r_force1,       30105120 )
      *SetPoint( p_bmp_tip1,           LEFT, p_tube.l.x+(p_rod.l.x-p_tube.l.x)/ds_reb_bmp.shock_len.value*ds_reb_bmp.end_to_tip.value, p_tube.l.y+(p_rod.l.y-p_tube.l.y)/ds_reb_bmp.shock_len.value*ds_reb_bmp.end_to_tip.value, p_tube.l.z+(p_rod.l.z-p_tube.l.z)/ds_reb_bmp.shock_len.value*ds_reb_bmp.end_to_tip.value )
      *SetPoint( p_contact1,           LEFT, p_tube.l.x+(p_rod.l.x-p_tube.l.x)/ds_reb_bmp.shock_len.value*(ds_reb_bmp.end_to_tip.value-ds_reb_bmp.tip_to_cont.value), p_tube.l.y+(p_rod.l.y-p_tube.l.y)/ds_reb_bmp.shock_len.value*(ds_reb_bmp.end_to_tip.value-ds_reb_bmp.tip_to_cont.value), p_tube.l.z+(p_rod.l.z-p_tube.l.z)/ds_reb_bmp.shock_len.value*(ds_reb_bmp.end_to_tip.value-ds_reb_bmp.tip_to_cont.value) )
      *SetOrientation( mrk_frc1,             LEFT, ONEAXIS, Z, POINT, p_rod.l )
      *SetBush( bsh_rebound_bumper,       , LIN, 0, LIN, 0, CRV, crv_rebound_bumper, AKIMA, `{bsh_rebound_bumper.l.DZ}`, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, 0, 0, 0, 0, 0, 0
                                          , LIN, 0, LIN, 0, CRV, crv_rebound_bumper, AKIMA, `{bsh_rebound_bumper.r.DZ}`, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, 0, 0, 0, 0, 0, 0 )
      *SetOrientation( bsh_rebound_bumper.l,       ONEAXIS, Z, POINT, p_rod.l )
      *SetOrientation( bsh_rebound_bumper.r,       ONEAXIS, Z, POINT, p_rod.r )
      *SetCurve( crv_rebound_bumper,         FILE, { getenv("ALTAIR_HOME") + "/hw/mdl/mdllib/Libs/Models/Frnt_bumpers/Reb_int1/bumper_force.dat"}, "Unknown", "Block 1", "displacement", FILE, { getenv("ALTAIR_HOME") + "/hw/mdl/mdllib/Libs/Models/Frnt_bumpers/Reb_int1/bumper_force.dat"}, "Unknown", "Block 1", "bumper_force", LIN_EXTRAP )
      *SetCurveAttributes( crv_rebound_bumper,         1, 35, -1, 0 )
      *SetReal( ds_reb_bmp.end_to_tip,       155 )
      *SetReal( ds_reb_bmp.tip_to_cont,       35 )
      *SetReal( ds_reb_bmp.shock_len,       sqrt((p_rod.l.x-p_tube.l.x)^2+(p_rod.l.y-p_tube.l.y)^2+(p_rod.l.z-p_tube.l.z)^2) )
  *endif()
  *EndDefine()
  *DefineDataSet( dsdef_reb_bmp )
    *Real( end_to_tip, "Tube lower to bumper tip (mm)", EDIT )
    *Real( tip_to_cont, "Tip to contact dist. (mm) - clearence to be set manually in the curve x offset", EDIT )
    *Real( shock_len, "Shock length (mm)", EDIT )
  *EndDefine()
  *DefineForm( frmdef_reb_bmp, ds )
    *SetRowsCols( 2, 2 )
    *Attachment( ds, "Attachment ds", DataSet, "Select attachment.", ,  )
    *ColumnWidth( 1, 30 )
    *ColumnLabel( 1, 2, THIS.label )
    *SetCell( 1, 1, ds.end_to_tip.label, "", LEFT, NO_EDIT )
    *SetCell( 1, 2, ds.end_to_tip.value, "%5.1f", RIGHT, EDIT )
    *SetCell( 2, 1, ds.tip_to_cont.label, "", LEFT, NO_EDIT )
    *SetCell( 2, 2, ds.tip_to_cont.value, "%5.1f", RIGHT, EDIT )
  *EndDefine()
  *DefineSystem( sysdef_str_links, b_tierod_att, b_rackhsg_att, p_otrb )
    *Attachment( b_tierod_att, "Tierod attach", BodyPair, "Tierod attaching body", ,  )
    *Attachment( b_rackhsg_att, "Rackhsg attach", BodyPair, "Rack hsg attaching body", ,  )
    *Attachment( p_otrb, "OTRB", PointPair, "Outer tierod pt", ,  )
    *Integer( str_req_id, "Steering request ID", EDIT )
    *PointPair( p_itrb, "Inr tierod ball jt" )
    *PointPair( p_tierod_cg, "Tierod CG" )
    *Point( p_rack_cg, "Rack CG" )
    *Point( p_for_spherical, "Point for sperical joint instead of Rack UCons in the tasks" )
    *Point( p_pinion_cent, "Center of Pinion" )
    *Point( p_upper_inp, "Upper Input Shaft" )
    *Point( p_upper_pin, "Upper Pinion" )
    *Point( p_pinion_cg, "Pinion CG" )
    *Point( p_rackhsg_cg, "Rack housing CG" )
    *PointPair( p_rackhsg_end, "Rack housing end" )
    *PointPair( p_rackhsg_mnt, "Rack housing mount" )
    *if( Op_Compliant.value == "Yes" )
      *PointPair( p_rackhsg_ax, "Rack housing axial" )
      *PointPair( p_rackhsg_rad, "Rack housing radial" )
    *endif()
    *BodyPair( b_tierod, "Tierod", p_tierod_cg, , , ,  )
    *Body( b_rack, "Rack", p_rack_cg, , , ,  )
    *Body( b_rackhsg, "Rack housing", p_rackhsg_cg, , , ,  )
    *Body( b_pinion, "Pinion", p_pinion_cg, , , ,  )
    *TransJoint( j_rack, "Rack trans joint", b_rackhsg, b_rack, p_rack_cg, POINT, p_itrb.r )
    *RevJoint( j_pinion, "Pinion joint", b_rackhsg, b_pinion, p_pinion_cent, POINT, p_upper_pin )
    *UJointPair( j_itrb, "Inr tierod ball jt", b_tierod, b_rack, p_itrb, SHAFT, POINT, p_otrb, CROSSPIN, VECTOR, Global_Frame.xaxis )
    *BallJointPair( j_otrb, "Otr tierod ball jt", b_tierod, b_tierod_att, p_otrb )
    *if( Op_Compliant.value == "No" )
      *FixedJoint( j_rackhsg_mnt, "Rack housing mount", b_rackhsg, b_rackhsg_att.l, p_rackhsg_mnt.l )
    *else()
      *BushPair( bsh_rackhsg_mnt, "Rack housing mount", b_rackhsg, b_rackhsg_att, p_rackhsg_mnt )
      *GraphicPair( CYLINDER1, "CYLINDER", CYLINDER, b_rackhsg, p_rackhsg_mnt, VECTOR, bsh_rackhsg_mnt.i.zaxis, 25, 25, 38.1, -19.05, CAPNONE, 3 )
      *GraphicPair( CYLINDER2, "CYLINDER", CYLINDER, b_rackhsg, p_rackhsg_mnt, VECTOR, bsh_rackhsg_mnt.i.zaxis, 25, 23, .1, -19.05, CAPNONE, 3 )
      *GraphicPair( CYLINDER3, "CYLINDER", CYLINDER, b_rackhsg, p_rackhsg_mnt, VECTOR, bsh_rackhsg_mnt.i.zaxis, 25, 23, .1, 19.05, CAPNONE, 3 )
      *GraphicPair( CYLINDER4, "CYLINDER", CYLINDER, bsh_rackhsg_mnt.b2, p_rackhsg_mnt, VECTOR, bsh_rackhsg_mnt.i.zaxis, 23, 23, 40.1, -20.05, CAPNONE, 3 )
      *GraphicPair( CYLINDER5, "CYLINDER", CYLINDER, bsh_rackhsg_mnt.b2, p_rackhsg_mnt, VECTOR, bsh_rackhsg_mnt.i.zaxis, 23, 10, 0.1, -20.05, CAPNONE, 3 )
      *GraphicPair( CYLINDER6, "CYLINDER", CYLINDER, bsh_rackhsg_mnt.b2, p_rackhsg_mnt, VECTOR, bsh_rackhsg_mnt.i.zaxis, 23, 10, 0.1, 20.05, CAPNONE, 3 )
      *GraphicPair( CYLINDER7, "CYLINDER", CYLINDER, b_rackhsg_att, p_rackhsg_mnt, VECTOR, bsh_rackhsg_mnt.i.zaxis, 10, 10, 52, -26, CAPBOTH, 3 )
    *endif()
    *Coupler( c_rackpin, "Rack/Pinion Coupler", 2JOINT, j_rack, j_pinion, TRANS, TRANS )
    *if( SolverMode == "ABAQUS" )
      *Motion( mot_pinion, "Motion pinion", JOINT, j_pinion, ROT )
    *endif()
    *Graphic( CYLINDER8, "CYLINDER", CYLINDER, b_rack, p_itrb.l, POINT, p_itrb.r, 12, CYLINDER8.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( Sphere1, "Sphere", SPHERE, j_itrb.b2, p_itrb, 15, 3 )
    *Graphic( CYLINDER9, "CYLINDER", CYLINDER, b_rackhsg, p_rackhsg_end.l, POINT, p_rackhsg_end.r, 35, CYLINDER9.r1, , 0.0, CAPBOTH, 3 )
    *Graphic( CYLINDER10, "CYLINDER", CYLINDER, b_rackhsg, p_pinion_cent, POINT, p_upper_pin, 25, 25, 75, -35, CAPBEGIN, 3 )
    *GraphicPair( CYLINDER11, "CYLINDER", CYLINDER, b_tierod, p_itrb, POINT, p_otrb, 10, CYLINDER11.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( Sphere2, "Sphere", SPHERE, j_otrb.b2, p_otrb, 15, 3 )
    *Graphic( CYLINDER12, "CYLINDER", CYLINDER, b_pinion, p_pinion_cent, POINT, p_upper_pin, 10, CYLINDER12.r1, , 0.0, CAPNONE, 3 )
    *Graphic( CYLINDER13, "CYLINDER", CYLINDER, b_pinion, p_pinion_cent, POINT, p_upper_pin, 15, 15, 50, -25, CAPNONE, 3 )
    *System( sys_column, "Steering column 1  (not for abaqus)", sysdef_column, sys_steering.p_upper_inp
             , sys_steering.p_upper_pin, sys_steering.b_pinion, sys_body.b_body )
    *SetInteger( str_req_id,                 { sys_column.label == "Steering column 1  (not for abaqus)" ? sys_column.str_req.idstring : str_link_req.idstring} )
    *SetPoint( p_itrb,               LEFT, 1165, -310, 1015 )
    *SetPoint( p_tierod_cg,          LEFT, p_itrb.l.x / 2 + p_otrb.l.x / 2, p_itrb.l.y / 2 + p_otrb.l.y / 2, p_itrb.l.z / 2 + p_otrb.l.z / 2 )
    *SetPoint( p_rack_cg,                  p_itrb.l.x / 2 + p_itrb.r.x / 2, p_itrb.l.y / 2 + p_itrb.r.y / 2, p_itrb.l.z / 2 + p_itrb.r.z / 2 )
    *SetPoint( p_for_spherical,            p_itrb.l.x / 2 + p_itrb.r.x / 2, p_itrb.l.y / 2 + p_itrb.r.y / 2, p_itrb.l.z / 2 + p_itrb.r.z / 2 )
    *SetPoint( p_pinion_cent,              p_itrb.l.x + 10, p_itrb.l.y + 165, p_itrb.l.z - 15 )
    *SetPoint( p_upper_inp,                p_pinion_cent.x + 125, p_pinion_cent.y - 55, p_pinion_cent.z + 65 )
    *SetPoint( p_upper_pin,                p_upper_inp.x / 2 + p_pinion_cent.x / 2, p_upper_inp.y / 2 + p_pinion_cent.y / 2, p_upper_inp.z / 2 + p_pinion_cent.z / 2 )
    *SetPoint( p_pinion_cg,                p_pinion_cent.x / 2 + p_upper_pin.x / 2, p_pinion_cent.y / 2 + p_upper_pin.y / 2, p_pinion_cent.z / 2 + p_upper_pin.z / 2 )
    *SetPoint( p_rackhsg_mnt,        LEFT, p_itrb.l.x - 45.0, p_itrb.l.y + 165.0, p_itrb.l.z )
    *SetPoint( p_rackhsg_end,        LEFT, p_itrb.l.x, p_itrb.l.y + 75.0, p_itrb.l.z )
    *SetPoint( p_rackhsg_cg,               p_rackhsg_end.l.x / 2 + p_rackhsg_end.r.x / 2, p_rackhsg_end.l.y / 2 + p_rackhsg_end.r.y / 2, p_rackhsg_end.l.z / 2 + p_rackhsg_end.r.z / 2 )
    *SetPoint( p_rackhsg_ax,         LEFT, p_rackhsg_mnt.l.x, p_rackhsg_mnt.l.y, p_rackhsg_mnt.l.z + 100.0 )
    *SetPoint( p_rackhsg_rad,        LEFT, p_rackhsg_mnt.l.x + 100, p_rackhsg_mnt.l.y, p_rackhsg_mnt.l.z )
    *SetBodyInertia( b_tierod,             LEFT, 1.000e+00, 3.000e+04, 3.000e+04, 3.000e+02, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_rack,                     2.000e+00, 3.000e+04, 3.000e+02, 3.000e+04, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_rackhsg,                  8.000e+00, 2.000e+05, 2.000e+02, 2.000e+05, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_pinion,                   1.000e+00, 1.000e+04, 1.000e+04, 1.000e+02, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetBush( bsh_rackhsg_mnt,      LEFT, LIN, 3.000e+04, LIN, 3.000e+04, LIN, 1.115e+04, LIN, 3.000e+02, LIN, 3.000e+02, LIN, 1.115e+02, LIN, 1.000e+06, LIN, 1.000e+06, LIN, 1.000e+06, LIN, 1.000e+04, LIN, 1.000e+04, LIN, 1.000e+04, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetOrientation( bsh_rackhsg_mnt,      LEFT, TWOAXES, ZX, POINT, p_rackhsg_ax.l, POINT, p_rackhsg_rad.l )
    *SetCoupler( c_rackpin,                  -8.5 )
    *SetMotion( mot_pinion,                 DISP, LIN, 0 )
  *EndDefine()
  *DefineSystem( sysdef_column, p_lower_uj, p_l_uj_align, b_lis_att
           , b_column_att )
    *Attachment( p_lower_uj, "Lower UJoint", Point, "This is usually the same as the upper input shaft point in the steering system", ,  )
    *Attachment( p_l_uj_align, "Lower UJoint Al.", Point, "This is usually the same as the upper pinion point or the upper wormshaft point in the steering system", ,  )
    *Attachment( b_lis_att, "Input shaft", Body, "This is usually the gear input shaft defined in the boost system", ,  )
    *Attachment( b_column_att, "Column Attach", Body, "This is usually the vehicle body or ground", ,  )
    *Point( p_st_wheel, "Steering Wheel Center" )
    *Point( p_tilt_jt, "Tilt Joint Point" )
    *Point( p_cm_lcs, "CM of Lower Col Shaft" )
    *Point( p_cm_ucs, "CM of Upper Col Shaft" )
    *Point( p_upper_uj, "Upper U-joint Point" )
    *Point( p_tele_jt, "Telescopic Joint Point" )
    *Point( p_cmp_jt, "Comp. Joint Point" )
    *Point( p_cm_uis, "CM of Upper Int Shaft" )
    *Point( p_cm_mis, "CM of Middle Int Shaft" )
    *Point( p_cm_lis, "CM of Lower Int Shaft" )
    *Body( b_st_wheel, "Steering Wheel", p_st_wheel, , , ,  )
    *Body( b_ucs, "Upper Col Shaft", p_cm_ucs, , , ,  )
    *Body( b_lcs, "Lower Col Shaft", p_cm_lcs, , , ,  )
    *Body( b_uis, "Upper Int Shaft", p_cm_uis, , , ,  )
    *Body( b_mis, "Middle Int Shaft", p_cm_mis, , , ,  )
    *Body( b_lis, "Lower Int Shaft", p_cm_lis, , , ,  )
    *FixedJoint( j_swucs, "Fixed joint bet SW and UCS", b_st_wheel, b_ucs, p_st_wheel )
    *UJoint( j_tiltjt, "Tilt Joint", b_ucs, b_lcs, p_tilt_jt, SHAFT, POINT, p_st_wheel, SHAFT, POINT, p_upper_uj )
    *InlineJoint( j_colsupp, "Column Support Joint", b_lcs, b_column_att, p_upper_uj, ORIGIN, POINT, p_tilt_jt )
    *UJoint( j_upper_uj, "Upper U-Joint", b_lcs, b_uis, p_upper_uj, SHAFT, POINT, p_tilt_jt, SHAFT, POINT, p_tele_jt )
    *TransJoint( j_tele_jt, "Telescopic Joint", b_uis, b_mis, p_tele_jt, POINT, p_cmp_jt )
    *FixedJoint( j_cmp_jt, "Column Compliance Joint", b_mis, b_lis, p_cmp_jt, ALLOW_COMPLIANCE )
    *UJoint( j_lower_uj, "Lower U-Joint", b_lis, b_lis_att, p_lower_uj, SHAFT, POINT, p_cmp_jt, SHAFT, POINT, p_l_uj_align )
    *RevJoint( j_st_wheel, "Steering wheel joint", b_st_wheel, b_column_att, p_st_wheel, POINT, p_tilt_jt )
    *Marker( mrk_st_wheel, "Steering wheel marker", b_st_wheel, p_st_wheel )
    *Output( str_req, "Steering Angle and Torque (deg - Nm)", EXPR, `-AZ({j_st_wheel.i.idstring},{j_st_wheel.j.idstring})*RTOD`, `-TZ({j_st_wheel.i.idstring},{j_st_wheel.j.idstring},{j_st_wheel.j.idstring})/1000`, `0`, `0`, `0`, `0` )
    *Graphic( CYLINDER1, "CYLINDER", CYLINDER, b_st_wheel, p_st_wheel, POINT, p_tilt_jt, 135, 150, 15, 0, CAPNONE, 3 )
    *Graphic( CYLINDER2, "CYLINDER", CYLINDER, b_st_wheel, p_st_wheel, POINT, p_tilt_jt, 165, 150, 15, 0, CAPNONE, 3 )
    *Graphic( CYLINDER3, "CYLINDER", CYLINDER, b_st_wheel, p_st_wheel, POINT, p_tilt_jt, 150, 135, 15, -15, CAPNONE, 3 )
    *Graphic( CYLINDER4, "CYLINDER", CYLINDER, b_st_wheel, p_st_wheel, POINT, p_tilt_jt, 150, 165, 15, -15, CAPNONE, 3 )
    *Graphic( CYLINDER5, "CYLINDER", CYLINDER, b_st_wheel, p_st_wheel, POINT, p_tilt_jt, 40, 50, 76, -6, CAPBEGIN, 3 )
    *Graphic( str_mark, "Steer angle", CYLINDER, b_st_wheel, p_st_wheel, VECTOR, mrk_st_wheel.zaxis, 5, 5, 150, 0, CAPNONE, 3 )
    *Graphic( CYLINDER6, "CYLINDER", CYLINDER, b_ucs, p_st_wheel, POINT, p_tilt_jt, 10, CYLINDER6.r1, , 0.0, CAPNONE, 3 )
    *Graphic( CYLINDER7, "CYLINDER", CYLINDER, b_ucs, p_tilt_jt, POINT, p_st_wheel, 20, 20, 20, 0, CAPEND, 3 )
    *Graphic( CYLINDER8, "CYLINDER", CYLINDER, b_lcs, p_tilt_jt, POINT, p_upper_uj, 10, CYLINDER8.r1, , 0.0, CAPNONE, 3 )
    *Graphic( CYLINDER9, "CYLINDER", CYLINDER, b_lcs, p_tilt_jt, POINT, p_upper_uj, 20, 20, 20, 0, CAPEND, 3 )
    *Graphic( CYLINDER10, "CYLINDER", CYLINDER, b_lcs, p_upper_uj, POINT, p_tilt_jt, 20, 20, 20, 0, CAPEND, 3 )
    *Graphic( CYLINDER11, "CYLINDER", CYLINDER, b_uis, p_upper_uj, POINT, p_tele_jt, 10, CYLINDER11.r1, , 0.0, CAPNONE, 3 )
    *Graphic( CYLINDER12, "CYLINDER", CYLINDER, b_uis, p_upper_uj, POINT, p_tele_jt, 20, 20, 20, 0, CAPEND, 3 )
    *Graphic( CYLINDER13, "CYLINDER", CYLINDER, b_lis, p_cmp_jt, POINT, p_lower_uj, 10, CYLINDER13.r1, , 0.0, CAPNONE, 3 )
    *Graphic( CYLINDER14, "CYLINDER", CYLINDER, b_lis, p_lower_uj, POINT, p_cmp_jt, 20, 20, 20, 0, CAPEND, 3 )
    *Graphic( CYLINDER15, "CYLINDER", CYLINDER, b_mis, p_tele_jt, POINT, p_cmp_jt, 12, CYLINDER15.r1, , 0.0, CAPNONE, 3 )
    *Graphic( CYLINDER16, "CYLINDER", CYLINDER, b_mis, p_cmp_jt, POINT, p_tele_jt, 30, 30, 2, 2, CAPEND, 3 )
    *Graphic( CYLINDER17, "CYLINDER", CYLINDER, b_lis, p_cmp_jt, POINT, p_lower_uj, 30, 30, 2, 2, CAPEND, 3 )
    *Graphic( CYLINDER18, "CYLINDER", CYLINDER, j_cmp_jt.b1, j_cmp_jt.i.origin, VECTOR, j_cmp_jt.i.zaxis, 30, 30, 4, -2, CAPBOTH, 3 )
    *Graphic( CYLINDER19, "CYLINDER", CYLINDER, b_lis_att, p_lower_uj, POINT, p_l_uj_align, 20, 20, 20, 0, CAPEND, 3 )
    *Graphic( CYLINDER20, "CYLINDER", CYLINDER, j_tiltjt.b1, j_tiltjt.i.origin, VECTOR, j_tiltjt.i.zaxis, 5, 5, 44, -22, CAPBOTH, 3 )
    *Graphic( CYLINDER21, "CYLINDER", CYLINDER, j_tiltjt.b2, j_tiltjt.j.origin, VECTOR, j_tiltjt.j.zaxis, 5, 5, 44, -22, CAPBOTH, 3 )
    *Graphic( CYLINDER22, "CYLINDER", CYLINDER, j_upper_uj.b1, j_upper_uj.i.origin, VECTOR, j_upper_uj.i.zaxis, 5, 5, 44, -22, CAPBOTH, 3 )
    *Graphic( CYLINDER23, "CYLINDER", CYLINDER, j_upper_uj.b2, j_upper_uj.j.origin, VECTOR, j_upper_uj.j.zaxis, 5, 5, 44, -22, CAPBOTH, 3 )
    *Graphic( CYLINDER24, "CYLINDER", CYLINDER, j_lower_uj.b1, j_lower_uj.i.origin, VECTOR, j_lower_uj.i.zaxis, 5, 5, 44, -22, CAPBOTH, 3 )
    *Graphic( CYLINDER25, "CYLINDER", CYLINDER, j_lower_uj.b2, j_lower_uj.j.origin, VECTOR, j_lower_uj.j.zaxis, 5, 5, 44, -22, CAPBOTH, 3 )
    *SetEntityId( str_req,                    60100010 )
    *SetPoint( p_st_wheel,                 1950.00, -410, 1500.00 )
    *SetPoint( p_upper_uj,                 1650.00, -410, 1325.00 )
    *SetPoint( p_cm_ucs,                   (p_st_wheel.x + p_tilt_jt.x)*1/2, (p_st_wheel.y + p_tilt_jt.y)*1/2, (p_st_wheel.z + p_tilt_jt.z)*1/2 )
    *SetPoint( p_tilt_jt,                  p_upper_uj.x + (p_st_wheel.x - p_upper_uj.x)*2/4, p_upper_uj.y + (p_st_wheel.y - p_upper_uj.y)*2/4, p_upper_uj.z + (p_st_wheel.z - p_upper_uj.z)*2/4 )
    *SetPoint( p_cm_lcs,                   (p_upper_uj.x + p_tilt_jt.x )*1/2, (p_upper_uj.y + p_tilt_jt.y )*1/2, (p_upper_uj.z + p_tilt_jt.z )*1/2 )
    *SetPoint( p_cm_uis,                   (p_upper_uj.x + p_tele_jt.x)*1/2, (p_upper_uj.y + p_tele_jt.y)*1/2, (p_upper_uj.z + p_tele_jt.z)*1/2 )
    *SetPoint( p_tele_jt,                  p_lower_uj.x + (p_upper_uj.x - p_lower_uj.x)*4/6, p_lower_uj.y + (p_upper_uj.y - p_lower_uj.y)*4/6, p_lower_uj.z + (p_upper_uj.z - p_lower_uj.z)*4/6 )
    *SetPoint( p_cm_mis,                   (p_cmp_jt.x + p_tele_jt.x)*1/2, (p_cmp_jt.y + p_tele_jt.y)*1/2, (p_cmp_jt.z + p_tele_jt.z)*1/2 )
    *SetPoint( p_cmp_jt,                   p_lower_uj.x + (p_upper_uj.x - p_lower_uj.x)*2/6, p_lower_uj.y + (p_upper_uj.y - p_lower_uj.y)*2/6, p_lower_uj.z + (p_upper_uj.z - p_lower_uj.z)*2/6 )
    *SetPoint( p_cm_lis,                   (p_cmp_jt.x + p_lower_uj.x)*1/2, (p_cmp_jt.y + p_lower_uj.y)*1/2, (p_cmp_jt.z + p_lower_uj.z)*1/2 )
    *SetBodyInertia( b_st_wheel,                 5.000e+00, 1.5e4, 1.5e4, 2.7e4, 0, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_ucs,                      1.000e+00, 2500, 2500, 150, 0, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_lcs,                      1.000e+00, 2500, 2500, 150, 0, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_uis,                      1.000e+00, 2500, 2500, 150, 0, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_mis,                      1.000e+00, 2500, 2500, 150, 0, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_lis,                      1.000e+00, 2500, 2500, 150, 0, 0.000e+00, 0.000e+00 )
    *SetBush( j_cmp_jt.bush,              LIN, 1.000e+04, LIN, 1.000e+04, LIN, 1.000e+04, LIN, 1.000e+01, LIN, 1.000e+01, LIN, 1.000e+01, LIN, 1.000e+08, LIN, 1.000e+08, LIN, 1.000e+08, LIN, 1.000e+05, LIN, 1.000e+05, LIN, 1.000e+05, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetOrientation( j_cmp_jt.bush,              ONEAXIS, Z, POINT, p_tele_jt )
    *SetOrientation( mrk_st_wheel,               TWOAXES, XZ, POINT, p_upper_uj, VECTOR, Global_Frame.zaxis )
    *SetOrientation( b_st_wheel.cm,              ONEAXIS, Z, POINT, p_tilt_jt )
    *SetOrientation( b_ucs.cm,                   ONEAXIS, Z, POINT, p_tilt_jt )
    *SetOrientation( b_lcs.cm,                   ONEAXIS, Z, POINT, p_tilt_jt )
    *SetOrientation( b_uis.cm,                   ONEAXIS, Z, POINT, p_upper_uj )
    *SetOrientation( b_mis.cm,                   ONEAXIS, Z, POINT, p_tele_jt )
    *SetOrientation( b_lis.cm,                   ONEAXIS, Z, POINT, p_lower_uj )
  *EndDefine()
  *DefineSystem( def_sys_instrumentation_ver2, arg_sys_Body, arg_sys_FrntSusp, arg_sys_RearSusp
           , arg_sys_FrntTires, arg_sys_RearTires )
    *Attachment( arg_sys_Body, "Body/Chassis system", System, "Select attachment.", ,  )
    *Attachment( arg_sys_FrntSusp, "Front susp.", System, "Select attachment.", ,  )
    *Attachment( arg_sys_RearSusp, "Rear susp.", System, "Select attachment.", ,  )
    *Attachment( arg_sys_FrntTires, "Front tires.", System, "Select attachment.", ,  )
    *Attachment( arg_sys_RearTires, "Rear tires.", System, "Select attachment.", ,  )
    *Body( b_Dummy_for_vehBody, "Dummy_for_vehBody", arg_sys_Body.p_body_cg, , , ,  )
    *FixedJoint( j_Dummy_vehBody, "Dummy_vehBody", b_Dummy_for_vehBody, arg_sys_Body.b_body, arg_sys_Body.p_body_cg )
    *Marker( m_measurement, "Measurement Marker", b_Dummy_for_vehBody, arg_sys_Body.p_body_cg )
    *PointPair( p_frnt_tire_top, "Front Tire Top" )
    *PointPair( p_rear_tire_top, "Rear Tire Top" )
    *Point( p_body_fa, "Front axle mid" )
    *Point( p_body_ra, "Rear axle mid" )
    *MarkerPair( m_frnt_tire_top_mrk, "Front Tire Top Marker", b_Dummy_for_vehBody, p_frnt_tire_top )
    *MarkerPair( m_rear_tire_top_mrk, "Rear Tire Top Marker", b_Dummy_for_vehBody, p_rear_tire_top )
    *MarkerPair( m_veh_frnt, "Marker Vehicle Front", b_Dummy_for_vehBody, arg_sys_FrntSusp.p_wc )
    *MarkerPair( m_veh_rear, "Marker Vehicle Rear", b_Dummy_for_vehBody, arg_sys_RearSusp.p_wc )
    *MarkerPair( m_whl_frnt, "Marker Wheel Front", arg_sys_FrntSusp.j_w_spin_rj.b2, arg_sys_FrntSusp.p_wc )
    *MarkerPair( m_whl_rear, "Marker Wheel Rear", arg_sys_RearSusp.j_w_spin_rj.b2, arg_sys_RearSusp.p_wc )
    *Marker( m_frnt_axle_mid, "Front_axle_mid_body", b_Dummy_for_vehBody, p_body_fa )
    *Marker( m_rear_axle_mid, "Rear_axle_mid_body", b_Dummy_for_vehBody, p_body_ra )
    *Output( cg_disp, "Vehicle CG Displacements (m deg)", EXPR, `DX({m_measurement.id},{Global_Frame.idstring},{Global_Frame.idstring})/1000`, `DY({m_measurement.id},{Global_Frame.idstring},{Global_Frame.idstring})/1000`, `DZ({m_measurement.id},{Global_Frame.idstring},{Global_Frame.idstring})/1000`, `ROLL({m_measurement.id},{Global_Frame.idstring})*RTOD`, `PITCH({m_measurement.id},{Global_Frame.idstring})*RTOD`, `YAW({m_measurement.id},{Global_Frame.idstring})*RTOD` )
    *Output( cg_vel, "Vehicle CG Velocities (mm/sec deg/sec)", EXPR, `VX({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})`, `VY({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})`, `VZ({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})`, `WX({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})*RTOD`, `WY({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})*RTOD`, `WZ({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})*RTOD` )
    *Output( cg_acc, "Vehicle CG Accelerations (g's deg/sec**2)", EXPR, `ACCX({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})/9810`, `ACCY({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})/9810`, `ACCZ({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})/9810`, `WDTX({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})*RTOD`, `WDTY({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})*RTOD`, `WDTZ({m_measurement.id},{Global_Frame.idstring},{m_measurement.id})*RTOD` )
    *Output( o_side_slip_ang, "Side Slip Angle", EXPR, `-1*rtod*(atan((VARVAL({sv_vy.idstring}))/MAX(1.0, (ABS(VARVAL({sv_vx.idstring}))))))`, `0`, `0`, `0`, `0`, `0` )
    *Output( o_front_susp_travel, "Front Susp Travel - F2: Average | F3: Left | F4: Right", EXPR, `(VARVAL({sv_front_left_susp_travel.idstring})+VARVAL({sv_front_right_susp_travel.idstring}))/2`, `VARVAL({sv_front_left_susp_travel.idstring})`, `VARVAL({sv_front_right_susp_travel.idstring})`, `0`, `0`, `0` )
    *Output( o_rear_susp_travel, "Rear Susp Travel - F2: Average | F3: Left | F4: Right", EXPR, `(VARVAL({sv_rear_left_susp_travel.idstring})+VARVAL({sv_rear_right_susp_travel.idstring}))/2`, `VARVAL({sv_rear_left_susp_travel.idstring})`, `VARVAL({sv_rear_right_susp_travel.idstring})`, `0`, `0`, `0` )
    *Output( o_f_side_slip, "Front Side Slip Angle-F2", EXPR, `-1*rtod*(atan((VARVAL({sv_f_vy.idstring}))/MAX(1.0, (ABS(VARVAL({sv_f_vx.idstring}))))))`, `0`, `0`, `0`, `0`, `0` )
    *Output( o_r_side_slip, "Rear Side Slip Angle-F2", EXPR, `-1*rtod*(atan((VARVAL({sv_r_vy.idstring}))/MAX(1.0, (ABS(VARVAL({sv_r_vx.idstring}))))))`, `0`, `0`, `0`, `0`, `0` )
    *Output( o_frnt_wc_displ_left, "Front Left Wheel Center Displacement", DISP, arg_sys_FrntSusp.p_wc.l, arg_sys_FrntSusp.j_w_spin_rj.l.b2., arg_sys_FrntSusp.p_wc.l, b_Dummy_for_vehBody, Global_Frame, BOTH_MARKERS )
    *Output( o_frnt_wc_displ_right, "Front Right Wheel Center Displacement", DISP, arg_sys_FrntSusp.p_wc.r, arg_sys_FrntSusp.j_w_spin_rj.r.b2., arg_sys_FrntSusp.p_wc.r, b_Dummy_for_vehBody, Global_Frame, BOTH_MARKERS )
    *Output( o_rear_wc_displ_left, "Rear Left Wheel Center Displacement", DISP, arg_sys_RearSusp.p_wc.l, arg_sys_RearSusp.j_w_spin_rj.l.b2., arg_sys_RearSusp.p_wc.l, b_Dummy_for_vehBody, Global_Frame, BOTH_MARKERS )
    *Output( o_rear_wc_displ_right, "Rear Right Wheel Center Displacements", DISP, arg_sys_RearSusp.p_wc.r, arg_sys_RearSusp.j_w_spin_rj.r.b2., arg_sys_RearSusp.p_wc.r, b_Dummy_for_vehBody, Global_Frame, BOTH_MARKERS )
    *Output( o_front_steer_angle, "Front Steer Angle", USER, `USER(223, {m_whl_frnt.l.idstring}, {m_whl_frnt.r.idstring}, {m_measurement.idstring})` )
    *Output( o_rear_steer_angle, "Rear Steer Angle", USER, `USER(223, {m_whl_rear.l.idstring}, {m_whl_rear.r.idstring}, {m_measurement.idstring})` )
    *Output( o_pitch, "Pitch", EXPR, `rtod*asin(VARVAL({sv_pitch.idstring}))`, `0`, `0`, `0`, `0`, `0` )
    *Output( o_f_lift, "Front Lift", EXPR, `{sv_f_lift.VARVAL}`, `0`, `0`, `0`, `0`, `0` )
    *Output( o_r_squat, "Rear Squat", EXPR, `{sv_r_squat.VARVAL}`, `0`, `0`, `0`, `0`, `0` )
    *Output( o_f_axle_load, "Front Axle Load", EXPR, `JOINT({arg_sys_FrntSusp.j_w_spin_rj.l.idstring},0,4,0)+JOINT({arg_sys_FrntSusp.j_w_spin_rj.r.idstring},0,4,0)`, `0`, `0`, `0`, `0`, `0` )
    *Output( o_r_axle_load, "Rear Axle Load", EXPR, `JOINT({arg_sys_RearSusp.j_w_spin_rj.l.idstring},0,4,0)+JOINT({arg_sys_RearSusp.j_w_spin_rj.r.idstring},0,4,0)`, `0`, `0`, `0`, `0`, `0` )
    *Output( o_roll, "Vehicle Roll", USER, `USER(333, {b_Dummy_for_vehBody.cm.id}, {B_Ground.cm.id})` )
    *SolverVariable( sv_veh_long_accel, "Vehicle longitudinal acceleration" )
    *SolverVariable( sv_f_sideslip, "Front Side Slip Angle" )
    *SolverVariable( sv_r_sideslip, "Rear Side Slip Angle" )
    *SolverVariable( sv_f_vy, "Front Axle Lateral Velocity" )
    *SolverVariable( sv_f_vx, "Front Axle Long Velocity" )
    *SolverVariable( sv_r_vy, "Rear Axle Lateral Velocity" )
    *SolverVariable( sv_r_vx, "Rear Axle Long Velocity" )
    *SolverVariable( sv_vy, "Vehicle Lateral Velocity" )
    *SolverVariable( sv_vx, "Vehicle Long Velocity" )
    *SolverVariable( sv_f_left_toe, "Front Left Toe" )
    *SolverVariable( sv_f_right_toe, "Front Right Toe" )
    *SolverVariable( sv_r_left_toe, "Rear Left Toe" )
    *SolverVariable( sv_r_right_toe, "Rear Right Toe" )
    *SolverVariable( sv_front_left_susp_travel, "Front Left Susp Travel" )
    *SolverVariable( sv_front_right_susp_travel, "Front Right Susp Travel" )
    *SolverVariable( sv_rear_left_susp_travel, "Rear Left Susp Travel" )
    *SolverVariable( sv_rear_right_susp_travel, "Rear Right Susp Travel" )
    *SolverVariable( sv_pitch, "Pitch" )
    *SolverVariable( sv_yaw_rate, "Yaw Rate (from Global Frame)" )
    *SolverVariable( sv_f_lift, "Front Lift" )
    *SolverVariable( sv_r_squat, "Rear Squat" )
    *SetBodyInertia( b_Dummy_for_vehBody,        0.001, 10, 10, 10 )
    *SetPoint( p_frnt_tire_top,      LEFT, arg_sys_FrntSusp.p_wc.l.x, arg_sys_FrntSusp.p_wc.l.y, arg_sys_FrntSusp.p_wc.l.z + 500 )
    *SetPoint( p_rear_tire_top,      LEFT, arg_sys_RearSusp.p_wc.l.x, arg_sys_RearSusp.p_wc.l.y, arg_sys_RearSusp.p_wc.l.z + 500 )
    *SetPoint( p_body_fa,                  (arg_sys_FrntSusp.p_wc.l.x + arg_sys_FrntSusp.p_wc.r.x)/2, (arg_sys_FrntSusp.p_wc.l.y + arg_sys_FrntSusp.p_wc.r.y)/2, (arg_sys_FrntSusp.p_wc.l.z + arg_sys_FrntSusp.p_wc.r.z)/2 )
    *SetPoint( p_body_ra,                  (arg_sys_RearSusp.p_wc.l.x + arg_sys_RearSusp.p_wc.r.x)/2, (arg_sys_RearSusp.p_wc.l.y + arg_sys_RearSusp.p_wc.r.y)/2, (arg_sys_RearSusp.p_wc.l.z + arg_sys_RearSusp.p_wc.r.z)/2 )
    *SetEntityId( cg_disp,                    20000210 )
    *SetEntityId( cg_vel,                     20000220 )
    *SetEntityId( cg_acc,                     20000230 )
    *SetSolverVariable( sv_veh_long_accel,          EXPR, `-1*accx({b_Dummy_for_vehBody.cm.idstring},{Global_Frame.idstring},{b_Dummy_for_vehBody.cm.idstring})`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_f_vy,                    EXPR, `vy({m_frnt_axle_mid.idstring},{Global_Frame.idstring},{b_Dummy_for_vehBody.cm.idstring})`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_f_vx,                    EXPR, `-1*vx({m_frnt_axle_mid.idstring},{Global_Frame.idstring},{b_Dummy_for_vehBody.cm.idstring})`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_r_vy,                    EXPR, `vy({m_rear_axle_mid.idstring},{Global_Frame.idstring},{b_Dummy_for_vehBody.cm.idstring})`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_r_vx,                    EXPR, `-1*vx({m_rear_axle_mid.idstring},{Global_Frame.idstring},{b_Dummy_for_vehBody.cm.idstring})`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_vy,                      EXPR, `vy({b_Dummy_for_vehBody.cm.idstring},{Global_Frame.idstring},{b_Dummy_for_vehBody.cm.idstring})`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_vx,                      EXPR, `-1*vx({b_Dummy_for_vehBody.cm.idstring},{Global_Frame.idstring},{b_Dummy_for_vehBody.cm.idstring})`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_f_sideslip,              EXPR, `-1*rtod*(atan((VARVAL({sv_f_vy.idstring}))/MAX(1.0, (ABS(VARVAL({sv_f_vx.idstring}))))))`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_r_sideslip,              EXPR, `-1*rtod*(atan((VARVAL({sv_r_vy.idstring}))/MAX(1.0, (ABS(VARVAL({sv_r_vx.idstring}))))))`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_f_left_toe,              EXPR, `rtod*(AZ({m_whl_frnt.l.idstring},{m_measurement.idstring}))`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_f_right_toe,             EXPR, `rtod*(AZ({m_whl_frnt.r.idstring},{m_measurement.idstring}))`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_r_left_toe,              EXPR, `rtod*(AZ({m_whl_rear.l.idstring},{m_measurement.idstring}))`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_r_right_toe,             EXPR, `rtod*(AZ({m_whl_rear.r.idstring},{m_measurement.idstring}))`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_front_left_susp_travel,       EXPR, `DZ({m_frnt_tire_top_mrk.l.idstring},{arg_sys_FrntTires.sys_tire_left.att_wheelOrientMarker.l.idstring},	{m_frnt_tire_top_mrk.l.idstring}) - ( {m_frnt_tire_top_mrk.origin.l.z - arg_sys_FrntTires.sys_tire_left.att_wheelOrientMarker.origin.l.z} )`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_front_right_susp_travel,       EXPR, `DZ({m_frnt_tire_top_mrk.r.idstring},{arg_sys_FrntTires.sys_tire_right.att_wheelOrientMarker.r.idstring},{m_frnt_tire_top_mrk.r.idstring}) - ( {m_frnt_tire_top_mrk.origin.r.z - arg_sys_FrntTires.sys_tire_right.att_wheelOrientMarker.origin.r.z} )`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_rear_left_susp_travel,       EXPR, `DZ({m_rear_tire_top_mrk.l.idstring},{arg_sys_RearTires.sys_tire_left.att_wheelOrientMarker.l.idstring},	{m_rear_tire_top_mrk.l.idstring}) - ( {m_rear_tire_top_mrk.origin.l.z - arg_sys_RearTires.sys_tire_left.att_wheelOrientMarker.origin.l.z} )`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_rear_right_susp_travel,       EXPR, `DZ({m_rear_tire_top_mrk.r.idstring},{arg_sys_RearTires.sys_tire_right.att_wheelOrientMarker.r.idstring},{m_rear_tire_top_mrk.r.idstring}) - ( {m_rear_tire_top_mrk.origin.l.z - arg_sys_RearTires.sys_tire_right.att_wheelOrientMarker.origin.r.z} )`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_pitch,                   EXPR, `(VARVAL({sv_f_lift.idstring})-VARVAL({sv_r_squat.idstring})) / ({mag (arg_sys_RearSusp.p_wc.l.data - arg_sys_FrntSusp.p_wc.l.data)})`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_yaw_rate,                EXPR, `WZ({m_measurement.idstring}, {Global_Frame.idstring}, {m_measurement.idstring})`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_f_lift,                  EXPR, `(DZ({m_veh_frnt.l.idstring},{m_whl_frnt.l.idstring},{b_Dummy_for_vehBody.cm.idstring})+DZ({m_veh_frnt.r.idstring},{m_whl_frnt.r.idstring},{b_Dummy_for_vehBody.cm.idstring}))/2`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_r_squat,                 EXPR, `(DZ({m_veh_rear.l.idstring},{m_whl_rear.l.idstring},{b_Dummy_for_vehBody.cm.idstring})+DZ({m_veh_rear.r.idstring},{m_whl_rear.r.idstring},{b_Dummy_for_vehBody.cm.idstring}))/2`, OFF, 0.0, false, false )
    *SetEntityId( o_side_slip_ang,            10000001 )
    *SetEntityId( o_front_susp_travel,        10000002 )
    *SetEntityId( o_rear_susp_travel,         10000003 )
    *SetEntityId( o_roll,                     10000004 )
    *SetEntityId( o_f_side_slip,              10000005 )
    *SetEntityId( o_r_side_slip,              10000006 )
    *SetEntityId( o_frnt_wc_displ_left,       10000007 )
    *SetEntityId( o_frnt_wc_displ_right,       10000008 )
    *SetEntityId( o_rear_wc_displ_left,       10000009 )
    *SetEntityId( o_rear_wc_displ_right,       10000010 )
    *SetEntityId( o_front_steer_angle,        10000011 )
    *SetEntityId( o_rear_steer_angle,         10000012 )
    *SetEntityId( o_pitch,                    10000013 )
    *SetEntityId( o_f_lift,                   10000014 )
    *SetEntityId( o_r_squat,                  10000015 )
    *SetEntityId( o_f_axle_load,              10000016 )
    *SetEntityId( o_r_axle_load,              10000017 )
    *SetLocalUserDLLFlag( o_roll,                     true )
    *SetLocalUserFunction( o_roll,                     "msautoutils", , "REQSUB" )
    *SetLocalUserDLLFlag( o_front_steer_angle,        true )
    *SetLocalUserFunction( o_front_steer_angle,        "msautoutils", , "REQSUB" )
    *SetLocalUserDLLFlag( o_rear_steer_angle,         true )
    *SetLocalUserFunction( o_rear_steer_angle,         "msautoutils", , "REQSUB" )
  *EndDefine()
  *DefineSystem( sysdef_quadlink, b_frnt_lwr_link_att, b_rear_lwr_link_att, b_ten_str_att )
    *Attachment( b_frnt_lwr_link_att, "Frnt lwr link att body", BodyPair, "Front lower link attaching body", ,  )
    *Attachment( b_rear_lwr_link_att, "Rear lwr link att body", BodyPair, "Rear lower link attaching body", ,  )
    *Attachment( b_ten_str_att, "Tension strut att body", BodyPair, "Tension strut attaching body", ,  )
    *Option( op_spin_comp, "Spindle compliance", 2, "No", "Yes", 1, 2, "No", "Yes", EDIT )
    *PointPair( p_wheel_cg, "Wheel CG" )
    *PointPair( p_wc, "Wheel center" )
    *PointPair( p_spalign, "Spindle align" )
    *PointPair( p_kn_cg, "Knuckle CG" )
    *PointPair( p_frnt_inr_bush_ax, "Frnt lwr bush axis pt" )
    *PointPair( p_rear_inr_bush_ax, "Rear lwr bush axis pt" )
    *PointPair( p_frnt_ten_str_ax, "Tension strut alignment" )
    *PointPair( p_frnt_quad_cg, "Frnt lwr link CG" )
    *PointPair( p_rear_quad_cg, "Rear lwr link CG" )
    *PointPair( p_frnt_inr_bush, "Frnt lwr bush" )
    *PointPair( p_rear_inr_bush, "Rear lwr bush" )
    *PointPair( p_frnt_otr_bush, "Frnt LBJ" )
    *PointPair( p_rear_otr_bush, "Rear LBJ" )
    *PointPair( p_quad_otr_avg, "Average LBJ" )
    *PointPair( p_frnt_ten_str, "Frnt tension strut ball" )
    *PointPair( p_rear_ten_str, "Rear tension strut ball" )
    *PointPair( p_ten_str_bend, "Tension strut bend point" )
    *PointPair( p_ten_str_cg, "Tension strut CG" )
    *PointPair( p_strut_rod_upr, "Strut rod upr pt" )
    *PointPair( p_strut_tube_lwr, "Strut tube lwr pt" )
    *PointPair( p_spr_upr, "Spring upper pt" )
    *PointPair( p_spr_lwr, "Spring lower pt" )
    *BodyPair( b_wheel, "Wheel", p_wheel_cg, , , ,  )
    *BodyPair( b_hub, "Wheel hub", p_wheel_cg, , , ,  )
    *BodyPair( b_kn, "Knuckle", p_kn_cg, , , ,  )
    *BodyPair( b_frnt_lwr_link, "Frnt lwr link", p_frnt_quad_cg, , , ,  )
    *BodyPair( b_rear_lwr_link, "Rear lwr link", p_rear_quad_cg, , , ,  )
    *BodyPair( b_ten_str, "Tension strut", p_ten_str_cg, , , ,  )
    *BallJointPair( j_frnt_otr_bush, "Front outer bush", b_frnt_lwr_link, b_kn, p_frnt_otr_bush, ALLOW_COMPLIANCE )
    *BallJointPair( j_rear_otr_bush, "Rear outer bush", b_rear_lwr_link, b_kn, p_rear_otr_bush, ALLOW_COMPLIANCE )
    *BallJointPair( j_rear_ten_str, "Rear tension strut bush", b_ten_str, b_kn, p_rear_ten_str, ALLOW_COMPLIANCE )
    *RevJointPair( j_w_spin_rj, "Wheel spindle rj", b_hub, b_kn, p_wc, POINT, p_spalign )
    *if( op_spin_comp.value == "No" )
      *FixedJointPair( j_w_hub_fix, "Wheel|Hub fix jt", b_wheel, b_hub, p_wc )
    *else()
      *UJointPair( j_w_hub_uj, "Wheel|Hub comp u jt", b_wheel, b_hub, p_wc, SHAFT, POINT, p_spalign, CROSSPIN, VECTOR, b_wheel.cm.xaxis )
      *BushPair( bsh_w_hub, "Wheel|hub comp. bsh", b_wheel, b_hub, p_wc )
    *endif()
    *UJointPair( j_frnt_inr_bush, "Frnt lwr bush", b_frnt_lwr_link, b_frnt_lwr_link_att, p_frnt_inr_bush, SHAFT, POINT, p_frnt_otr_bush, CROSSPIN, POINT, p_rear_inr_bush, ALLOW_COMPLIANCE )
    *UJointPair( j_rear_inr_bush, "Rear lwr bush", b_rear_lwr_link, b_rear_lwr_link_att, p_rear_inr_bush, SHAFT, POINT, p_rear_otr_bush, CROSSPIN, POINT, p_frnt_inr_bush, ALLOW_COMPLIANCE )
    *UJointPair( j_frnt_ten_str, "Ten strut frnt bush", b_ten_str, b_ten_str_att, p_frnt_ten_str, SHAFT, POINT, p_ten_str_bend, CROSSPIN, VECTOR, Global_Frame.yaxis, ALLOW_COMPLIANCE )
    *GraphicPair( tire, "tire", TIRE, b_wheel, p_wc, POINT, p_spalign, "P215/70*15" )
    *GraphicPair( g_tire_rot, "Tire rotation", CYLINDER, b_wheel, p_wc, VECTOR, b_wheel.cm.xaxis, 5, 5, 335, -335, CAPNONE, 3 )
    *Graphic( g_kn4, "gra_kn4", gdef_kn4, b_kn
             , p_wc, p_spalign, p_strut_tube_lwr, p_strut_rod_upr, p_rear_ten_str
             , p_frnt_otr_bush, p_rear_otr_bush, p_quad_otr_avg )
    *GraphicPair( Cylinder1, "Cylinder", CYLINDER, b_frnt_lwr_link, p_frnt_otr_bush, POINT, p_frnt_inr_bush, 12, Cylinder1.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( Cylinder2, "Cylinder", CYLINDER, b_rear_lwr_link, p_rear_otr_bush, POINT, p_rear_inr_bush, 12, Cylinder2.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( Cylinder3, "Cylinder", CYLINDER, b_ten_str, p_rear_ten_str, POINT, p_ten_str_bend, 12, Cylinder3.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( Cylinder4, "Cylinder", CYLINDER, b_ten_str, p_frnt_ten_str, POINT, p_ten_str_bend, 12, Cylinder4.r1, , 0.0, CAPNONE, 3 )
    *if( j_frnt_inr_bush.isbush==true )
      *Graphic( g_a_arm_sleeve1, "gra_a_arm_sleeve", gdef_a_arm_sleeve, b_frnt_lwr_link
               , j_frnt_inr_bush.i.origin, j_frnt_inr_bush.i.zaxis )
      *Graphic( g_a_arm_bush1, "gra_a_arm_bush", gdef_a_arm_bush, j_frnt_inr_bush.b2
               , j_frnt_inr_bush.i.origin, j_frnt_inr_bush.i.zaxis )
      *Graphic( g_a_arm_pin1, "gra_a_arm_pin", gdef_a_arm_pin, b_frnt_lwr_link_att
               , j_frnt_inr_bush.j.origin, j_frnt_inr_bush.j.zaxis )
    *else()
      *GraphicPair( sphere1, "sphere", SPHERE, j_frnt_inr_bush.b2, j_frnt_inr_bush.i.origin, 25, 3 )
    *endif()
    *if( j_frnt_otr_bush.isbush==true )
      *Graphic( g_a_arm_sleeve2, "gra_a_arm_sleeve", gdef_a_arm_sleeve, b_frnt_lwr_link
               , j_frnt_otr_bush.i.origin, j_frnt_otr_bush.i.zaxis )
      *Graphic( g_a_arm_bush2, "gra_a_arm_bush", gdef_a_arm_bush, j_frnt_otr_bush.b2
               , j_frnt_otr_bush.i.origin, j_frnt_otr_bush.i.zaxis )
      *Graphic( g_a_arm_pin2, "gra_a_arm_pin", gdef_a_arm_pin, b_kn
               , j_frnt_otr_bush.j.origin, j_frnt_otr_bush.i.zaxis )
    *else()
      *GraphicPair( sphere2, "sphere", SPHERE, j_frnt_otr_bush.b2, j_frnt_otr_bush.i.origin, 25, 3 )
    *endif()
    *if( j_rear_inr_bush.isbush==true )
      *Graphic( g_a_arm_sleeve3, "gra_a_arm_sleeve", gdef_a_arm_sleeve, b_rear_lwr_link
               , j_rear_inr_bush.i.origin, j_rear_inr_bush.i.zaxis )
      *Graphic( g_a_arm_bush3, "gra_a_arm_bush", gdef_a_arm_bush, j_rear_inr_bush.b2
               , j_rear_inr_bush.i.origin, j_rear_inr_bush.i.zaxis )
      *Graphic( g_a_arm_pin3, "gra_a_arm_pin", gdef_a_arm_pin, b_rear_lwr_link_att
               , j_rear_inr_bush.j.origin, j_rear_inr_bush.j.zaxis )
    *else()
      *GraphicPair( sphere3, "sphere", SPHERE, j_rear_inr_bush.b2, j_rear_inr_bush.i.origin, 25, 3 )
    *endif()
    *if( j_rear_otr_bush.isbush==true )
      *Graphic( g_a_arm_sleeve4, "gra_a_arm_sleeve", gdef_a_arm_sleeve, b_rear_lwr_link
               , j_rear_otr_bush.i.origin, j_rear_otr_bush.i.zaxis )
      *Graphic( g_a_arm_bush4, "gra_a_arm_bush", gdef_a_arm_bush, j_rear_otr_bush.b2
               , j_rear_otr_bush.i.origin, j_rear_otr_bush.i.zaxis )
      *Graphic( g_a_arm_pin4, "gra_a_arm_pin", gdef_a_arm_pin, b_kn
               , j_rear_otr_bush.j.origin, j_rear_otr_bush.i.zaxis )
    *else()
      *GraphicPair( sphere4, "sphere", SPHERE, j_rear_otr_bush.b2, j_rear_otr_bush.i.origin, 25, 3 )
    *endif()
    *if( j_frnt_ten_str.isbush==true )
      *Graphic( g_a_arm_sleeve5, "gra_a_arm_sleeve", gdef_a_arm_sleeve, b_ten_str
               , j_frnt_ten_str.i.origin, j_frnt_ten_str.i.zaxis )
      *Graphic( g_a_arm_bush5, "gra_a_arm_bush", gdef_a_arm_bush, j_frnt_ten_str.b2
               , j_frnt_ten_str.i.origin, j_frnt_ten_str.i.zaxis )
      *Graphic( g_a_arm_pin5, "gra_a_arm_pin", gdef_a_arm_pin, b_ten_str_att
               , j_frnt_ten_str.j.origin, j_frnt_ten_str.j.zaxis )
    *else()
      *GraphicPair( sphere5, "sphere", SPHERE, j_frnt_ten_str.b2, j_frnt_ten_str.i.origin, 25, 3 )
    *endif()
    *if( j_rear_ten_str.isbush==true )
      *Graphic( g_tstrut_cup, "gra_tstrut_cup", gdef_tstrut_cup, b_ten_str
               , j_rear_ten_str.i.origin, j_rear_ten_str.i.zaxis )
      *Graphic( g_tstrut_bush, "gra_tstrut_bush", gdef_tstrut_bush, j_rear_ten_str.b2
               , j_rear_ten_str.i.origin, j_rear_ten_str.i.zaxis )
      *Graphic( g_tstrut_kn, "gra_tstrut_kn", gdef_tstrut_kn, b_kn
               , j_rear_ten_str.j.origin, j_rear_ten_str.j.zaxis )
    *else()
      *GraphicPair( sphere, "sphere", SPHERE, j_rear_ten_str.b2, j_rear_ten_str.i.origin, 25, 3 )
    *endif()
    *DataSet( ds_wh_align, "Static Wheel Alignment", def_ds_wh_align )
    *Form( frm_wh_align, "Static Wheel Alignment", def_frm_wh_align, ds_wh_align )
    *System( sys_rear_strut, "Rear strut (with inline jts)", sysdef_strut_inl_r, sys_body.b_body
             , sys_rear_susp.b_kn, sys_rear_susp.p_strut_rod_upr, sys_rear_susp.p_strut_tube_lwr, sys_rear_susp.p_spr_upr, sys_rear_susp.p_spr_lwr )
    *System( sys_rear_jnc_bmp, "Rear internal jounce bumpers", sysdef_r_jounce_bumper, sys_rear_susp.sys_rear_strut.b_strut_tube
             , sys_rear_susp.sys_rear_strut.b_strut_rod, sys_rear_susp.p_strut_rod_upr, sys_rear_susp.p_strut_tube_lwr )
    *System( sys_rear_reb_bmp, "Rear internal reb bumpers", sysdef_r_rebound_bumper, sys_rear_susp.sys_rear_strut.b_strut_tube
             , sys_rear_susp.sys_rear_strut.b_strut_rod, sys_rear_susp.p_strut_rod_upr, sys_rear_susp.p_strut_tube_lwr )
    *SetPoint( p_wc,                 LEFT, 3700.00, -750.00, 1000.00 )
    *SetPoint( p_spalign,            LEFT, p_wc.l.x + 100*COS(ds_wh_align.camb.value*PI/180)*SIN(ds_wh_align.toe.value*PI/180), p_wc.l.y + 100*COS(ds_wh_align.camb.value*PI/180)*COS(ds_wh_align.toe.value*PI/180), p_wc.l.z + 100*SIN(ds_wh_align.camb.value*PI/180) )
    *SetPoint( p_frnt_otr_bush,      LEFT, 3616.00, -668.00, 936.00 )
    *SetPoint( p_frnt_inr_bush,      LEFT, 3616.00, -200.00, 936.00 )
    *SetPoint( p_frnt_inr_bush_ax,   LEFT, p_frnt_inr_bush.l.x+100, p_frnt_inr_bush.l.y, p_frnt_inr_bush.l.z )
    *SetPoint( p_rear_otr_bush,      LEFT, 3766.00, -668.00, 936.00 )
    *SetPoint( p_rear_inr_bush,      LEFT, 3766.00, -200.00, 936.00 )
    *SetPoint( p_rear_inr_bush_ax,   LEFT, p_rear_inr_bush.l.x+100, p_rear_inr_bush.l.y, p_rear_inr_bush.l.z )
    *SetPoint( p_quad_otr_avg,       LEFT, (p_frnt_otr_bush.l.x + p_rear_otr_bush.l.x)/2, (p_frnt_otr_bush.l.y + p_rear_otr_bush.l.y)/2, (p_frnt_otr_bush.l.z + p_rear_otr_bush.l.z)/2 )
    *SetPoint( p_frnt_ten_str,       LEFT, 3150.00, -600.00, 875.00 )
    *SetPoint( p_ten_str_bend,       LEFT, 3425.00, -600.00, 875.00 )
    *SetPoint( p_rear_ten_str,       LEFT, 3691.00, -668.00, 875.00 )
    *SetPoint( p_frnt_ten_str_ax,    LEFT, p_frnt_ten_str.l.x, p_frnt_ten_str.l.y+100, p_frnt_ten_str.l.z )
    *SetPoint( p_strut_rod_upr,      LEFT, 3761.00, -542.00, 1511.00 )
    *SetPoint( p_strut_tube_lwr,     LEFT, 3716.00, -623.00, 1128.50 )
    *SetPoint( p_spr_upr,            LEFT, 3761.00, -542.00, 1500.00 )
    *SetPoint( p_spr_lwr,            LEFT, 3750.00, -585.00, 1350.00 )
    *SetPoint( p_wheel_cg,           LEFT, p_wc.l.x, p_wc.l.y, p_wc.l.z )
    *SetPoint( p_kn_cg,              LEFT, p_wc.l.x, p_wc.l.y+100, p_wc.l.z )
    *SetPoint( p_frnt_quad_cg,       LEFT, (p_frnt_otr_bush.l.x + p_frnt_inr_bush.l.x)/2, (p_frnt_otr_bush.l.y + p_frnt_inr_bush.l.y)/2, (p_frnt_otr_bush.l.z + p_frnt_inr_bush.l.z)/2 )
    *SetPoint( p_rear_quad_cg,       LEFT, (p_rear_otr_bush.l.x + p_rear_inr_bush.l.x)/2, (p_rear_otr_bush.l.y + p_rear_inr_bush.l.y)/2, (p_rear_otr_bush.l.z + p_rear_inr_bush.l.z)/2 )
    *SetPoint( p_ten_str_cg,         LEFT, p_ten_str_bend.l.x, p_ten_str_bend.l.y, p_ten_str_bend.l.z )
    *SetBodyInertia( b_wheel,              LEFT, 0.5, 1.750e+04, 1.750e+04, 3.000e+04, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetOrientation( b_wheel.cm.l,               TWOAXES, ZX, POINT, p_spalign.l, VECTOR, Global_Frame.zaxis )
    *SetOrientation( b_wheel.cm.r,               TWOAXES, ZX, POINT, p_spalign.r, VECTOR, Global_Frame.zaxis )
    *SetBodyInertia( b_hub,                LEFT, 10.00e+000, 70000, 70000, 1e5, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetOrientation( b_hub.cm.l,                 TWOAXES, ZX, POINT, p_spalign.l, VECTOR, Global_Frame.zaxis )
    *SetOrientation( b_hub.cm.r,                 TWOAXES, ZX, POINT, p_spalign.r, VECTOR, Global_Frame.zaxis )
    *SetBodyInertia( b_kn,                 LEFT, 9.000e+000, 2.552e+004, 2.552e+004, 2.552e+004, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetBodyInertia( b_frnt_lwr_link,      LEFT, 4.000e+000, 6.605e+003, 6.605e+003, 6.605e+003, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetBodyInertia( b_rear_lwr_link,      LEFT, 2.000e+000, 2.081e+003, 2.081e+003, 2.081e+003, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetBodyInertia( b_ten_str,            LEFT, 2.000e+000, 2.081e+003, 2.081e+003, 2.081e+003, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetBush( j_frnt_otr_bush.bush, LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( j_frnt_otr_bush.bush, LEFT, TWOAXES, XZ, POINT, p_frnt_inr_bush.l, POINT, p_rear_otr_bush.l )
    *SetBush( j_rear_otr_bush.bush, LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( j_rear_otr_bush.bush, LEFT, TWOAXES, XZ, POINT, p_rear_inr_bush.l, POINT, p_frnt_otr_bush.l )
    *SetBush( j_rear_ten_str.bush,  LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( j_rear_ten_str.bush,  LEFT, ONEAXIS, Z, POINT, p_ten_str_bend.l )
    *SetBush( j_frnt_inr_bush.bush, LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( j_frnt_inr_bush.bush, LEFT, TWOAXES, XZ, POINT, p_frnt_otr_bush.l, POINT, p_frnt_inr_bush_ax.l )
    *SetBush( j_rear_inr_bush.bush, LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( j_rear_inr_bush.bush, LEFT, TWOAXES, XZ, POINT, p_rear_otr_bush.l, POINT, p_rear_inr_bush_ax.l )
    *SetBush( j_frnt_ten_str.bush,  LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( j_frnt_ten_str.bush,  LEFT, TWOAXES, XZ, POINT, p_ten_str_bend.l, POINT, p_frnt_ten_str_ax.l )
    *SetBush( bsh_w_hub,            LEFT, LIN, 0.0, LIN, 0.0, LIN, 0.0, LIN, 0.0, LIN, 0.0, LIN, 0.0, LIN, 1745329.252*180/PI, LIN, 1745329.252*180/PI, LIN, 0.0*180/PI, LIN, 17453.29252*180/PI, LIN, 17453.29252*180/PI, LIN, 0.0*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( bsh_w_hub,            LEFT, TWOAXES, ZX, POINT, p_spalign.l, VECTOR, j_w_hub_uj.l.j.zaxis )
    *SetColorMaterialReference( tire.l,                     MODEL.mat_gray6 )
    *SetColorMaterialReference( tire.r,                     MODEL.mat_gray6 )
  *EndDefine()
  *DefineGraphic( gdef_kn4, b_kn, p_wc, p_spalign
           , p_strut_low, p_strut_upp, p_tens, p_frnt_lbj, p_rear_lbj
           , p_avg_lbj )
    *Attachment( b_kn, "Attachment b_kn", BodyPair, "Select attachment.", ,  )
    *Attachment( p_wc, "Attachment p_wc", PointPair, "Select attachment.", ,  )
    *Attachment( p_spalign, "Attachment p_spalign", PointPair, "Select attachment.", ,  )
    *Attachment( p_strut_low, "Attachment p_strut_low", PointPair, "Select attachment.", ,  )
    *Attachment( p_strut_upp, "Attachment p_strut_upp", PointPair, "Select attachment.", ,  )
    *Attachment( p_tens, "Attachment p_tens", PointPair, "Select attachment.", ,  )
    *Attachment( p_frnt_lbj, "Attachment p_frnt_lbj", PointPair, "Select attachment.", ,  )
    *Attachment( p_rear_lbj, "Attachment p_rear_lbj", PointPair, "Select attachment.", ,  )
    *Attachment( p_avg_lbj, "Attachment p_avg_lbj", PointPair, "Select attachment.", ,  )
    *GraphicPair( g_frnt_con, "Front connect", CYLINDER, b_kn, p_frnt_lbj, POINT, p_avg_lbj, 10, g_frnt_con.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_rear_con, "Rear connect", CYLINDER, b_kn, p_rear_lbj, POINT, p_avg_lbj, 10, g_rear_con.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_ts_con, "Tension strut connect", CYLINDER, b_kn, p_tens, POINT, p_avg_lbj, 10, g_ts_con.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_kp_lwr, "Kingpin lower", CYLINDER, b_kn, p_avg_lbj, POINT, p_spalign, 8, g_kp_lwr.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_kp_upr, "Kingpin upper", CYLINDER, b_kn, p_spalign, POINT, p_strut_low, 8, g_kp_upr.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_spindle, "Spindle", CYLINDER, b_kn, p_wc, POINT, p_spalign, 10, g_spindle.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_sp_at_kp, "Spindle at kingpin", SPHERE, b_kn, p_spalign, 10, 3 )
    *GraphicPair( g_strut_mnt, "Strut mount", CYLINDER, b_kn, p_strut_low, POINT, p_strut_upp, 30, 30, 10, -10, CAPBOTH, 3 )
  *EndDefine()
  *DefineGraphic( gdef_tstrut_cup, body, point, align )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", PointPair, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", VectorPair, "Select attachment.", ,  )
    *GraphicPair( g_pin, "Pin", CYLINDER, body, point, VECTOR, align, 10, 10, 10, -32, CAPBEGIN, 3 )
    *GraphicPair( g_washer1, "Washer 1", CYLINDER, body, point, VECTOR, align, 22, 22, 2, -22, CAPBOTH, 3 )
    *GraphicPair( g_washer2, "Washer 2", CYLINDER, body, point, VECTOR, align, 22, 22, 2, 20, CAPBOTH, 3 )
  *EndDefine()
  *DefineGraphic( gdef_tstrut_bush, body, point, align )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", PointPair, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", VectorPair, "Select attachment.", ,  )
    *GraphicPair( g_tube, "Tube", CYLINDER, body, point, VECTOR, align, 20, 20, 40, -20, CAPNONE, 3 )
    *GraphicPair( g_cap1, "End cap 1", CYLINDER, body, point, VECTOR, align, 10, 20, 0.1, -20, CAPNONE, 3 )
    *GraphicPair( g_cap2, "End cap 2", CYLINDER, body, point, VECTOR, align, 20, 12, 0.1, 20, CAPNONE, 3 )
  *EndDefine()
  *DefineGraphic( gdef_tstrut_kn, body, point, align )
    *Attachment( body, "Attachment body", BodyPair, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", PointPair, "Select attachment.", ,  )
    *Attachment( align, "Attachment align", VectorPair, "Select attachment.", ,  )
    *GraphicPair( g_tube, "Tube", CYLINDER, body, point, VECTOR, align, 22, 22, 20, -10, CAPNONE, 3 )
    *GraphicPair( g_cap1, "End cap 1", CYLINDER, body, point, VECTOR, align, 22, 20, 0.1, -10, CAPNONE, 3 )
    *GraphicPair( g_cap2, "End cap 2", CYLINDER, body, point, VECTOR, align, 22, 20, 0.1, 10, CAPNONE, 3 )
  *EndDefine()
  *DefineSystem( sysdef_strut_inl_r, b_upper_att, b_lower_att, p_strut_rod_upr
           , p_strut_tube_lwr, p_spr_upr, p_spr_lwr )
    *Attachment( b_upper_att, "Strut upr att body", BodyPair, "Strut upper attaching body", ,  )
    *Attachment( b_lower_att, "Strut lwr att body", BodyPair, "Strut lower attaching body", ,  )
    *Attachment( p_strut_rod_upr, "Top of strut rod", PointPair, "Top of strut rod", ,  )
    *Attachment( p_strut_tube_lwr, "Bottom of strut tube", PointPair, "Bottom of strut tube", ,  )
    *Attachment( p_spr_upr, "Top of spring", PointPair, "Top of spring", ,  )
    *Attachment( p_spr_lwr, "Bottom of spring", PointPair, "Bottom of spring", ,  )
    *PointPair( p_strut_rod_cg, "Strut rod CG" )
    *PointPair( p_strut_rod_lwr, "Strut rod lwr" )
    *PointPair( p_strut_tube_cg, "Strut tube CG" )
    *PointPair( p_strut_tube_upr, "Strut tube upr" )
    *BodyPair( b_strut_rod, "Strut rod (upr strut)", p_strut_rod_cg, , , ,  )
    *BodyPair( b_strut_tube, "Strut tube (lwr strut)", p_strut_tube_cg, , , ,  )
    *MarkerPair( m_cspr, "Coil Spring Orientation", b_strut_tube, p_spr_lwr )
    *Output( o_disp_coilspring_left, "Left Coil Spring Displacement", DISP, SPRINGDAMPER, cspr.l, m_cspr.l, BOTH_MARKERS )
    *Output( o_disp_coilspring_right, "Right Coil Spring Displacement", DISP, SPRINGDAMPER, cspr.r, m_cspr.r, BOTH_MARKERS )
    *Output( o_disp_shockstrut_left, "Left Shock Strut Displacement", DISP, JOINT, j_strut_lwr_inline.l, j_strut_lwr_inline.l.j, BOTH_MARKERS )
    *Output( o_disp_shockstrut_right, "Right Shock Strut Displacement", DISP, JOINT, j_strut_lwr_inline.r, j_strut_lwr_inline.r.j, BOTH_MARKERS )
    *FixedJointPair( j_strut_tube_lwr, "Strut tube bottom fixedjoint", b_strut_tube, b_lower_att, p_strut_tube_lwr )
    *InlineJointPair( j_strut_lwr_inline, "Lwr strut inline joint", b_strut_rod, b_strut_tube, p_strut_rod_lwr, ORIGIN, POINT, p_strut_tube_upr )
    *InlineJointPair( j_strut_upr_inline, "Upr strut inline joint", b_strut_tube, b_strut_rod, p_strut_tube_upr, ORIGIN, POINT, p_strut_rod_lwr )
    *UJointPair( bsh_strut_rod_upr, "Strut upr bush", b_strut_rod, b_upper_att, p_strut_rod_upr, SHAFT, POINT, p_strut_rod_lwr, CROSSPIN, VECTOR, Global_Frame.xaxis, ALLOW_COMPLIANCE )
    *if( bsh_strut_rod_upr.isbush == true )
      *Graphic( g_strut_rod1, "gra_strut_rod", gdef_strut_rod, b_strut_rod
               , p_strut_rod_upr, p_strut_rod_lwr )
      *Graphic( g_strut_bush, "gra_strut_bush", gdef_strut_bush, bsh_strut_rod_upr.b2
               , bsh_strut_rod_upr.i.origin, bsh_strut_rod_upr.i.zaxis )
    *else()
      *GraphicPair( Cylinder1, "Cylinder", CYLINDER, b_strut_rod, p_strut_rod_upr, POINT, p_strut_rod_lwr, 10, Cylinder1.r1, , 0.0, CAPNONE, 3 )
      *GraphicPair( g_strut_rod2, "gra_strut_rod", SPHERE, bsh_strut_rod_upr.b2, bsh_strut_rod_upr.i.origin, 25, 3 )
    *endif()
    *CoilSpringPair( cspr, "Coil spring", b_upper_att, b_strut_tube, p_spr_upr, p_spr_lwr )
    *CoilSpringPair( dmp, "Strut damper", b_strut_rod, b_strut_tube, p_strut_rod_upr, p_strut_tube_lwr )
    *System( ts_AutoDamper_rear, "AutoDamperPair-Rear", def_ma_damper_pair, b_strut_rod
             , b_strut_tube, p_strut_rod_upr, p_strut_tube_lwr )
    *Graphic( g_strut_tube, "gra_strut_tube", gdef_strut_tube, b_strut_tube
             , p_strut_tube_lwr, p_strut_tube_upr, p_spr_lwr, p_spr_upr )
    *GraphicPair( g_spring, "Coil spring", SPRING, cspr, cspr.p1, cspr.p2, 4, 60 )
    *GraphicPair( Cylinder2, "Cylinder", CYLINDER, b_upper_att, p_spr_upr, POINT, p_spr_lwr, 70, 70, 10, -10, CAPNONE, 3 )
    *GraphicPair( Cylinder3, "Cylinder", CYLINDER, b_upper_att, p_spr_upr, POINT, p_spr_lwr, 40, 40, 10, -10, CAPNONE, 3 )
    *GraphicPair( Cylinder4, "Cylinder", CYLINDER, b_upper_att, p_spr_upr, POINT, p_spr_lwr, 70, 40, 0.1, -10, CAPNONE, 3 )
    *DataSet( ds_strut, "Strut rod/tube lengths", dsdef_strut_r )
    *Form( frm_strut, "Strut rod/tube lengths", frmdef_strut_r, ds_strut )
    *SetEntityId( o_disp_coilspring_left,       40101010 )
    *Set( o_disp_coilspring_left.id2, 40101011 )
    *SetEntityId( o_disp_coilspring_right,       40101110 )
    *Set( o_disp_coilspring_right.id2, 40101111 )
    *SetEntityId( o_disp_shockstrut_left,       40101020 )
    *SetEntityId( o_disp_shockstrut_right,       40101120 )
    *SetReal( ds_strut.strut_len,         sqrt((p_strut_rod_upr.l.x-p_strut_tube_lwr.l.x)^2 +(p_strut_rod_upr.l.y-p_strut_tube_lwr.l.y)^2+(p_strut_rod_upr.l.z-p_strut_tube_lwr.l.z)^2) )
    *SetReal( ds_strut.strut_rod_len,       227.0 )
    *SetReal( ds_strut.strut_tube_len,       250.0 )
    *SetPoint( p_strut_rod_lwr,      LEFT, p_strut_rod_upr.l.x + (p_strut_tube_lwr.l.x-p_strut_rod_upr.l.x)/ds_strut.strut_len.value*ds_strut.strut_rod_len.value, p_strut_rod_upr.l.y + (p_strut_tube_lwr.l.y-p_strut_rod_upr.l.y)/ds_strut.strut_len.value*ds_strut.strut_rod_len.value, p_strut_rod_upr.l.z + (p_strut_tube_lwr.l.z-p_strut_rod_upr.l.z)/ds_strut.strut_len.value*ds_strut.strut_rod_len.value )
    *SetPoint( p_strut_tube_upr,     LEFT, p_strut_tube_lwr.l.x + (p_strut_rod_upr.l.x-p_strut_tube_lwr.l.x)/ds_strut.strut_len.value*ds_strut.strut_tube_len.value, p_strut_tube_lwr.l.y + (p_strut_rod_upr.l.y-p_strut_tube_lwr.l.y)/ds_strut.strut_len.value*ds_strut.strut_tube_len.value, p_strut_tube_lwr.l.z + (p_strut_rod_upr.l.z-p_strut_tube_lwr.l.z)/ds_strut.strut_len.value*ds_strut.strut_tube_len.value )
    *SetPoint( p_strut_rod_cg,       LEFT, p_strut_rod_upr.l.x / 2 + p_strut_rod_lwr.l.x / 2, p_strut_rod_upr.l.y / 2 + p_strut_rod_lwr.l.y / 2, p_strut_rod_upr.l.z / 2 + p_strut_rod_lwr.l.z / 2 )
    *SetPoint( p_strut_tube_cg,      LEFT, p_strut_tube_lwr.l.x / 2 + p_strut_tube_upr.l.x / 2, p_strut_tube_lwr.l.y / 2 + p_strut_tube_upr.l.y / 2, p_strut_tube_lwr.l.z / 2 + p_strut_tube_upr.l.z / 2 )
    *SetBodyInertia( b_strut_rod,          LEFT, 1.000e+000, 6.553e+002, 6.553e+002, 6.553e+002, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetBodyInertia( b_strut_tube,         LEFT, 1.000e+000, 6.553e+002, 6.553e+002, 6.553e+002, 0.000e+000, 0.000e+000, 0.000e+000 )
    *SetCoilSpring( cspr,                 LEFT, LIN, 30, LIN, 0, 2270, sqrt((p_spr_upr.l.x-p_spr_lwr.l.x)^2+(p_spr_upr.l.y-p_spr_lwr.l.y)^2+(p_spr_upr.l.z-p_spr_lwr.l.z)^2) )
    *SetCoilSpring( dmp,                  LEFT, LIN, 0, LIN, 1, 0, 0 )
    *SetBush( bsh_strut_rod_upr.bush, LEFT, LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI, LIN, 7853.981*180/PI, LIN, 1047.197551*180/PI, LIN, 78.53981*180/PI, LIN, 78.53981*180/PI, LIN, 10.47197551*180/PI, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
    *SetOrientation( bsh_strut_rod_upr.bush, LEFT, ONEAXIS, Z, POINT, p_strut_rod_lwr.l )
  *EndDefine()
  *DefineDataSet( dsdef_strut_r )
    *Real( strut_len, "Strut length", EDIT )
    *Real( strut_rod_len, "Strut rod length", EDIT )
    *Real( strut_tube_len, "Strut tube length", EDIT )
  *EndDefine()
  *DefineForm( frmdef_strut_r, ds )
    *SetRowsCols( 3, 2 )
    *Attachment( ds, "Attachment ds", DataSet, "Select attachment.", ,  )
    *ColumnWidth( 1, 30 )
    *ColumnLabel( 1, 2, "Rod/Tube Lengths" )
    *SetCell( 1, 1, ds.strut_len.label, "", LEFT, NO_EDIT )
    *SetCell( 1, 2, ds.strut_len.value, "%5.1f", RIGHT, NO_EDIT )
    *SetCell( 2, 1, ds.strut_rod_len.label, "", LEFT, NO_EDIT )
    *SetCell( 2, 2, ds.strut_rod_len.value, "%5.1f", RIGHT, EDIT )
    *SetCell( 3, 1, ds.strut_tube_len.label, "", LEFT, NO_EDIT )
    *SetCell( 3, 2, ds.strut_tube_len.value, "%5.1f", RIGHT, EDIT )
  *EndDefine()
  *DefineSystem( sysdef_r_jounce_bumper, b_bmp_attach, b_bmp_contact, p_rod
           , p_tube )
    *Attachment( b_bmp_attach, "Tube body", BodyPair, "Tube body (contact body)", ,  )
    *Attachment( b_bmp_contact, "Rod body", BodyPair, "Rod body (rubber attaching body)", ,  )
    *Attachment( p_rod, "Upper rod", PointPair, "Upper rod point", ,  )
    *Attachment( p_tube, "Lower tube", PointPair, "Lower tube point", ,  )
    *DataSet( ds_jnc_bmp, "Jounce bumper lengths", dsdef_r_jnc_bmp )
    *Form( frm_jnc_bmp, "Jounce bumper lengths", frmdef_r_jnc_bmp, ds_jnc_bmp )
    *if( SolverMode == "ADAMS"  || SolverMode == "MotionSolve" )
      *PointPair( p_bmp_tip, "Jounce bumper tip" )
      *PointPair( p_contact, "Jounce bumper contact" )
      *MarkerPair( mrk_frc, "Force direction reference", b_bmp_attach, p_rod )
      *MarkerPair( mrk_disp, "Displacement reference", b_bmp_contact, p_bmp_tip )
      *ActionReactionForcePair( frc_bmp, "jounce bumper", TRANS, b_bmp_attach, b_bmp_contact, p_contact, mrk_frc )
      *Curve( crv1, "jounce bumper 1", 2D, CARTESIAN, WRITE, CURVE_POINTS, OPEN )
      *Output( jounce_bumper_l_disp, "Left jounce bumper disp", DISP, p_contact.l, b_bmp_contact.l, p_bmp_tip.l, b_bmp_attach.l, mrk_disp.l, BOTH_MARKERS )
      *Output( jounce_bumper_r_disp, "Right jounce bumper disp", DISP, p_contact.r, b_bmp_contact.r, p_bmp_tip.r, b_bmp_attach.r, mrk_disp.r, BOTH_MARKERS )
      *Output( jnc_bmp_l_frc, "Left jounce bumper force", FORCE, FORCE, frc_bmp.l, mrk_frc.l, BOTH_MARKERS )
      *Output( jnc_bmp_r_frc, "Right jounce bumper force", FORCE, FORCE, frc_bmp.r, mrk_frc.r, BOTH_MARKERS )
      *GraphicPair( g_jnc_bmp, "jounce bumper", CYLINDER, b_bmp_contact, p_bmp_tip, POINT, p_rod, 15, 25, 50, 0, CAPBOTH, 3 )
      *GraphicPair( g_bmp_contact, "jounce bumper contact", CYLINDER, b_bmp_attach, p_contact, VECTOR, mrk_frc.zaxis, 30, 30, 5, 0, CAPBEGIN, 3 )
    *else()
      *PointPair( p_bmp_tip1, "Jounce bumper tip" )
      *PointPair( p_contact1, "Jounce bumper contact" )
      *MarkerPair( mrk_frc1, "Force direction reference", b_bmp_attach, p_rod )
      *BushPair( bsh_jounce_bumper, "jounce bumper", b_bmp_attach, b_bmp_contact, p_rod )
      *Curve( crv_jounce_bumper, "jounce bumper", 2D, CARTESIAN, WRITE, CURVE_POINTS, OPEN )
      *Output( jounce_bumper_l_disp1, "Left jounce bumper disp", DISP, p_contact1.l, b_bmp_contact.l, p_bmp_tip1.l, b_bmp_attach.l, mrk_frc1.l, BOTH_MARKERS )
      *Output( jounce_bumper_r_disp1, "Right jounce bumper disp", DISP, p_contact1.r, b_bmp_contact.r, p_bmp_tip1.r, b_bmp_attach.r, mrk_frc1.r, BOTH_MARKERS )
      *Output( o_jounce_bumper_l_force1, "Left jounce bumper force", FORCE, BUSHING, bsh_jounce_bumper.l, mrk_frc1.l, BOTH_MARKERS )
      *Output( o_jounce_bumper_r_force1, "Right jounce bumper force", FORCE, BUSHING, bsh_jounce_bumper.r, mrk_frc1.r, BOTH_MARKERS )
      *GraphicPair( g_jnc_bush_contact1, "jounce bush contact", CYLINDER, bsh_jounce_bumper.b1, p_bmp_tip1, VECTOR, mrk_frc1.zaxis, 18, 25, -50, 0, CAPBOTH, 3 )
      *GraphicPair( g_bmp_contact1, "jounce bumper contact", CYLINDER, b_bmp_contact, p_contact1, VECTOR, mrk_frc1.zaxis, 30, 30, 5, 0, CAPBOTH, 3 )
    *endif()
    *if( SolverMode == "ADAMS"  || SolverMode == "MotionSolve" )
      *SetEntityId( jounce_bumper_l_disp,       10104010 )
      *SetEntityId( jounce_bumper_r_disp,       10104110 )
      *SetEntityId( jnc_bmp_l_frc,              10104020 )
      *SetEntityId( jnc_bmp_r_frc,              10104120 )
      *SetPoint( p_bmp_tip,            LEFT, p_rod.l.x+(p_tube.l.x-p_rod.l.x)/ds_jnc_bmp.shock_len.value*ds_jnc_bmp.end_to_tip.value, p_rod.l.y+(p_tube.l.y-p_rod.l.y)/ds_jnc_bmp.shock_len.value*ds_jnc_bmp.end_to_tip.value, p_rod.l.z+(p_tube.l.z-p_rod.l.z)/ds_jnc_bmp.shock_len.value*ds_jnc_bmp.end_to_tip.value )
      *SetPoint( p_contact,            LEFT, p_rod.l.x+(p_tube.l.x-p_rod.l.x)/ds_jnc_bmp.shock_len.value*(ds_jnc_bmp.end_to_tip.value+ds_jnc_bmp.tip_to_cont.value), p_rod.l.y+(p_tube.l.y-p_rod.l.y)/ds_jnc_bmp.shock_len.value*(ds_jnc_bmp.end_to_tip.value+ds_jnc_bmp.tip_to_cont.value), p_rod.l.z+(p_tube.l.z-p_rod.l.z)/ds_jnc_bmp.shock_len.value*(ds_jnc_bmp.end_to_tip.value+ds_jnc_bmp.tip_to_cont.value) )
      *SetOrientation( mrk_frc,              LEFT, ONEAXIS, Z, POINT, p_contact.l )
      *SetOrientation( mrk_disp,             LEFT, ONEAXIS, Z, POINT, p_rod.l )
      *SetCurve( crv1,                       MATH, 0:32:1, MATH, crv1.x^3/4, LIN_EXTRAP )
      *SetForce( frc_bmp.l,                  LIN, 0, LIN, 0, CRV, crv1, AKIMA, `IF(DZ({frc_bmp.i.l.id,%d},{mrk_disp.l.id,%d},{mrk_disp.l.id,%d}):{cr()},0,0,DZ({frc_bmp.i.l.id,%d},{mrk_disp.l.id,%d},{mrk_disp.l.id,%d}))` )
      *SetForce( frc_bmp.r,                  LIN, 0, LIN, 0, CRV, crv1, AKIMA, `IF(DZ({frc_bmp.i.r.id,%d},{mrk_disp.r.id,%d},{mrk_disp.r.id,%d}):{cr()},0,0,DZ({frc_bmp.i.r.id,%d},{mrk_disp.r.id,%d},{mrk_disp.r.id,%d}))` )
      *SetReal( ds_jnc_bmp.end_to_tip,       77 )
      *SetReal( ds_jnc_bmp.tip_to_cont,       30 )
      *SetReal( ds_jnc_bmp.shock_len,       sqrt((p_rod.l.x-p_tube.l.x)^2+(p_rod.l.y-p_tube.l.y)^2+(p_rod.l.z-p_tube.l.z)^2) )
    *else()
      *SetEntityId( jounce_bumper_l_disp1,       10104010 )
      *SetEntityId( jounce_bumper_r_disp1,       10104110 )
      *SetEntityId( o_jounce_bumper_l_force1,       10104020 )
      *SetEntityId( o_jounce_bumper_r_force1,       10104120 )
      *SetPoint( p_bmp_tip1,           LEFT, p_rod.l.x+(p_tube.l.x-p_rod.l.x)/ds_jnc_bmp.shock_len.value*ds_jnc_bmp.end_to_tip.value, p_rod.l.y+(p_tube.l.y-p_rod.l.y)/ds_jnc_bmp.shock_len.value*ds_jnc_bmp.end_to_tip.value, p_rod.l.z+(p_tube.l.z-p_rod.l.z)/ds_jnc_bmp.shock_len.value*ds_jnc_bmp.end_to_tip.value )
      *SetPoint( p_contact1,           LEFT, p_rod.l.x+(p_tube.l.x-p_rod.l.x)/ds_jnc_bmp.shock_len.value*(ds_jnc_bmp.end_to_tip.value+ds_jnc_bmp.tip_to_cont.value), p_rod.l.y+(p_tube.l.y-p_rod.l.y)/ds_jnc_bmp.shock_len.value*(ds_jnc_bmp.end_to_tip.value+ds_jnc_bmp.tip_to_cont.value), p_rod.l.z+(p_tube.l.z-p_rod.l.z)/ds_jnc_bmp.shock_len.value*(ds_jnc_bmp.end_to_tip.value+ds_jnc_bmp.tip_to_cont.value) )
      *SetOrientation( mrk_frc1,             LEFT, ONEAXIS, Z, POINT, p_tube.l )
      *SetBush( bsh_jounce_bumper,        , LIN, 0, LIN, 0, CRV, crv_jounce_bumper, AKIMA, `{bsh_jounce_bumper.l.DZ}`, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, 0, 0, 0, 0, 0, 0
                                          , LIN, 0, LIN, 0, CRV, crv_jounce_bumper, AKIMA, `{bsh_jounce_bumper.r.DZ}`, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, 0, 0, 0, 0, 0, 0 )
      *SetOrientation( bsh_jounce_bumper.l,        ONEAXIS, Z, POINT, p_tube.l )
      *SetOrientation( bsh_jounce_bumper.r,        ONEAXIS, Z, POINT, p_tube.r )
      *SetCurve( crv_jounce_bumper,          FILE, { getenv("ALTAIR_HOME") + "/hw/mdl/mdllib/Libs/Models/Rear_bumpers/Jnc_int1/bumper_force.dat"}, "Unknown", "Block 1", "displacement", FILE, { getenv("ALTAIR_HOME") + "/hw/mdl/mdllib/Libs/Models/Rear_bumpers/Jnc_int1/bumper_force.dat"}, "Unknown", "Block 1", "bumper_force", LIN_EXTRAP )
      *SetCurveAttributes( crv_jounce_bumper,          1, 35, -1, 0 )
      *SetReal( ds_jnc_bmp.end_to_tip,       77 )
      *SetReal( ds_jnc_bmp.tip_to_cont,       35 )
      *SetReal( ds_jnc_bmp.shock_len,       sqrt((p_rod.l.x-p_tube.l.x)^2+(p_rod.l.y-p_tube.l.y)^2+(p_rod.l.z-p_tube.l.z)^2) )
  *endif()
  *EndDefine()
  *DefineDataSet( dsdef_r_jnc_bmp )
    *Real( end_to_tip, "Rod upper to bumper tip (mm)", EDIT )
    *Real( tip_to_cont, "Tip to contact dist. (mm) - clearence to be set manually in the curve x offset", EDIT )
    *Real( shock_len, "Shock length (mm)", EDIT )
  *EndDefine()
  *DefineForm( frmdef_r_jnc_bmp, ds )
    *SetRowsCols( 2, 2 )
    *Attachment( ds, "Attachment ds", DataSet, "Select attachment.", ,  )
    *ColumnWidth( 1, 30 )
    *ColumnLabel( 1, 2, THIS.label )
    *SetCell( 1, 1, ds.end_to_tip.label, "", LEFT, NO_EDIT )
    *SetCell( 1, 2, ds.end_to_tip.value, "%5.1f", RIGHT, EDIT )
    *SetCell( 2, 1, ds.tip_to_cont.label, "", LEFT, NO_EDIT )
    *SetCell( 2, 2, ds.tip_to_cont.value, "%5.1f", RIGHT, EDIT )
  *EndDefine()
  *DefineSystem( sysdef_r_rebound_bumper, b_bmp_contact, b_bmp_attach, p_rod
           , p_tube )
    *Attachment( b_bmp_contact, "Tube body", BodyPair, "Tube body (rubber attaching body)", ,  )
    *Attachment( b_bmp_attach, "Rod body", BodyPair, "Rod body (contact body)", ,  )
    *Attachment( p_rod, "Upper rod", PointPair, "Upper rod point", ,  )
    *Attachment( p_tube, "Lower tube", PointPair, "Lower tube point", ,  )
    *DataSet( ds_reb_bmp, "Rebound bumper lengths", dsdef_r_reb_bmp )
    *Form( frm_reb_bmp, "Rebound bumper lengths", frmdef_r_reb_bmp, ds_reb_bmp )
    *if( SolverMode == "ADAMS"  || SolverMode == "MotionSolve" )
      *PointPair( p_bmp_tip, "Rebound bumper tip" )
      *PointPair( p_contact, "Rebound bumper contact" )
      *MarkerPair( mrk_frc, "Force direction reference", b_bmp_attach, p_rod )
      *MarkerPair( mrk_disp, "Displacement reference", b_bmp_contact, p_bmp_tip )
      *ActionReactionForcePair( frc_bmp, "rebound bumper", TRANS, b_bmp_attach, b_bmp_contact, p_contact, mrk_frc )
      *Curve( crv1, "rebound bumper 1", 2D, CARTESIAN, WRITE, CURVE_POINTS, OPEN )
      *Output( rebound_bumper_l_disp, "Left rebound bumper disp", DISP, p_contact.l, b_bmp_contact.l, p_bmp_tip.l, b_bmp_attach.l, mrk_disp.l, BOTH_MARKERS )
      *Output( rebound_bumper_r_disp, "Right rebound bumper disp", DISP, p_contact.r, b_bmp_contact.r, p_bmp_tip.r, b_bmp_attach.r, mrk_disp.r, BOTH_MARKERS )
      *Output( reb_bmp_l_frc, "Left rebound bumper force", FORCE, FORCE, frc_bmp.l, mrk_frc.l, BOTH_MARKERS )
      *Output( reb_bmp_r_frc, "Right rebound bumper force", FORCE, FORCE, frc_bmp.r, mrk_frc.r, BOTH_MARKERS )
      *GraphicPair( g_reb_bmp, "rebound bumper", CYLINDER, b_bmp_contact, p_bmp_tip, POINT, p_rod, 20, 24, 20, 0, CAPBOTH, 3 )
      *GraphicPair( g_bmp_contact, "rebound bumper contact", CYLINDER, b_bmp_attach, p_contact, VECTOR, mrk_frc.zaxis, 24, 24, 5, 0, CAPBEGIN, 3 )
    *else()
      *PointPair( p_bmp_tip1, "Rebound bumper tip" )
      *PointPair( p_contact1, "Rebound bumper contact" )
      *MarkerPair( mrk_frc1, "Force direction reference", b_bmp_attach, p_tube )
      *BushPair( bsh_rebound_bumper, "rebound bumper", b_bmp_attach, b_bmp_contact, p_tube )
      *Curve( crv_rebound_bumper, "rebound bumper", 2D, CARTESIAN, WRITE, CURVE_POINTS, OPEN )
      *Output( rebound_bumper_l_disp1, "Left rebound bumper disp", DISP, p_contact1.l, b_bmp_contact.l, p_bmp_tip1.l, b_bmp_attach.l, mrk_frc1.l, BOTH_MARKERS )
      *Output( rebound_bumper_r_disp1, "Right rebound bumper disp", DISP, p_contact1.r, b_bmp_contact.r, p_bmp_tip1.r, b_bmp_attach.r, mrk_frc1.r, BOTH_MARKERS )
      *Output( o_rebound_bumper_l_force1, "Left rebound bumper force", FORCE, BUSHING, bsh_rebound_bumper.l, mrk_frc1.l, BOTH_MARKERS )
      *Output( o_rebound_bumper_r_force1, "Right rebound bumper force", FORCE, BUSHING, bsh_rebound_bumper.r, mrk_frc1.r, BOTH_MARKERS )
      *GraphicPair( g_reb_bush_contact1, "rebound bush contact", CYLINDER, bsh_rebound_bumper.b1, p_contact1, VECTOR, mrk_frc1.zaxis, 18, 24, -30, 0, CAPBOTH, 3 )
      *GraphicPair( g_reb_bmp111, "rebound bumper", CYLINDER, b_bmp_contact, p_bmp_tip1, POINT, p_rod, 24, 24, 5, 0, CAPBOTH, 3 )
    *endif()
    *if( SolverMode == "ADAMS"  || SolverMode == "MotionSolve" )
      *SetEntityId( rebound_bumper_l_disp,       10107010 )
      *SetEntityId( rebound_bumper_r_disp,       10107110 )
      *SetEntityId( reb_bmp_l_frc,              10107020 )
      *SetEntityId( reb_bmp_r_frc,              10107120 )
      *SetPoint( p_bmp_tip,            LEFT, p_tube.l.x+(p_rod.l.x-p_tube.l.x)/ds_reb_bmp.shock_len.value*ds_reb_bmp.end_to_tip.value, p_tube.l.y+(p_rod.l.y-p_tube.l.y)/ds_reb_bmp.shock_len.value*ds_reb_bmp.end_to_tip.value, p_tube.l.z+(p_rod.l.z-p_tube.l.z)/ds_reb_bmp.shock_len.value*ds_reb_bmp.end_to_tip.value )
      *SetPoint( p_contact,            LEFT, p_tube.l.x+(p_rod.l.x-p_tube.l.x)/ds_reb_bmp.shock_len.value*(ds_reb_bmp.end_to_tip.value-ds_reb_bmp.tip_to_cont.value), p_tube.l.y+(p_rod.l.y-p_tube.l.y)/ds_reb_bmp.shock_len.value*(ds_reb_bmp.end_to_tip.value-ds_reb_bmp.tip_to_cont.value), p_tube.l.z+(p_rod.l.z-p_tube.l.z)/ds_reb_bmp.shock_len.value*(ds_reb_bmp.end_to_tip.value-ds_reb_bmp.tip_to_cont.value) )
      *SetOrientation( mrk_frc,              LEFT, ONEAXIS, Z, POINT, p_contact.l )
      *SetOrientation( mrk_disp,             LEFT, ONEAXIS, Z, POINT, p_rod.l )
      *SetCurve( crv1,                       MATH, 0:32:1, MATH, crv1.x^3/4, LIN_EXTRAP )
      *SetForce( frc_bmp.l,                  LIN, 0, LIN, 0, CRV, crv1, AKIMA, `IF(DZ({frc_bmp.i.l.id,%d},{mrk_disp.l.id,%d},{mrk_disp.l.id,%d}):{cr()},0,0,DZ({frc_bmp.i.l.id,%d},{mrk_disp.l.id,%d},{mrk_disp.l.id,%d}))` )
      *SetForce( frc_bmp.r,                  LIN, 0, LIN, 0, CRV, crv1, AKIMA, `IF(DZ({frc_bmp.i.r.id,%d},{mrk_disp.r.id,%d},{mrk_disp.r.id,%d}):{cr()},0,0,DZ({frc_bmp.i.r.id,%d},{mrk_disp.r.id,%d},{mrk_disp.r.id,%d}))` )
      *SetReal( ds_reb_bmp.end_to_tip,       125 )
      *SetReal( ds_reb_bmp.tip_to_cont,       35 )
      *SetReal( ds_reb_bmp.shock_len,       sqrt((p_rod.l.x-p_tube.l.x)^2+(p_rod.l.y-p_tube.l.y)^2+(p_rod.l.z-p_tube.l.z)^2) )
    *else()
      *SetEntityId( rebound_bumper_l_disp1,       10107010 )
      *SetEntityId( rebound_bumper_r_disp1,       10107110 )
      *SetEntityId( o_rebound_bumper_l_force1,       10107020 )
      *SetEntityId( o_rebound_bumper_r_force1,       10107120 )
      *SetPoint( p_bmp_tip1,           LEFT, p_tube.l.x+(p_rod.l.x-p_tube.l.x)/ds_reb_bmp.shock_len.value*ds_reb_bmp.end_to_tip.value, p_tube.l.y+(p_rod.l.y-p_tube.l.y)/ds_reb_bmp.shock_len.value*ds_reb_bmp.end_to_tip.value, p_tube.l.z+(p_rod.l.z-p_tube.l.z)/ds_reb_bmp.shock_len.value*ds_reb_bmp.end_to_tip.value )
      *SetPoint( p_contact1,           LEFT, p_tube.l.x+(p_rod.l.x-p_tube.l.x)/ds_reb_bmp.shock_len.value*(ds_reb_bmp.end_to_tip.value-ds_reb_bmp.tip_to_cont.value), p_tube.l.y+(p_rod.l.y-p_tube.l.y)/ds_reb_bmp.shock_len.value*(ds_reb_bmp.end_to_tip.value-ds_reb_bmp.tip_to_cont.value), p_tube.l.z+(p_rod.l.z-p_tube.l.z)/ds_reb_bmp.shock_len.value*(ds_reb_bmp.end_to_tip.value-ds_reb_bmp.tip_to_cont.value) )
      *SetOrientation( mrk_frc1,             LEFT, ONEAXIS, Z, POINT, p_rod.l )
      *SetBush( bsh_rebound_bumper,       , LIN, 0, LIN, 0, CRV, crv_rebound_bumper, AKIMA, `{bsh_rebound_bumper.l.DZ}`, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, 0, 0, 0, 0, 0, 0
                                          , LIN, 0, LIN, 0, CRV, crv_rebound_bumper, AKIMA, `{bsh_rebound_bumper.r.DZ}`, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, LIN, 0, 0, 0, 0, 0, 0, 0 )
      *SetOrientation( bsh_rebound_bumper.l,       ONEAXIS, Z, POINT, p_rod.l )
      *SetOrientation( bsh_rebound_bumper.r,       ONEAXIS, Z, POINT, p_rod.r )
      *SetCurve( crv_rebound_bumper,         FILE, { getenv("ALTAIR_HOME") + "/hw/mdl/mdllib/Libs/Models/Rear_bumpers/Reb_int1/bumper_force.dat"}, "Unknown", "Block 1", "displacement", FILE, { getenv("ALTAIR_HOME") + "/hw/mdl/mdllib/Libs/Models/Rear_bumpers/Reb_int1/bumper_force.dat"}, "Unknown", "Block 1", "bumper_force", LIN_EXTRAP )
      *SetCurveAttributes( crv_rebound_bumper,         1, 35, -1, 0 )
      *SetReal( ds_reb_bmp.end_to_tip,       155 )
      *SetReal( ds_reb_bmp.tip_to_cont,       35 )
      *SetReal( ds_reb_bmp.shock_len,       sqrt((p_rod.l.x-p_tube.l.x)^2+(p_rod.l.y-p_tube.l.y)^2+(p_rod.l.z-p_tube.l.z)^2) )
  *endif()
  *EndDefine()
  *DefineDataSet( dsdef_r_reb_bmp )
    *Real( end_to_tip, "Tube lower to bumper tip (mm)", EDIT )
    *Real( tip_to_cont, "Tip to contact dist. (mm) - clearence to be set manually in the curve x offset", EDIT )
    *Real( shock_len, "Shock length (mm)", EDIT )
  *EndDefine()
  *DefineForm( frmdef_r_reb_bmp, ds )
    *SetRowsCols( 2, 2 )
    *Attachment( ds, "Attachment ds", DataSet, "Select attachment.", ,  )
    *ColumnWidth( 1, 30 )
    *ColumnLabel( 1, 2, THIS.label )
    *SetCell( 1, 1, ds.end_to_tip.label, "", LEFT, NO_EDIT )
    *SetCell( 1, 2, ds.end_to_tip.value, "%5.1f", RIGHT, EDIT )
    *SetCell( 2, 1, ds.tip_to_cont.label, "", LEFT, NO_EDIT )
    *SetCell( 2, 2, ds.tip_to_cont.value, "%5.1f", RIGHT, EDIT )
  *EndDefine()
  *DefineSystem( sysdef_pwrtrain, b_body, b_diff, p_cg_location )
    *Attachment( b_body, "Powertrain mount body", Body, "Body to which powertrain is mounted", sys_body.b_body, vehicle_body )
    *Attachment( b_diff, "Differential Body", Body, "Select attachment.", sys_driveline.b_diff, b_diff )
    *Attachment( p_cg_location, "Vehicle CG Location", Point, "Location of Vehicle Body CG", sys_body.p_body_cg, cg_location )
    *Point( p_engtrans_cg, "Engine/Transmission CG" )
    *Point( p_engmnt_1, "Engine Mount #1" )
    *Point( p_engmnt_2, "Engine Mount #2" )
    *Point( p_engmnt_3, "Engine Mount #3" )
    *Point( p_engmnt_1_ax, "Eng. Mnt. #1 Align." )
    *Point( p_engmnt_2_ax, "Eng. Mnt. #2 Align." )
    *Point( p_engmnt_3_ax, "Eng. Mnt. #3 Align." )
    *Curve( crv_gear_ratio, "Gear Ratios", 2D, CARTESIAN, WRITE, CURVE_POINTS, OPEN )
    *SolverVariable( sv_throttle_output, "Driver Throttle Output" )
    *SolverVariable( sv_driver_gear_output, "Dummy Driver Gear Output" )
    *SolverVariable( sv_clutch_output, "Dummy Driver Clutch Output" )
    *SolverVariable( sv_torque_output, "Drive Torque" )
    *SolverVariable( sv_engine_speed, "Dummy Engine Speed" )
    *AttachmentCandidate( cand_7, "Attachment Candidate 5", sv_engine_speed )
    *AttachmentCandidate( cand_1, "Attachment Candidate 1", sv_throttle_output )
    *AttachmentCandidate( cand_5, "Attachment Candidate 1", sv_driver_gear_output )
    *AttachmentCandidate( cand_6, "Attachment Candidate 1", sv_clutch_output )
    *AttachmentCandidate( cand_3, "Attachment Candidate 2", b_pwrtrain )
    *AttachmentCandidate( cand_4, "Attachment Candidate 2", b_pwrtrain )
    *AttachmentCandidate( cand_gr, "Gear Ratio", crv_gear_ratio )
    *ActionReactionForce( frc_drive_torque, "Differential Torque", ROT, b_diff, b_pwrtrain, b_diff.cg, b_diff.cm )
    *SolverArray( sa_powertrain, "Powertrain Array", IC )
    *SolverArray( sa_powertrain_type, "Powertrain Type", IC )
    *SolverString( st_engine_map, "Engine Map String" )
    *Output( o_throttle_torque, "Engine torque - F2 | Throttle - F3", EXPR, `VARVAL({sv_torque_output.idstring})`, `VARVAL({sv_throttle_output.idstring})`, `0`, `0`, `0`, `0` )
    *Body( b_pwrtrain, "Engine/Trans", p_engtrans_cg, , , ,  )
    *if( Op_Compliant.value == "Yes" )
      *Bush( bsh_engmnt_1, "Engine Mount #1", b_pwrtrain, b_body, p_engmnt_1 )
      *Bush( bsh_engmnt_2, "Engine Mount #2", b_pwrtrain, b_body, p_engmnt_2 )
      *Bush( bsh_engmnt_3, "Engine Mount #3", b_pwrtrain, b_body, p_engmnt_3 )
      *Graphic( g_mount1_eng, "Mount 1 at engine", gdef_bush_cant1, b_pwrtrain
               , p_engmnt_1, p_engmnt_1_ax )
      *Graphic( g_mount1_att, "Mount 1 at att", gdef_bush_cant2, bsh_engmnt_1.b2
               , p_engmnt_1, p_engmnt_1_ax )
      *Graphic( g_mount2_eng, "Mount 2 at engine", gdef_bush_cant1, b_pwrtrain
               , p_engmnt_2, p_engmnt_2_ax )
      *Graphic( g_mount2_att, "Mount 2 at att", gdef_bush_cant2, bsh_engmnt_2.b2
               , p_engmnt_2, p_engmnt_2_ax )
      *Graphic( g_mount3_eng, "Mount 3 at engine", gdef_bush_cant1, b_pwrtrain
               , p_engmnt_3, p_engmnt_3_ax )
      *Graphic( g_mount3_att, "Mount 3 at att", gdef_bush_cant2, bsh_engmnt_3.b2
               , p_engmnt_3, p_engmnt_3_ax )
    *else()
      *FixedJoint( j_engmount, "Engine Fixed Joint", b_pwrtrain, b_body, p_engmnt_1 )
    *endif()
    *Graphic( gra_eng_trans, "Engine trans. mounted", FILE, b_pwrtrain, { getenv("ALTAIR_HOME") + "/hw/mdl/mdllib/Libs/Models/Toolkit/Powertrain/Trans_pwr.h3d"}, {}, MARKER, b_pwrtrain.cm, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0 )
    *DataSet( ds_powertrain_dat, "Powertrain Data (engine, clutch)", def_ds_powertrain_dat )
    *SetAttachmentCandidateTag( cand_7,                     sv_engine_omega )
    *SetAttachmentCandidateTag( cand_1,                     driver_throttle_output )
    *SetAttachmentCandidateTag( cand_5,                     driver_gear_output )
    *SetAttachmentCandidateTag( cand_6,                     driver_clutch_output )
    *SetAttachmentCandidateTag( cand_3,                     b_engine )
    *SetAttachmentCandidateTag( cand_4,                     b_clutch )
    *SetAttachmentCandidateTag( cand_gr,                    crv_gear_ratio )
    *SetForce( frc_drive_torque,           LIN, , LIN, , EXPR, `-1*VARVAL({sv_torque_output.idstring})` )
    *SetCurve( crv_gear_ratio,             VALUE, 2
, 0, 1, VALUE, 2
, 0, 1 )
    *SetSolverArray( sa_powertrain,              VALUE, 6
, 0, ds_powertrain_dat.max_torque.value, ds_powertrain_dat.min_torque.value, ds_powertrain_dat.throttle_scaling.value, 0, 0 )
    *SetSolverArray( sa_powertrain_type,         VALUE, 1
, 03 )
    *SetPoint( p_engtrans_cg,              1000, 0, 1210 )
    *SetPoint( p_engmnt_1,                 781, -450, 1135 )
    *SetPoint( p_engmnt_2,                 1381, -450, 1135 )
    *SetPoint( p_engmnt_3,                 1081, 450, 1135 )
    *SetPoint( p_engmnt_1_ax,              p_engmnt_1.x+60, p_engmnt_1.y, 100 + p_engmnt_1.z )
    *SetPoint( p_engmnt_2_ax,              p_engmnt_2.x-60, p_engmnt_2.y, 100 + p_engmnt_2.z )
    *SetPoint( p_engmnt_3_ax,              p_engmnt_3.x, p_engmnt_3.y, 100 + p_engmnt_3.z )
    *SetBodyInertia( b_pwrtrain,                 200, 5.000e+06, 5.000e+06, 5.000e+06, 0.000e+00, 0.000e+00, 0.000e+00 )
    *if( Op_Compliant.value == "Yes" )
      *SetBush( bsh_engmnt_1,               LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI/100, LIN, 7853.981*180/PI/100, LIN, 1047.197551*180/PI/100, LIN, 78.53981*180/PI/10, LIN, 78.53981*180/PI/10, LIN, 10.47197551*180/PI/10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
      *SetOrientation( bsh_engmnt_1,               ONEAXIS, Z, POINT, p_engmnt_1_ax )
      *SetBush( bsh_engmnt_2,               LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI/100, LIN, 7853.981*180/PI/100, LIN, 1047.197551*180/PI/100, LIN, 78.53981*180/PI/10, LIN, 78.53981*180/PI/10, LIN, 10.47197551*180/PI/10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
      *SetOrientation( bsh_engmnt_2,               ONEAXIS, Z, POINT, p_engmnt_2_ax )
      *SetBush( bsh_engmnt_3,               LIN, 6000, LIN, 6000, LIN, 1000, LIN, 60, LIN, 60, LIN, 10, LIN, 7853.981*180/PI/100, LIN, 7853.981*180/PI/100, LIN, 1047.197551*180/PI/100, LIN, 78.53981*180/PI/10, LIN, 78.53981*180/PI/10, LIN, 10.47197551*180/PI/10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
      *SetOrientation( bsh_engmnt_3,               ONEAXIS, Z, POINT, p_engmnt_3_ax )
    *endif()
    *SetPoint( p_cg_location,              2350 )
    *SetReal( ds_powertrain_dat.throttle_scaling,       1.0 )
    *SetReal( ds_powertrain_dat.max_torque,       1000000*1.1 )
    *SetReal( ds_powertrain_dat.min_torque,       -500 )
    *SetReal( ds_powertrain_dat.trans_efficiency,       .99 )
    *SetSolverVariable( sv_torque_output,           USER, `USER(1,{sa_powertrain.idstring},{sv_throttle_output.idstring})`, OFF )
    *SetLocalUserDLLFlag( sv_torque_output,           true )
    *SetLocalUserFunction( sv_torque_output,           "msautoutils", , "VIRTUAL_POWERTRAIN" )
  *EndDefine()
  *DefineGraphic( gdef_bush_cant1, body, point, alignment )
    *Attachment( body, "Attachment body", Body, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", Point, "Select attachment.", ,  )
    *Attachment( alignment, "Attachment alignment", Point, "Select attachment.", ,  )
    *Graphic( g_rub_cent, "Center rubber", CYLINDER, body, point, POINT, alignment, 37.5, 37.5, 10, 0, CAPBEGIN, 3 )
    *Graphic( g_rub_end, "End rubber", CYLINDER, body, point, POINT, alignment, 37.5, 20.0, 25, 10, CAPNONE, 3 )
    *Graphic( g_mnt_plate, "Mounting plate", CYLINDER, body, point, POINT, alignment, 0.0, 50.0, 1, 35, CAPNONE, 3 )
    *Graphic( g_pin, "Pin", CYLINDER, body, point, POINT, alignment, 10.0, 10.0, 10, 35, CAPEND, 3 )
  *EndDefine()
  *DefineGraphic( gdef_bush_cant2, body, point, alignment )
    *Attachment( body, "Attachment body", Body, "Select attachment.", ,  )
    *Attachment( point, "Attachment point", Point, "Select attachment.", ,  )
    *Attachment( alignment, "Attachment alignment", Point, "Select attachment.", ,  )
    *Graphic( g_rub_cent, "Center rubber", CYLINDER, body, point, POINT, alignment, 37.5, 37.5, 10, -10, CAPEND, 3 )
    *Graphic( g_rub_end, "End rubber", CYLINDER, body, point, POINT, alignment, 20.0, 37.5, 25, -35, CAPNONE, 3 )
    *Graphic( g_mnt_plate, "Mounting plate", CYLINDER, body, point, POINT, alignment, 50.0, 0.0, 1, -36, CAPNONE, 3 )
    *Graphic( g_pin, "Pin", CYLINDER, body, point, POINT, alignment, 10.0, 10.0, 10, -45, CAPBEGIN, 3 )
  *EndDefine()
  *DefineDataSet( def_ds_powertrain_dat )
    *Real( throttle_scaling, "Throttle Scaling", EDIT )
    *Real( max_torque, "Max Powertrain Torque", EDIT )
    *Real( min_torque, "Min Powertrain Torque", EDIT )
    *Real( trans_efficiency, "Transmission Efficiency", EDIT )
  *EndDefine()
  *DefinitionInclude( "hwmv://autoent/definitions_mdl/sysDefTirePair.mdl" )
  *DefineSystem( sysdef_tires, p_f_wc, p_r_wc, p_f_spal
           , p_r_spal, b_f_wheel, b_r_wheel )
    *Attachment( p_f_wc, "Front Wheel Center", PointPair, "Front wheel center point", ,  )
    *Attachment( p_r_wc, "Rear  Wheel Center", PointPair, "Rear  wheel center point", ,  )
    *Attachment( p_f_spal, "Front Spindle align", PointPair, "Front Spindle alignment point", ,  )
    *Attachment( p_r_spal, "Rear  Spindle align", PointPair, "Rear  Spindle alignment point", ,  )
    *Attachment( b_f_wheel, "Front Wheel", BodyPair, "Front Wheel Body", ,  )
    *Attachment( b_r_wheel, "Rear  Wheel", BodyPair, "Rear  Wheel Body", ,  )
    *VectorPair( v_f_sp, "Front Spindle" )
    *VectorPair( v_r_sp, "Rear  Spindle" )
    *DataSet( ds_tire_dat, "Tire Data", dsdef_tire_dat )
    *if( SolverMode == "MotionSolve" )
      *Form( frm_ms_tire_dat, " Tire Data", frmdef_ms_tire_dat, ds_tire_dat )
    *elseif( SolverMode == "ADAMS" )
      *Form( frm_adm_tire_dat, " Tire Data", frmdef_adm_tire_dat, ds_tire_dat )
    *endif()
    *if( SolverMode == "MotionSolve" )
      *Template( tpl_tires_xml, "Grasub for Ftire/HTire", SOLVER_INPUT, tpldef_grasub, gf_tire_frc_frnt_ms.i
               , gf_tire_frc_rear_ms.i, gf_tire_frc_frnt_ms, gf_tire_frc_rear_ms )
    *endif()
    *PointPair( p_ground_reference_frnt, "Front Ground RM Marker" )
    *MarkerPair( m_road_ref_frnt, "Road Reference Marker Front", MODEL.B_Ground, p_ground_reference_frnt )
    *MarkerPair( m_tire_frc_frnt, "Front Tire Force Reference", b_f_wheel, p_f_wc )
    *MarkerPair( m_tire_j_frnt, "Front Tire J Marker", MODEL.B_Ground, p_f_wc, FLOATING )
    *PointPair( p_ground_reference_rear, "Rear Ground RM Marker" )
    *MarkerPair( m_road_ref_rear, "Road Reference Marker Rear", MODEL.B_Ground, p_ground_reference_rear )
    *MarkerPair( m_tire_frc_rear, "Rear Tire Force Reference", b_r_wheel, p_r_wc )
    *MarkerPair( m_tire_j_rear, "Rear Tire J Marker", MODEL.B_Ground, p_r_wc, FLOATING )
    *SolverString( st_tpf_left_frnt, "Front left tire property file string" )
    *SolverString( st_tpf_right_frnt, "Front right tire property file string" )
    *SolverString( st_tpf_left_rear, "Rear left tire property file string" )
    *SolverString( st_tpf_right_rear, "Rear right tire property file string" )
    *SolverString( st_rpf_left_frnt, "Front left road property file string" )
    *SolverString( st_rpf_right_frnt, "Front right road property file string" )
    *SolverString( st_rpf_left_rear, "Rear left road property file string" )
    *SolverString( st_rpf_right_rear, "Rear right road property file string" )
    *SolverString( st_role_frnt, "Front minor role string" )
    *SolverString( st_role_rear, "Rear minor role string" )
    *SolverString( st_simulation, "simulation type string" )
    *SolverString( st_contact, "contact type string" )
    *SolverArray( sa_event_flag, "Event Flag", IC )
    *if( SolverMode == "MotionSolve" )
      *SolverArray( ar_front_lt_ms, "Front tire input array left", IC )
      *SolverArray( ar_front_rt_ms, "Front tire input array right", IC )
      *SolverArray( ar_rear_lt_ms, "Rear tire input array left", IC )
      *SolverArray( ar_rear_rt_ms, "Rear tire input array right", IC )
    *elseif( SolverMode == "ADAMS" )
      *SolverArray( ar_front_lt_adm, "Front tire input array left", IC )
      *SolverArray( ar_front_rt_adm, "Front right tire input array", IC )
      *SolverArray( ar_rear_lt_adm, "Rear tire input array left", IC )
      *SolverArray( ar_rear_rt_adm, "Rear right tire input array", IC )
      *SolverDiffEquation( diff_front_left_1, "Front Left Tire - Diff 1" )
      *SolverDiffEquation( diff_front_left_2, "Front Left Tire - Diff 2" )
      *SolverDiffEquation( diff_front_right_1, "Front Right Tire - Diff 1" )
      *SolverDiffEquation( diff_front_right_2, "Front Right Tire - Diff 2" )
      *SolverDiffEquation( diff_rear_left_1, "Rear Left Tire - Diff 1" )
      *SolverDiffEquation( diff_rear_left_2, "Rear Left Tire - Diff 2" )
      *SolverDiffEquation( diff_rear_right_1, "Rear Right Tire - Diff 1" )
      *SolverDiffEquation( diff_rear_right_2, "Rear Right Tire - Diff 2" )
    *endif()
    *if( SolverMode == "MotionSolve" )
      *SolverString( ss_frc_frnt, "Force Variable - Front" )
      *SolverString( ss_frc_rear, "Force Variable - Rear" )
      *ActionReactionForcePair( gf_tire_frc_frnt_ms, "Front tire force", TRANS_ROT, MARKERS, m_tire_frc_frnt, m_tire_j_frnt, m_road_ref_frnt )
      *ActionReactionForcePair( gf_tire_frc_rear_ms, "Rear tire force", TRANS_ROT, MARKERS, m_tire_frc_rear, m_tire_j_rear, m_road_ref_rear )
      *if( sa_event_flag.ic_value[0] == 1 )
        *MarkerPair( m_road_ref_frnt_knc, "Road Reference Marker Front On Jack", ana_fullveh_knc.b_jck_frt, ana_fullveh_knc.p_frt_tir_patch )
        *MarkerPair( m_road_ref_rear_knc, "Road Reference Marker Rear On Jack", ana_fullveh_knc.b_jck_rr, ana_fullveh_knc.p_rr_tir_patch )
        *ActionReactionForcePair( gf_tire_frc_frnt_ms_knc, "Front tire force - KnC", TRANS_ROT, MARKERS, m_tire_frc_frnt, m_tire_j_frnt, m_road_ref_frnt_knc )
        *ActionReactionForcePair( gf_tire_frc_rear_ms_knc, "Rear tire force - KnC", TRANS_ROT, MARKERS, m_tire_frc_rear, m_tire_j_rear, m_road_ref_rear_knc )
      *endif()
    *elseif( SolverMode == "ADAMS" )
      *ActionReactionForcePair( gf_tire_frc_frnt_adm, "Front tire force", TRANS_ROT, MARKERS, m_tire_frc_frnt, m_tire_j_frnt, m_road_ref_frnt )
      *ActionReactionForcePair( gf_tire_frc_rear_adm, "Rear tire force", TRANS_ROT, MARKERS, m_tire_frc_rear, m_tire_j_rear, m_road_ref_rear )
    *endif()
    *if( SolverMode == "MotionSolve" )
      *Output( o_ms_rolling_states_left_frnt, `Tire - Front Rad, OmegaActual, OmegaFree (left)`, USER, `USER(902,1,{eval({ss_frc_frnt.value}+".l.idstring")})` )
      *Output( o_ms_kinematics_left_frnt, `Tire - Front LonSlip, LatSlip, IncAngle (left)`, USER, `USER(902,2,{eval({ss_frc_frnt.value}+".l.idstring")})` )
      *Output( o_ms_cp_forces_left_frnt, `Tire - Front Tire CP Forces (W-Axis system) (left)`, USER, `USER(902,3,{eval({ss_frc_frnt.value}+".l.idstring")})` )
      *Output( o_ms_cp_forces_sae_left_frnt, `Tire - Front Tire CP Forces (SAE-Axis system) (left)`, USER, `USER(902,4,{eval({ss_frc_frnt.value}+".l.idstring")})` )
      *Output( o_ms_kinematics_sae_left_frnt, `Tire - Front LonSlip, LatSlip, IncAngle (left)`, USER, `USER(902,5,{eval({ss_frc_frnt.value}+".l.idstring")})` )
      *Output( o_ms_hub_forces_left_frnt, `Tire - Front Tire Hub Forces (C-Axis System) (left)`, USER, `USER(902,6,{eval({ss_frc_frnt.value}+".l.idstring")})` )
      *Output( o_ms_cp_location_left_frnt, `Tire - Front Contact Patch Location (left)`, USER, `USER(902,10,{eval({ss_frc_frnt.value}+".l.idstring")})` )
      *Output( o_ms_hub_velocity_left_frnt, `Tire - Front Hub Velocity (left)`, USER, `USER(902,11,{eval({ss_frc_frnt.value}+".l.idstring")})` )
      *Output( o_ms_rolling_states_right_frnt, `Tire - Front Rad, OmegaActual, OmegaFree (right)`, USER, `USER(902,1,{eval({ss_frc_frnt.value}+".r.idstring")})` )
      *Output( o_ms_kinematics_right_frnt, `Tire - Front LonSlip, LatSlip, IncAngle (right)`, USER, `USER(902,2,{eval({ss_frc_frnt.value}+".r.idstring")})` )
      *Output( o_ms_cp_forces_right_frnt, `Tire - Front Tire CP Forces (W-Axis system) (right)`, USER, `USER(902,3,{eval({ss_frc_frnt.value}+".r.idstring")})` )
      *Output( o_ms_cp_forces_sae_right_frnt, `Tire - Front Tire CP Forces (SAE-Axis system) (right)`, USER, `USER(902,4,{eval({ss_frc_frnt.value}+".r.idstring")})` )
      *Output( o_ms_kinematics_sae_right_frnt, `Tire - Front LonSlip, LatSlip, IncAngle (right)`, USER, `USER(902,5,{eval({ss_frc_frnt.value}+".r.idstring")})` )
      *Output( o_ms_hub_forces_right_frnt, `Tire - Front Tire Hub Forces (C-Axis System) (right)`, USER, `USER(902,6,{eval({ss_frc_frnt.value}+".r.idstring")})` )
      *Output( o_ms_cp_location_right_frnt, `Tire - Front Contact Patch Location (right)`, USER, `USER(902,10,{eval({ss_frc_frnt.value}+".r.idstring")})` )
      *Output( o_ms_hub_velocity_right_frnt, `Tire - Front Hub Velocity (right)`, USER, `USER(902,11,{eval({ss_frc_frnt.value}+".r.idstring")})` )
      *Output( o_ms_rolling_states_left_rear, `Tire - Rear Rad, OmegaActual, OmegaFree (left)`, USER, `USER(902,1,{eval({ss_frc_rear.value}+".l.idstring")})` )
      *Output( o_ms_kinematics_left_rear, `Tire - Rear LonSlip, LatSlip, IncAngle (left)`, USER, `USER(902,2,{eval({ss_frc_rear.value}+".l.idstring")})` )
      *Output( o_ms_cp_forces_left_rear, `Tire - Rear Tire CP Forces (W-Axis system) (left)`, USER, `USER(902,3,{eval({ss_frc_rear.value}+".l.idstring")})` )
      *Output( o_ms_cp_forces_sae_left_rear, `Tire - Rear Tire CP Forces (SAE-Axis system) (left)`, USER, `USER(902,4,{eval({ss_frc_rear.value}+".l.idstring")})` )
      *Output( o_ms_kinematics_sae_left_rear, `Tire - Rear LonSlip, LatSlip, IncAngle (left)`, USER, `USER(902,5,{eval({ss_frc_rear.value}+".l.idstring")})` )
      *Output( o_ms_hub_forces_left_rear, `Tire - Rear Tire Hub Forces (C-Axis System) (left)`, USER, `USER(902,6,{eval({ss_frc_rear.value}+".l.idstring")})` )
      *Output( o_ms_cp_location_left_rear, `Tire - Rear Contact Patch Location (left)`, USER, `USER(902,10,{eval({ss_frc_rear.value}+".l.idstring")})` )
      *Output( o_ms_hub_velocity_left_rear, `Tire - Rear Hub Velocity (left)`, USER, `USER(902,11,{eval({ss_frc_rear.value}+".l.idstring")})` )
      *Output( o_ms_rolling_states_right_rear, `Tire - Rear Rad, OmegaActual, OmegaFree (right)`, USER, `USER(902,1,{eval({ss_frc_rear.value}+".r.idstring")})` )
      *Output( o_ms_kinematics_right_rear, `Tire - Rear LonSlip, LatSlip, IncAngle (right)`, USER, `USER(902,2,{eval({ss_frc_rear.value}+".r.idstring")})` )
      *Output( o_ms_cp_forces_right_rear, `Tire - Rear Tire CP Forces (W-Axis system) (right)`, USER, `USER(902,3,{eval({ss_frc_rear.value}+".r.idstring")})` )
      *Output( o_ms_cp_forces_sae_right_rear, `Tire - Rear Tire CP Forces (SAE-Axis system) (right)`, USER, `USER(902,4,{eval({ss_frc_rear.value}+".r.idstring")})` )
      *Output( o_ms_kinematics_sae_right_rear, `Tire - Rear LonSlip, LatSlip, IncAngle (right)`, USER, `USER(902,5,{eval({ss_frc_rear.value}+".r.idstring")})` )
      *Output( o_ms_hub_forces_right_rear, `Tire - Rear Tire Hub Forces (C-Axis System) (right)`, USER, `USER(902,6,{eval({ss_frc_rear.value}+".r.idstring")})` )
      *Output( o_ms_cp_location_right_rear, `Tire - Rear Contact Patch Location (right)`, USER, `USER(902,10,{eval({ss_frc_rear.value}+".r.idstring")})` )
      *Output( o_ms_hub_velocity_right_rear, `Tire - Rear Hub Velocity (right)`, USER, `USER(902,11,{eval({ss_frc_rear.value}+".r.idstring")})` )
    *elseif( SolverMode == "ADAMS" )
      *Output( o_adm_rolling_states_left_frnt, `Tire - Front Rad OmegaActual OmegaFree (left)`, USER, `USER(902,1,{gf_tire_frc_frnt_adm.l.idstring})` )
      *Output( o_adm_kinematics_left_frnt, `Tire - Front LonSlip LatSlip IncAngle (left)`, USER, `USER(902,2,{gf_tire_frc_frnt_adm.l.idstring})` )
      *Output( o_adm_cp_forces_left_frnt, `Tire - Front Tire CP Forces (W-Axis system) (left)`, USER, `USER(902,3,{gf_tire_frc_frnt_adm.l.idstring})` )
      *Output( o_adm_cp_forces_sae_left_frnt, `Tire - Front Tire CP Forces (SAE-Axis system) (left)`, USER, `USER(902,4,{gf_tire_frc_frnt_adm.l.idstring})` )
      *Output( o_adm_kinematics_sae_left_frnt, `Tire - Front LonSlip LatSlip IncAngle (left)`, USER, `USER(902,5,{gf_tire_frc_frnt_adm.l.idstring})` )
      *Output( o_adm_hub_forces_left_frnt, `Tire - Front Tire Hub Forces (C-Axis System) (left)`, USER, `USER(902,6,{gf_tire_frc_frnt_adm.l.idstring})` )
      *Output( o_adm_cp_location_left_frnt, `Tire - Front Contact Patch Location (left)`, USER, `USER(902,10,{gf_tire_frc_frnt_adm.l.idstring})` )
      *Output( o_adm_hub_velocity_left_frnt, `Tire - Front Hub Velocity (left)`, USER, `USER(902,11,{gf_tire_frc_frnt_adm.l.idstring})` )
      *Output( o_adm_rolling_states_right_frnt, `Tire - Front Rad OmegaActual OmegaFree (right)`, USER, `USER(902,1,{gf_tire_frc_frnt_adm.r.idstring})` )
      *Output( o_adm_kinematics_right_frnt, `Tire - Front LonSlip LatSlip IncAngle (right)`, USER, `USER(902,2,{gf_tire_frc_frnt_adm.r.idstring})` )
      *Output( o_adm_cp_forces_right_frnt, `Tire - Front Tire CP Forces (W-Axis system) (right)`, USER, `USER(902,3,{gf_tire_frc_frnt_adm.r.idstring})` )
      *Output( o_adm_cp_forces_sae_right_frnt, `Tire - Front Tire CP Forces (SAE-Axis system) (right)`, USER, `USER(902,4,{gf_tire_frc_frnt_adm.r.idstring})` )
      *Output( o_adm_kinematics_sae_right_frnt, `Tire - Front LonSlip LatSlip IncAngle (right)`, USER, `USER(902,5,{gf_tire_frc_frnt_adm.r.idstring})` )
      *Output( o_adm_hub_forces_right_frnt, `Tire - Front Tire Hub Forces (C-Axis System) (right)`, USER, `USER(902,6,{gf_tire_frc_frnt_adm.r.idstring})` )
      *Output( o_adm_cp_location_right_frnt, `Tire - Front Contact Patch Location (right)`, USER, `USER(902,10,{gf_tire_frc_frnt_adm.r.idstring})` )
      *Output( o_adm_hub_velocity_right_frnt, `Tire - Front Hub Velocity (right)`, USER, `USER(902,11,{gf_tire_frc_frnt_adm.r.idstring})` )
      *Output( o_adm_rolling_states_left_rear, `Tire - Rear Rad OmegaActual OmegaFree (left)`, USER, `USER(902,1,{gf_tire_frc_rear_adm.l.idstring})` )
      *Output( o_adm_kinematics_left_rear, `Tire - Rear LonSlip LatSlip IncAngle (left)`, USER, `USER(902,2,{gf_tire_frc_rear_adm.l.idstring})` )
      *Output( o_adm_cp_forces_left_rear, `Tire - Rear Tire CP Forces (W-Axis system) (left)`, USER, `USER(902,3,{gf_tire_frc_rear_adm.l.idstring})` )
      *Output( o_adm_cp_forces_sae_left_rear, `Tire - Rear Tire CP Forces (SAE-Axis system) (left)`, USER, `USER(902,4,{gf_tire_frc_rear_adm.l.idstring})` )
      *Output( o_adm_kinematics_sae_left_rear, `Tire - Rear LonSlip LatSlip IncAngle (left)`, USER, `USER(902,5,{gf_tire_frc_rear_adm.l.idstring})` )
      *Output( o_adm_hub_forces_left_rear, `Tire - Rear Tire Hub Forces (C-Axis System) (left)`, USER, `USER(902,6,{gf_tire_frc_rear_adm.l.idstring})` )
      *Output( o_adm_cp_location_left_rear, `Tire - Rear Contact Patch Location (left)`, USER, `USER(902,10,{gf_tire_frc_rear_adm.l.idstring})` )
      *Output( o_adm_hub_velocity_left_rear, `Tire - Rear Hub Velocity (left)`, USER, `USER(902,11,{gf_tire_frc_rear_adm.l.idstring})` )
      *Output( o_adm_rolling_states_right_rear, `Tire - Rear Rad OmegaActual OmegaFree (right)`, USER, `USER(902,1,{gf_tire_frc_rear_adm.r.idstring})` )
      *Output( o_adm_kinematics_right_rear, `Tire - Rear LonSlip LatSlip IncAngle (right)`, USER, `USER(902,2,{gf_tire_frc_rear_adm.r.idstring})` )
      *Output( o_adm_cp_forces_right_rear, `Tire - Rear Tire CP Forces (W-Axis system) (right)`, USER, `USER(902,3,{gf_tire_frc_rear_adm.r.idstring})` )
      *Output( o_adm_cp_forces_sae_right_rear, `Tire - Rear Tire CP Forces (SAE-Axis system) (right)`, USER, `USER(902,4,{gf_tire_frc_rear_adm.r.idstring})` )
      *Output( o_adm_kinematics_sae_right_rear, `Tire - Rear LonSlip LatSlip IncAngle (right)`, USER, `USER(902,5,{gf_tire_frc_rear_adm.r.idstring})` )
      *Output( o_adm_hub_forces_right_rear, `Tire - Rear Tire Hub Forces (C-Axis System) (right)`, USER, `USER(902,6,{gf_tire_frc_rear_adm.r.idstring})` )
      *Output( o_adm_cp_location_right_rear, `Tire - Rear Contact Patch Location (right)`, USER, `USER(902,10,{gf_tire_frc_rear_adm.r.idstring})` )
      *Output( o_adm_hub_velocity_right_rear, `Tire - Rear Hub Velocity (right)`, USER, `USER(902,11,{gf_tire_frc_rear_adm.r.idstring})` )
    *endif()
    *System( ts_front, "AutoTirePair - Front", def_sys_tirepair, b_f_wheel
             , p_f_wc, m_tire_frc_frnt, m_road_ref_frnt, MODEL.Global_Frame, MODEL.Global_Frame )
    *System( ts_rear, "AutoTirePair - Rear", def_sys_tirepair, b_r_wheel
             , p_r_wc, m_tire_frc_rear, m_road_ref_rear, MODEL.Global_Frame, MODEL.Global_Frame )
    *SetSolverString( st_tpf_left_frnt,           {ds_tire_dat.tpf_front_left.value} )
    *SetSolverString( st_tpf_right_frnt,          {ds_tire_dat.tpf_front_right.value} )
    *SetSolverString( st_tpf_left_rear,           {ds_tire_dat.tpf_rear_left.value} )
    *SetSolverString( st_tpf_right_rear,          {ds_tire_dat.tpf_rear_right.value} )
    *SetSolverString( st_rpf_left_frnt,           {ds_tire_dat.rdf_front_left.value} )
    *SetSolverString( st_rpf_right_frnt,          {ds_tire_dat.rdf_front_right.value} )
    *SetSolverString( st_rpf_left_rear,           {ds_tire_dat.rdf_rear_left.value} )
    *SetSolverString( st_rpf_right_rear,          {ds_tire_dat.rdf_rear_right.value} )
    *SetSolverString( st_role_frnt,               `front` )
    *SetSolverString( st_role_rear,               `front` )
    *SetSolverString( st_simulation,              `VEHICLE_HANDLING_DYNAMIC` )
    *SetSolverString( st_contact,                 `HANDLING` )
    *SetSolverArray( sa_event_flag,              VALUE, 1
, 0 )
    *if( SolverMode == "MotionSolve" )
      *SetSolverString( ss_frc_frnt,                `gf_tire_frc_frnt_ms` )
      *SetSolverString( ss_frc_rear,                `gf_tire_frc_rear_ms` )
      *if( sa_event_flag.ic_value[0] == 1 )
        *SetState( gf_tire_frc_frnt_ms,        false )
        *SetState( gf_tire_frc_rear_ms,        false )
        *SetState( m_road_ref_frnt,            false )
        *SetState( m_road_ref_rear,            false )
        *Set( gf_tire_frc_frnt_ms_knc.l.user, TRUE )
        *Set( gf_tire_frc_frnt_ms_knc.r.user, TRUE )
        *Set( gf_tire_frc_rear_ms_knc.l.user, TRUE )
        *Set( gf_tire_frc_rear_ms_knc.r.user, TRUE )
        *Set( gf_tire_frc_frnt_ms_knc.l.use_local_dll, TRUE )
        *Set( gf_tire_frc_frnt_ms_knc.r.use_local_dll, TRUE )
        *Set( gf_tire_frc_rear_ms_knc.l.use_local_dll, TRUE )
        *Set( gf_tire_frc_rear_ms_knc.r.use_local_dll, TRUE )
        *SetLocalUserDLL( gf_tire_frc_frnt_ms_knc.l,       "mbdtire" )
        *SetLocalUserDLL( gf_tire_frc_frnt_ms_knc.r,       "mbdtire" )
        *SetLocalUserDLL( gf_tire_frc_rear_ms_knc.l,       "mbdtire" )
        *SetLocalUserDLL( gf_tire_frc_rear_ms_knc.r,       "mbdtire" )
        *Set( gf_tire_frc_frnt_ms_knc.l.usr_sub, `USER(408, {gf_tire_frc_frnt_ms_knc.l.idstring}, {ar_front_lt_ms.idstring},0)` )
        *Set( gf_tire_frc_frnt_ms_knc.r.usr_sub, `USER(408, {gf_tire_frc_frnt_ms_knc.r.idstring}, {ar_front_rt_ms.idstring},0)` )
        *Set( gf_tire_frc_rear_ms_knc.l.usr_sub, `USER(408, {gf_tire_frc_rear_ms_knc.l.idstring}, {ar_rear_lt_ms.idstring},0)` )
        *Set( gf_tire_frc_rear_ms_knc.r.usr_sub, `USER(408, {gf_tire_frc_rear_ms_knc.r.idstring}, {ar_rear_rt_ms.idstring},0)` )
        *SetLocalUserFuncname( gf_tire_frc_frnt_ms_knc.l,       "mbdtire" )
        *SetLocalUserFuncname( gf_tire_frc_frnt_ms_knc.r,       "mbdtire" )
        *SetLocalUserFuncname( gf_tire_frc_rear_ms_knc.l,       "mbdtire" )
        *SetLocalUserFuncname( gf_tire_frc_rear_ms_knc.r,       "mbdtire" )
        *SetSolverString( ss_frc_frnt,                `gf_tire_frc_frnt_ms_knc` )
        *SetSolverString( ss_frc_rear,                `gf_tire_frc_rear_ms_knc` )
      *endif()
    *endif()
    *Set( gf_tire_frc_frnt_ms.l.user, TRUE )
    *Set( gf_tire_frc_frnt_ms.r.user, TRUE )
    *Set( gf_tire_frc_frnt_adm.l.user, TRUE )
    *Set( gf_tire_frc_frnt_adm.r.user, TRUE )
    *Set( gf_tire_frc_rear_ms.l.user, TRUE )
    *Set( gf_tire_frc_rear_ms.r.user, TRUE )
    *Set( gf_tire_frc_rear_adm.l.user, TRUE )
    *Set( gf_tire_frc_rear_adm.r.user, TRUE )
    *Set( gf_tire_frc_frnt_ms.l.use_local_dll, TRUE )
    *Set( gf_tire_frc_frnt_ms.r.use_local_dll, TRUE )
    *Set( gf_tire_frc_rear_ms.l.use_local_dll, TRUE )
    *Set( gf_tire_frc_rear_ms.r.use_local_dll, TRUE )
    *SetLocalUserDLL( gf_tire_frc_frnt_ms.l,       "mbdtire" )
    *SetLocalUserDLL( gf_tire_frc_frnt_ms.r,       "mbdtire" )
    *SetLocalUserDLL( gf_tire_frc_rear_ms.l,       "mbdtire" )
    *SetLocalUserDLL( gf_tire_frc_rear_ms.r,       "mbdtire" )
    *Set( gf_tire_frc_frnt_ms.l.usr_sub, `USER(408, {gf_tire_frc_frnt_ms.l.idstring}, {ar_front_lt_ms.idstring},0)` )
    *Set( gf_tire_frc_frnt_ms.r.usr_sub, `USER(408, {gf_tire_frc_frnt_ms.r.idstring}, {ar_front_rt_ms.idstring},0)` )
    *Set( gf_tire_frc_frnt_adm.l.usr_sub, `USER(900, {gf_tire_frc_frnt_adm.l.idstring}, {ar_front_lt_adm.idstring})` )
    *Set( gf_tire_frc_frnt_adm.r.usr_sub, `USER(900, {gf_tire_frc_frnt_adm.r.idstring}, {ar_front_rt_adm.idstring})` )
    *Set( gf_tire_frc_rear_ms.l.usr_sub, `USER(408, {gf_tire_frc_rear_ms.l.idstring}, {ar_rear_lt_ms.idstring},0)` )
    *Set( gf_tire_frc_rear_ms.r.usr_sub, `USER(408, {gf_tire_frc_rear_ms.r.idstring}, {ar_rear_rt_ms.idstring},0)` )
    *Set( gf_tire_frc_rear_adm.l.usr_sub, `USER(900, {gf_tire_frc_rear_adm.l.idstring}, {ar_rear_lt_adm.idstring})` )
    *Set( gf_tire_frc_rear_adm.r.usr_sub, `USER(900, {gf_tire_frc_rear_adm.r.idstring}, {ar_rear_rt_adm.idstring})` )
    *SetLocalUserFuncname( gf_tire_frc_frnt_ms.l,       "mbdtire" )
    *SetLocalUserFuncname( gf_tire_frc_frnt_ms.r,       "mbdtire" )
    *SetLocalUserFuncname( gf_tire_frc_rear_ms.l,       "mbdtire" )
    *SetLocalUserFuncname( gf_tire_frc_rear_ms.r,       "mbdtire" )
    *Set( gf_tire_frc_frnt_adm.l.use_local_dll, TRUE )
    *Set( gf_tire_frc_frnt_adm.r.use_local_dll, TRUE )
    *Set( gf_tire_frc_rear_adm.l.use_local_dll, TRUE )
    *Set( gf_tire_frc_rear_adm.r.use_local_dll, TRUE )
    *SetLocalUserDLL( gf_tire_frc_frnt_adm.l,       "abgTire" )
    *SetLocalUserDLL( gf_tire_frc_frnt_adm.r,       "abgTire" )
    *SetLocalUserDLL( gf_tire_frc_rear_adm.l,       "abgTire" )
    *SetLocalUserDLL( gf_tire_frc_rear_adm.r,       "abgTire" )
    *SetLocalUserFuncname( gf_tire_frc_frnt_adm.l,       "gfo900" )
    *SetLocalUserFuncname( gf_tire_frc_frnt_adm.r,       "gfo900" )
    *SetLocalUserFuncname( gf_tire_frc_rear_adm.l,       "gfo900" )
    *SetLocalUserFuncname( gf_tire_frc_rear_adm.r,       "gfo900" )
    *if( SolverMode == "MotionSolve" )
      *SetSolverArray( ar_front_lt_ms,             VALUE, 7
, 0, 18, 0, st_role_frnt.id, st_tpf_left_frnt.id, st_simulation.id, st_rpf_left_frnt.id )
      *SetSolverArray( ar_front_rt_ms,             VALUE, 7
, 0, 18, 1, st_role_frnt.id, st_tpf_right_frnt.id, st_simulation.id, st_rpf_right_frnt.id )
      *SetSolverArray( ar_rear_lt_ms,              VALUE, 7
, 0, 18, 0, st_role_rear.id, st_tpf_left_rear.id, st_simulation.id, st_rpf_left_rear.id )
      *SetSolverArray( ar_rear_rt_ms,              VALUE, 7
, 0, 18, 1, st_role_rear.id, st_tpf_right_rear.id, st_simulation.id, st_rpf_right_rear.id )
    *endif()
    *if( SolverMode == "MotionSolve" )
      *SetEntityId( o_ms_rolling_states_left_frnt,       80101010 )
      *SetEntityId( o_ms_kinematics_left_frnt,       80101020 )
      *SetEntityId( o_ms_cp_forces_left_frnt,       80101030 )
      *SetEntityId( o_ms_cp_forces_sae_left_frnt,       80101040 )
      *SetEntityId( o_ms_kinematics_sae_left_frnt,       80101050 )
      *SetEntityId( o_ms_hub_forces_left_frnt,       80101060 )
      *SetEntityId( o_ms_cp_location_left_frnt,       80101070 )
      *SetEntityId( o_ms_hub_velocity_left_frnt,       80101080 )
      *SetEntityId( o_ms_rolling_states_right_frnt,       80101110 )
      *SetEntityId( o_ms_kinematics_right_frnt,       80101120 )
      *SetEntityId( o_ms_cp_forces_right_frnt,       80101130 )
      *SetEntityId( o_ms_cp_forces_sae_right_frnt,       80101140 )
      *SetEntityId( o_ms_kinematics_sae_right_frnt,       80101150 )
      *SetEntityId( o_ms_hub_forces_right_frnt,       80101160 )
      *SetEntityId( o_ms_cp_location_right_frnt,       80101170 )
      *SetEntityId( o_ms_hub_velocity_right_frnt,       80101180 )
      *SetEntityId( o_ms_rolling_states_left_rear,       40101010 )
      *SetEntityId( o_ms_kinematics_left_rear,       40101020 )
      *SetEntityId( o_ms_cp_forces_left_rear,       40101030 )
      *SetEntityId( o_ms_cp_forces_sae_left_rear,       40101040 )
      *SetEntityId( o_ms_kinematics_sae_left_rear,       40101050 )
      *SetEntityId( o_ms_hub_forces_left_rear,       40101060 )
      *SetEntityId( o_ms_cp_location_left_rear,       40101070 )
      *SetEntityId( o_ms_hub_velocity_left_rear,       40101080 )
      *SetEntityId( o_ms_rolling_states_right_rear,       40101110 )
      *SetEntityId( o_ms_kinematics_right_rear,       40101120 )
      *SetEntityId( o_ms_cp_forces_right_rear,       40101130 )
      *SetEntityId( o_ms_cp_forces_sae_right_rear,       40101140 )
      *SetEntityId( o_ms_kinematics_sae_right_rear,       40101150 )
      *SetEntityId( o_ms_hub_forces_right_rear,       40101160 )
      *SetEntityId( o_ms_cp_location_right_rear,       40101170 )
      *SetEntityId( o_ms_hub_velocity_right_rear,       40101180 )
    *endif()
    *SetPoint( p_ground_reference_frnt.l,       0, 0, p_f_wc.l.z-(ds_tire_dat.rollrad_front_left.value) )
    *SetPoint( p_ground_reference_frnt.r,       0, 0, p_f_wc.r.z-(ds_tire_dat.rollrad_front_right.value ) )
    *SetPoint( p_ground_reference_rear.l,       0, 0, p_f_wc.l.z-(ds_tire_dat.rollrad_front_left.value) )
    *SetPoint( p_ground_reference_rear.r,       0, 0, p_f_wc.r.z-(ds_tire_dat.rollrad_front_right.value) )
    *SetVector( v_f_sp.l,                   p_f_wc.l.x-p_f_spal.l.x, p_f_wc.l.y-p_f_spal.l.y, p_f_wc.l.z-p_f_spal.l.z )
    *SetVector( v_f_sp.r,                   p_f_spal.r.x-p_f_wc.r.x, p_f_spal.r.y-p_f_wc.r.y, p_f_spal.r.z-p_f_wc.r.z )
    *SetVector( v_r_sp.l,                   p_r_wc.l.x-p_r_spal.l.x, p_r_wc.l.y-p_r_spal.l.y, p_r_wc.l.z-p_r_spal.l.z )
    *SetVector( v_r_sp.r,                   p_r_spal.r.x-p_r_wc.r.x, p_r_spal.r.y-p_r_wc.r.y, p_r_spal.r.z-p_r_wc.r.z )
    *SetOrientation( m_tire_frc_frnt.l,          TWOAXES, YZ, VECTOR, v_f_sp.l, DXDYDZ, 0, 0.0, 1 )
    *SetOrientation( m_tire_frc_frnt.r,          TWOAXES, YZ, VECTOR, v_f_sp.r, DXDYDZ, 0, 0.0, 1 )
    *SetOrientation( m_tire_frc_rear.l,          TWOAXES, YZ, VECTOR, v_r_sp.l, DXDYDZ, 0, 0.0, 1 )
    *SetOrientation( m_tire_frc_rear.r,          TWOAXES, YZ, VECTOR, v_r_sp.r, DXDYDZ, 0, 0.0, 1 )
    *SetReal( ds_tire_dat.unload_rad_front_left,       316.8 )
    *SetReal( ds_tire_dat.rollrad_front_left,       ds_tire_dat.unload_rad_front_left.value*0.98 )
    *SetFileName( ds_tire_dat.tpf_front_left,       { getenv("ALTAIR_HOME") + "/hw/mdl/mdllib/Libs/Models/Tire/sample_2002.tir"} )
    *SetFileName( ds_tire_dat.rdf_front_left,       { getenv("ALTAIR_HOME") + "/hw/mdl/mdllib/Libs/Models/Tire/flat_road.rdf"} )
    *SetReal( ds_tire_dat.unload_rad_front_right,       ds_tire_dat.unload_rad_front_left.value )
    *SetReal( ds_tire_dat.rollrad_front_right,       ds_tire_dat.unload_rad_front_right.value*0.98 )
    *SetFileName( ds_tire_dat.tpf_front_right,       ds_tire_dat.tpf_front_left.value )
    *SetFileName( ds_tire_dat.rdf_front_right,       ds_tire_dat.rdf_front_left.value )
    *SetReal( ds_tire_dat.unload_rad_rear_left,       ds_tire_dat.unload_rad_front_left.value )
    *SetReal( ds_tire_dat.rollrad_rear_left,       ds_tire_dat.unload_rad_rear_left.value*0.98 )
    *SetFileName( ds_tire_dat.tpf_rear_left,       ds_tire_dat.tpf_front_left.value )
    *SetFileName( ds_tire_dat.rdf_rear_left,       ds_tire_dat.rdf_front_left.value )
    *SetReal( ds_tire_dat.unload_rad_rear_right,       ds_tire_dat.unload_rad_rear_left.value )
    *SetReal( ds_tire_dat.rollrad_rear_right,       ds_tire_dat.unload_rad_rear_right.value*0.98 )
    *SetFileName( ds_tire_dat.tpf_rear_right,       ds_tire_dat.tpf_rear_left.value )
    *SetFileName( ds_tire_dat.rdf_rear_right,       ds_tire_dat.rdf_rear_left.value )
    *SetSolverArray( ar_front_lt_adm,            VALUE, 9
, diff_front_left_1.id, diff_front_left_2.id, 0, st_role_frnt.id, st_tpf_left_frnt.id, st_simulation.id, st_rpf_left_frnt.id, st_contact.id, 0 )
    *SetSolverArray( ar_front_rt_adm,            VALUE, 9
, diff_front_right_1.id, diff_front_right_2.id, 1, st_role_frnt.id, st_tpf_right_frnt.id, st_simulation.id, st_rpf_right_frnt.id, st_contact.id, 0 )
    *SetSolverArray( ar_rear_lt_adm,             VALUE, 9
, diff_rear_left_1.id, diff_rear_left_2.id, 0, st_role_rear.id, st_tpf_left_rear.id, st_simulation.id, st_rpf_left_rear.id, st_contact.id, 0 )
    *SetSolverArray( ar_rear_rt_adm,             VALUE, 9
, diff_rear_right_1.id, diff_rear_right_2.id, 1, st_role_rear.id, st_tpf_right_rear.id, st_simulation.id, st_rpf_right_rear.id, st_contact.id, 0 )
    *SetSolverDiffEquation( diff_front_left_1,          USER, EXPLICIT, `USER(900,{gf_tire_frc_frnt_adm.l.idstring},{ar_front_lt_adm.idstring})`, , 0, 0 )
    *SetSolverDiffEquation( diff_front_left_2,          USER, EXPLICIT, `USER(900,{gf_tire_frc_frnt_adm.l.idstring},{ar_front_lt_adm.idstring})`, , 0, 0 )
    *SetSolverDiffEquation( diff_front_right_1,         USER, EXPLICIT, `USER(900,{gf_tire_frc_frnt_adm.r.idstring},{ar_front_rt_adm.idstring})`, , 0, 0 )
    *SetSolverDiffEquation( diff_front_right_2,         USER, EXPLICIT, `USER(900,{gf_tire_frc_frnt_adm.r.idstring},{ar_front_rt_adm.idstring})`, , 0, 0 )
    *SetSolverDiffEquation( diff_rear_left_1,           USER, EXPLICIT, `USER(900,{gf_tire_frc_rear_adm.l.idstring},{ar_rear_lt_adm.idstring})`, , 0, 0 )
    *SetSolverDiffEquation( diff_rear_left_2,           USER, EXPLICIT, `USER(900,{gf_tire_frc_rear_adm.l.idstring},{ar_rear_lt_adm.idstring})`, , 0, 0 )
    *SetSolverDiffEquation( diff_rear_right_1,          USER, EXPLICIT, `USER(900,{gf_tire_frc_rear_adm.r.idstring},{ar_rear_rt_adm.idstring})`, , 0, 0 )
    *SetSolverDiffEquation( diff_rear_right_2,          USER, EXPLICIT, `USER(900,{gf_tire_frc_rear_adm.r.idstring},{ar_rear_rt_adm.idstring})`, , 0, 0 )
    *Set( diff_front_left_1.use_local_dll, TRUE )
    *SetLocalUserDLL( diff_front_left_1,          "abgTire" )
    *SetLocalUserFuncname( diff_front_left_1,          "dif900" )
    *Set( diff_front_left_2.use_local_dll, TRUE )
    *SetLocalUserDLL( diff_front_left_2,          "abgTire" )
    *SetLocalUserFuncname( diff_front_left_2,          "dif900" )
    *Set( diff_front_right_1.use_local_dll, TRUE )
    *SetLocalUserDLL( diff_front_right_1,         "abgTire" )
    *SetLocalUserFuncname( diff_front_right_1,         "dif900" )
    *Set( diff_front_right_2.use_local_dll, TRUE )
    *SetLocalUserDLL( diff_front_right_2,         "abgTire" )
    *SetLocalUserFuncname( diff_front_right_2,         "dif900" )
    *Set( diff_rear_left_1.use_local_dll, TRUE )
    *SetLocalUserDLL( diff_rear_left_1,           "abgTire" )
    *SetLocalUserFuncname( diff_rear_left_1,           "dif900" )
    *Set( diff_rear_left_2.use_local_dll, TRUE )
    *SetLocalUserDLL( diff_rear_left_2,           "abgTire" )
    *SetLocalUserFuncname( diff_rear_left_2,           "dif900" )
    *Set( diff_rear_right_1.use_local_dll, TRUE )
    *SetLocalUserDLL( diff_rear_right_1,          "abgTire" )
    *SetLocalUserFuncname( diff_rear_right_1,          "dif900" )
    *Set( diff_rear_right_2.use_local_dll, TRUE )
    *SetLocalUserDLL( diff_rear_right_2,          "abgTire" )
    *SetLocalUserFuncname( diff_rear_right_2,          "dif900" )
    *SetState( tpl_tires_xml,              false )
    *Set( o_ms_rolling_states_left_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_rolling_states_left_frnt,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_rolling_states_left_frnt,       "tireReq" )
    *Set( o_ms_kinematics_left_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_kinematics_left_frnt,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_kinematics_left_frnt,       "tireReq" )
    *Set( o_ms_cp_forces_left_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_cp_forces_left_frnt,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_cp_forces_left_frnt,       "tireReq" )
    *Set( o_ms_cp_forces_sae_left_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_cp_forces_sae_left_frnt,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_cp_forces_sae_left_frnt,       "tireReq" )
    *Set( o_ms_kinematics_sae_left_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_kinematics_sae_left_frnt,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_kinematics_sae_left_frnt,       "tireReq" )
    *Set( o_ms_hub_forces_left_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_hub_forces_left_frnt,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_hub_forces_left_frnt,       "tireReq" )
    *Set( o_ms_cp_location_left_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_cp_location_left_frnt,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_cp_location_left_frnt,       "tireReq" )
    *Set( o_ms_hub_velocity_left_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_hub_velocity_left_frnt,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_hub_velocity_left_frnt,       "tireReq" )
    *Set( o_ms_rolling_states_right_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_rolling_states_right_frnt,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_rolling_states_right_frnt,       "tireReq" )
    *Set( o_ms_kinematics_right_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_kinematics_right_frnt,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_kinematics_right_frnt,       "tireReq" )
    *Set( o_ms_cp_forces_right_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_cp_forces_right_frnt,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_cp_forces_right_frnt,       "tireReq" )
    *Set( o_ms_cp_forces_sae_right_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_cp_forces_sae_right_frnt,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_cp_forces_sae_right_frnt,       "tireReq" )
    *Set( o_ms_kinematics_sae_right_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_kinematics_sae_right_frnt,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_kinematics_sae_right_frnt,       "tireReq" )
    *Set( o_ms_hub_forces_right_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_hub_forces_right_frnt,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_hub_forces_right_frnt,       "tireReq" )
    *Set( o_ms_cp_location_right_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_cp_location_right_frnt,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_cp_location_right_frnt,       "tireReq" )
    *Set( o_ms_hub_velocity_right_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_hub_velocity_right_frnt,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_hub_velocity_right_frnt,       "tireReq" )
    *Set( o_ms_rolling_states_left_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_rolling_states_left_rear,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_rolling_states_left_rear,       "tireReq" )
    *Set( o_ms_kinematics_left_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_kinematics_left_rear,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_kinematics_left_rear,       "tireReq" )
    *Set( o_ms_cp_forces_left_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_cp_forces_left_rear,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_cp_forces_left_rear,       "tireReq" )
    *Set( o_ms_cp_forces_sae_left_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_cp_forces_sae_left_rear,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_cp_forces_sae_left_rear,       "tireReq" )
    *Set( o_ms_kinematics_sae_left_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_kinematics_sae_left_rear,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_kinematics_sae_left_rear,       "tireReq" )
    *Set( o_ms_hub_forces_left_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_hub_forces_left_rear,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_hub_forces_left_rear,       "tireReq" )
    *Set( o_ms_cp_location_left_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_cp_location_left_rear,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_cp_location_left_rear,       "tireReq" )
    *Set( o_ms_hub_velocity_left_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_hub_velocity_left_rear,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_hub_velocity_left_rear,       "tireReq" )
    *Set( o_ms_rolling_states_right_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_rolling_states_right_rear,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_rolling_states_right_rear,       "tireReq" )
    *Set( o_ms_kinematics_right_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_kinematics_right_rear,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_kinematics_right_rear,       "tireReq" )
    *Set( o_ms_cp_forces_right_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_cp_forces_right_rear,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_cp_forces_right_rear,       "tireReq" )
    *Set( o_ms_cp_forces_sae_right_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_cp_forces_sae_right_rear,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_cp_forces_sae_right_rear,       "tireReq" )
    *Set( o_ms_kinematics_sae_right_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_kinematics_sae_right_rear,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_kinematics_sae_right_rear,       "tireReq" )
    *Set( o_ms_hub_forces_right_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_hub_forces_right_rear,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_hub_forces_right_rear,       "tireReq" )
    *Set( o_ms_cp_location_right_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_cp_location_right_rear,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_cp_location_right_rear,       "tireReq" )
    *Set( o_ms_hub_velocity_right_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_ms_hub_velocity_right_rear,       "mbdtire" )
    *SetLocalUserFuncname( o_ms_hub_velocity_right_rear,       "tireReq" )
    *Set( o_adm_rolling_states_left_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_rolling_states_left_frnt,       "abgTire" )
    *SetLocalUserFuncname( o_adm_rolling_states_left_frnt,       "req902" )
    *Set( o_adm_kinematics_left_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_kinematics_left_frnt,       "abgTire" )
    *SetLocalUserFuncname( o_adm_kinematics_left_frnt,       "req902" )
    *Set( o_adm_cp_forces_left_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_cp_forces_left_frnt,       "abgTire" )
    *SetLocalUserFuncname( o_adm_cp_forces_left_frnt,       "req902" )
    *Set( o_adm_cp_forces_sae_left_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_cp_forces_sae_left_frnt,       "abgTire" )
    *SetLocalUserFuncname( o_adm_cp_forces_sae_left_frnt,       "req902" )
    *Set( o_adm_kinematics_sae_left_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_kinematics_sae_left_frnt,       "abgTire" )
    *SetLocalUserFuncname( o_adm_kinematics_sae_left_frnt,       "req902" )
    *Set( o_adm_hub_forces_left_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_hub_forces_left_frnt,       "abgTire" )
    *SetLocalUserFuncname( o_adm_hub_forces_left_frnt,       "req902" )
    *Set( o_adm_cp_location_left_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_cp_location_left_frnt,       "abgTire" )
    *SetLocalUserFuncname( o_adm_cp_location_left_frnt,       "req902" )
    *Set( o_adm_hub_velocity_left_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_hub_velocity_left_frnt,       "abgTire" )
    *SetLocalUserFuncname( o_adm_hub_velocity_left_frnt,       "req902" )
    *Set( o_adm_rolling_states_right_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_rolling_states_right_frnt,       "abgTire" )
    *SetLocalUserFuncname( o_adm_rolling_states_right_frnt,       "req902" )
    *Set( o_adm_kinematics_right_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_kinematics_right_frnt,       "abgTire" )
    *SetLocalUserFuncname( o_adm_kinematics_right_frnt,       "req902" )
    *Set( o_adm_cp_forces_right_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_cp_forces_right_frnt,       "abgTire" )
    *SetLocalUserFuncname( o_adm_cp_forces_right_frnt,       "req902" )
    *Set( o_adm_cp_forces_sae_right_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_cp_forces_sae_right_frnt,       "abgTire" )
    *SetLocalUserFuncname( o_adm_cp_forces_sae_right_frnt,       "req902" )
    *Set( o_adm_kinematics_sae_right_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_kinematics_sae_right_frnt,       "abgTire" )
    *SetLocalUserFuncname( o_adm_kinematics_sae_right_frnt,       "req902" )
    *Set( o_adm_hub_forces_right_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_hub_forces_right_frnt,       "abgTire" )
    *SetLocalUserFuncname( o_adm_hub_forces_right_frnt,       "req902" )
    *Set( o_adm_cp_location_right_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_cp_location_right_frnt,       "abgTire" )
    *SetLocalUserFuncname( o_adm_cp_location_right_frnt,       "req902" )
    *Set( o_adm_hub_velocity_right_frnt.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_hub_velocity_right_frnt,       "abgTire" )
    *SetLocalUserFuncname( o_adm_hub_velocity_right_frnt,       "req902" )
    *Set( o_adm_rolling_states_left_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_rolling_states_left_rear,       "abgTire" )
    *SetLocalUserFuncname( o_adm_rolling_states_left_rear,       "req902" )
    *Set( o_adm_kinematics_left_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_kinematics_left_rear,       "abgTire" )
    *SetLocalUserFuncname( o_adm_kinematics_left_rear,       "req902" )
    *Set( o_adm_cp_forces_left_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_cp_forces_left_rear,       "abgTire" )
    *SetLocalUserFuncname( o_adm_cp_forces_left_rear,       "req902" )
    *Set( o_adm_cp_forces_sae_left_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_cp_forces_sae_left_rear,       "abgTire" )
    *SetLocalUserFuncname( o_adm_cp_forces_sae_left_rear,       "req902" )
    *Set( o_adm_kinematics_sae_left_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_kinematics_sae_left_rear,       "abgTire" )
    *SetLocalUserFuncname( o_adm_kinematics_sae_left_rear,       "req902" )
    *Set( o_adm_hub_forces_left_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_hub_forces_left_rear,       "abgTire" )
    *SetLocalUserFuncname( o_adm_hub_forces_left_rear,       "req902" )
    *Set( o_adm_cp_location_left_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_cp_location_left_rear,       "abgTire" )
    *SetLocalUserFuncname( o_adm_cp_location_left_rear,       "req902" )
    *Set( o_adm_hub_velocity_left_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_hub_velocity_left_rear,       "abgTire" )
    *SetLocalUserFuncname( o_adm_hub_velocity_left_rear,       "req902" )
    *Set( o_adm_rolling_states_right_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_rolling_states_right_rear,       "abgTire" )
    *SetLocalUserFuncname( o_adm_rolling_states_right_rear,       "req902" )
    *Set( o_adm_kinematics_right_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_kinematics_right_rear,       "abgTire" )
    *SetLocalUserFuncname( o_adm_kinematics_right_rear,       "req902" )
    *Set( o_adm_cp_forces_right_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_cp_forces_right_rear,       "abgTire" )
    *SetLocalUserFuncname( o_adm_cp_forces_right_rear,       "req902" )
    *Set( o_adm_cp_forces_sae_right_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_cp_forces_sae_right_rear,       "abgTire" )
    *SetLocalUserFuncname( o_adm_cp_forces_sae_right_rear,       "req902" )
    *Set( o_adm_kinematics_sae_right_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_kinematics_sae_right_rear,       "abgTire" )
    *SetLocalUserFuncname( o_adm_kinematics_sae_right_rear,       "req902" )
    *Set( o_adm_hub_forces_right_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_hub_forces_right_rear,       "abgTire" )
    *SetLocalUserFuncname( o_adm_hub_forces_right_rear,       "req902" )
    *Set( o_adm_cp_location_right_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_cp_location_right_rear,       "abgTire" )
    *SetLocalUserFuncname( o_adm_cp_location_right_rear,       "req902" )
    *Set( o_adm_hub_velocity_right_rear.use_local_dll, TRUE )
    *SetLocalUserDLL( o_adm_hub_velocity_right_rear,       "abgTire" )
    *SetLocalUserFuncname( o_adm_hub_velocity_right_rear,       "req902" )
  *EndDefine()
  *DefineDataSet( dsdef_tire_dat )
    *if( SolverMode == "MotionSolve" )
      *Option( opt_omega, "Wheel Rotation ", 1, "Standard", 1, "std", EDIT )
    *endif()
    *Real( unload_rad_front_left, "Front Left Tire Unloaded Radius", EDIT )
    *Real( rollrad_front_left, "Front Left Tire rolling radius", EDIT )
    *FileName( tpf_front_left, "Front Left Tire Property File", "*.tir", INPUT, EDIT )
    *FileName( rdf_front_left, "Front Left Road Property File", "*.rdf", INPUT, EDIT )
    *Real( unload_rad_front_right, "Front Right Tire Unloaded Radius", EDIT )
    *Real( rollrad_front_right, "Front Right Tire rolling radius", EDIT )
    *FileName( tpf_front_right, "Front Right Tire Property File", "*.tir", INPUT, EDIT )
    *FileName( rdf_front_right, "Front Right Road Property File", "*.rdf", INPUT, EDIT )
    *Real( unload_rad_rear_left, "Rear Left Tire Unloaded Radius", EDIT )
    *Real( rollrad_rear_left, "Rear Left Tire rolling radius", EDIT )
    *FileName( tpf_rear_left, "Rear Left Tire Property File", "*.tir", INPUT, EDIT )
    *FileName( rdf_rear_left, "Rear Left Road Property File", "*.rdf", INPUT, EDIT )
    *Real( unload_rad_rear_right, "Rear Right Tire Unloaded Radius", EDIT )
    *Real( rollrad_rear_right, "Rear Right Tire rolling radius", EDIT )
    *FileName( tpf_rear_right, "Rear Right Tire Property File", "*.tir", INPUT, EDIT )
    *FileName( rdf_rear_right, "Rear Right Road Property File", "*.rdf", INPUT, EDIT )
  *EndDefine()
  *DefineForm( frmdef_ms_tire_dat, ds )
    *SetRowsCols( 21, 2 )
    *Attachment( ds, "Attachment ds", DataSet, "Select attachment.", ,  )
    *MergeCells( 2, 1, 2, 2 )
    *MergeCells( 7, 1, 7, 2 )
    *MergeCells( 12, 1, 12, 2 )
    *MergeCells( 17, 1, 17, 2 )
    *ColumnLabel( 1, 2, THIS.label )
    *ColumnWidth( 1, 30 )
    *ColumnWidth( 2, 45 )
    *SetCell( 1, 1, ds.opt_omega.label, "", LEFT, EDIT )
    *SetCell( 1, 2, ds.opt_omega.value, "", RIGHT, EDIT )
    *SetCell( 2, 1, "Front Left Tire Road Data" )
    *SetCell( 3, 1, ds.unload_rad_front_left.label, "", LEFT, EDIT )
    *SetCell( 3, 2, ds.unload_rad_front_left.value, "", RIGHT, EDIT )
    *SetCell( 4, 1, ds.rollrad_front_left.label, "", LEFT, EDIT )
    *SetCell( 4, 2, ds.rollrad_front_left.value, "", RIGHT, EDIT )
    *SetCell( 5, 1, ds.tpf_front_left.label, "", LEFT, EDIT )
    *SetCell( 5, 2, ds.tpf_front_left.value, "", RIGHT, EDIT )
    *SetCell( 6, 1, ds.rdf_front_left.label, "", LEFT, EDIT )
    *SetCell( 6, 2, ds.rdf_front_left.value, "", RIGHT, EDIT )
    *SetCell( 7, 1, "Front Right Tire Road Data" )
    *SetCell( 8, 1, ds.unload_rad_front_right.label, "", LEFT, EDIT )
    *SetCell( 8, 2, ds.unload_rad_front_right.value, "", RIGHT, EDIT )
    *SetCell( 9, 1, ds.rollrad_front_right.label, "", LEFT, EDIT )
    *SetCell( 9, 2, ds.rollrad_front_right.value, "", RIGHT, EDIT )
    *SetCell( 10, 1, ds.tpf_front_right.label, "", LEFT, EDIT )
    *SetCell( 10, 2, ds.tpf_front_right.value, "", RIGHT, EDIT )
    *SetCell( 11, 1, ds.rdf_front_right.label, "", LEFT, EDIT )
    *SetCell( 11, 2, ds.rdf_front_right.value, "", RIGHT, EDIT )
    *SetCell( 12, 1, "Rear Left Tire Road Data" )
    *SetCell( 13, 1, ds.unload_rad_rear_left.label, "", LEFT, EDIT )
    *SetCell( 13, 2, ds.unload_rad_rear_left.value, "", RIGHT, EDIT )
    *SetCell( 14, 1, ds.rollrad_rear_left.label, "", LEFT, EDIT )
    *SetCell( 14, 2, ds.rollrad_rear_left.value, "", RIGHT, EDIT )
    *SetCell( 15, 1, ds.tpf_rear_left.label, "", LEFT, EDIT )
    *SetCell( 15, 2, ds.tpf_rear_left.value, "", RIGHT, EDIT )
    *SetCell( 16, 1, ds.rdf_rear_left.label, "", LEFT, EDIT )
    *SetCell( 16, 2, ds.rdf_rear_left.value, "", RIGHT, EDIT )
    *SetCell( 17, 1, "Rear Right Tire Road Data" )
    *SetCell( 18, 1, ds.unload_rad_rear_right.label, "", LEFT, EDIT )
    *SetCell( 18, 2, ds.unload_rad_rear_right.value, "", RIGHT, EDIT )
    *SetCell( 19, 1, ds.rollrad_rear_right.label, "", LEFT, EDIT )
    *SetCell( 19, 2, ds.rollrad_rear_right.value, "", RIGHT, EDIT )
    *SetCell( 20, 1, ds.tpf_rear_right.label, "", LEFT, EDIT )
    *SetCell( 20, 2, ds.tpf_rear_right.value, "", RIGHT, EDIT )
    *SetCell( 21, 1, ds.rdf_rear_right.label, "", LEFT, EDIT )
    *SetCell( 21, 2, ds.rdf_rear_right.value, "", RIGHT, EDIT )
  *EndDefine()
  *DefineForm( frmdef_adm_tire_dat, ds )
    *SetRowsCols( 20, 2 )
    *Attachment( ds, "Attachment ds", DataSet, "Select attachment.", ,  )
    *MergeCells( 1, 1, 1, 2 )
    *MergeCells( 6, 1, 6, 2 )
    *MergeCells( 11, 1, 11, 2 )
    *MergeCells( 16, 1, 16, 2 )
    *ColumnLabel( 1, 2, THIS.label )
    *ColumnWidth( 1, 30 )
    *ColumnWidth( 2, 45 )
    *SetCell( 1, 1, "Front Left Tire Road Data" )
    *SetCell( 2, 1, ds.unload_rad_front_left.label, "", LEFT, EDIT )
    *SetCell( 2, 2, ds.unload_rad_front_left.value, "", RIGHT, EDIT )
    *SetCell( 3, 1, ds.rollrad_front_left.label, "", LEFT, EDIT )
    *SetCell( 3, 2, ds.rollrad_front_left.value, "", RIGHT, EDIT )
    *SetCell( 4, 1, ds.tpf_front_left.label, "", LEFT, EDIT )
    *SetCell( 4, 2, ds.tpf_front_left.value, "", RIGHT, EDIT )
    *SetCell( 5, 1, ds.rdf_front_left.label, "", LEFT, EDIT )
    *SetCell( 5, 2, ds.rdf_front_left.value, "", RIGHT, EDIT )
    *SetCell( 6, 1, "Front Right Tire Road Data" )
    *SetCell( 7, 1, ds.unload_rad_front_right.label, "", LEFT, EDIT )
    *SetCell( 7, 2, ds.unload_rad_front_right.value, "", RIGHT, EDIT )
    *SetCell( 8, 1, ds.rollrad_front_right.label, "", LEFT, EDIT )
    *SetCell( 8, 2, ds.rollrad_front_right.value, "", RIGHT, EDIT )
    *SetCell( 9, 1, ds.tpf_front_right.label, "", LEFT, EDIT )
    *SetCell( 9, 2, ds.tpf_front_right.value, "", RIGHT, EDIT )
    *SetCell( 10, 1, ds.rdf_front_right.label, "", LEFT, EDIT )
    *SetCell( 10, 2, ds.rdf_front_right.value, "", RIGHT, EDIT )
    *SetCell( 11, 1, "Rear Left Tire Road Data" )
    *SetCell( 12, 1, ds.unload_rad_rear_left.label, "", LEFT, EDIT )
    *SetCell( 12, 2, ds.unload_rad_rear_left.value, "", RIGHT, EDIT )
    *SetCell( 13, 1, ds.rollrad_rear_left.label, "", LEFT, EDIT )
    *SetCell( 13, 2, ds.rollrad_rear_left.value, "", RIGHT, EDIT )
    *SetCell( 14, 1, ds.tpf_rear_left.label, "", LEFT, EDIT )
    *SetCell( 14, 2, ds.tpf_rear_left.value, "", RIGHT, EDIT )
    *SetCell( 15, 1, ds.rdf_rear_left.label, "", LEFT, EDIT )
    *SetCell( 15, 2, ds.rdf_rear_left.value, "", RIGHT, EDIT )
    *SetCell( 16, 1, "Rear Right Tire Road Data" )
    *SetCell( 17, 1, ds.unload_rad_rear_right.label, "", LEFT, EDIT )
    *SetCell( 17, 2, ds.unload_rad_rear_right.value, "", RIGHT, EDIT )
    *SetCell( 18, 1, ds.rollrad_rear_right.label, "", LEFT, EDIT )
    *SetCell( 18, 2, ds.rollrad_rear_right.value, "", RIGHT, EDIT )
    *SetCell( 19, 1, ds.tpf_rear_right.label, "", LEFT, EDIT )
    *SetCell( 19, 2, ds.tpf_rear_right.value, "", RIGHT, EDIT )
    *SetCell( 20, 1, ds.rdf_rear_right.label, "", LEFT, EDIT )
    *SetCell( 20, 2, ds.rdf_rear_right.value, "", RIGHT, EDIT )
  *EndDefine()
  *DefineTemplate( tpldef_grasub, ref_mrkr_front, ref_mrkr_rear, ref_force_front
           , ref_force_rear )
{
     usrsub_lib     = "mbdtire"
}
<!-- GRASUB FOR FTIRE -->
  <Post_Graphic
     id                  = "4000001"
     type                = "UserGra"
     ref_marker_id       = "{ref_mrkr_front.l.idstring}"
     usrsub_param_string = "USER(1, 2, {ref_force_front.l.idstring}, 40, 72, 0.2, 0.9)"
     usrsub_dll_name     = "{usrsub_lib}"
     usrsub_fnc_name     = "tiregra"
  />
  <Post_Graphic
     id                  = "4000002"
     type                = "UserGra"
     ref_marker_id       = "{ref_mrkr_front.r.idstring}"
     usrsub_param_string = "USER(1, 2, {ref_force_front.r.idstring}, 40, 72, 0.2, 0.9)"
     usrsub_dll_name     = "{usrsub_lib}"
     usrsub_fnc_name     = "tiregra"
  />
  <Post_Graphic
     id                  = "4000003"
     type                = "UserGra"
     ref_marker_id       = "{ref_mrkr_rear.l.idstring}"
     usrsub_param_string = "USER(1, 2, {ref_force_rear.l.idstring}, 40, 72, 0.2, 0.9)"
     usrsub_dll_name     = "{usrsub_lib}"
     usrsub_fnc_name     = "tiregra"
  />
  <Post_Graphic
     id                  = "4000004"
     type                = "UserGra"
     ref_marker_id       = "{ref_mrkr_rear.r.idstring}"
     usrsub_param_string = "USER(1, 2, {ref_force_rear.r.idstring}, 40, 72, 0.2, 0.9)"
     usrsub_dll_name     = "{usrsub_lib}"
     usrsub_fnc_name     = "tiregra"
  />
<!-- GRASUB FOR FTIRE -->

{
'*******************************************************************************************************************************************************
'EVERYTHING BELOW IS THE HELP SECTION ON USING GRASUB. THIS IS NOT WRITTEN OUT TO THE SOLVER DECK  *
'*******************************************************************************************************************************************************
'Tire Graphic
'============

 '<Post_Graphic
     'id                  = "1"
    'type                = "UserGra"
     'ref_marker_id       = "11003020"
     'usrsub_param_string = "USER(1, 2, 11001, 40, 72, 0.2, 0.9)"
     'usrsub_dll_name     = "mbdtire"
     'usrsub_fnc_name     = "tiregra"
     'grasub_increment    = "1"
  '/>

    'GRASUB for TIRE
    '===============
   'reference_marker_id = 11003020 = gforce I marker id
    'branchId     = (int)par[0]; = not used
    'graType      = (int)par[1]; = 1 for inertial frame, 2 for rim fixed frame, 3 for tydex C-frame
    'tireId       = (int)par[2]; = 11001 tire GFOSUB id
    'uMax         = (int)par[3]; = 40 number of slices of the x-y cutting plane 
    'vMax         = (int)par[4]; = 72 number of circumferential wedges => 360 / 72 = 5 degrees per each wedge.
    'OPTIONAL PARAMS (Limits where the geometry is sliced)
    'wMin         = (int)par[5]; default = 0.2
    'wMax         = (int)par[6]; default = 0.8

    
'Road Graphic
'============

  '<Post_Graphic
     'id                  = "10"
     'type                = "UserGra"
     'ref_marker_id       = "11001010"
     'usrsub_param_string = "USER(2, 11001, 800, 800, 40, 40)"
     'usrsub_dll_name     = "mbdtire"
     'usrsub_fnc_name     = "roadgra"
     'grasub_increment    = "4"
  '/>

    'GRASUB for ROAD
    '===============
    'branchId     = (int)par[0]; = not used
    'tireId       = (int)par[1]; = 11001 tire GFORCE id
    'length       = (int)par[2]; = 800 dimension of the contact patch rectangle
    'width        = (int)par[3]; = 800 other dimension of the contact path road rectangle
    'length_grid  = (int)par[4]; = distance between consecutive nodes in along the length direction
    'width_grid   = (int)par[5]; = distance between consecutive geometry nodes along the width direction

'CP Forces
'=========

'Both moments and forces are captured here. The higher the moments at the CP the �fatter� the cylinder will appear. Note that this geometry can be shaded as it is an actual solid (as opposed to the regular HG arrows).

  '<Post_Graphic
     'id                  = "100"
     'type                = "UserGra"
     'ref_marker_id       = "11001010"
     'usrsub_param_string = "USER(3, 11001, 20, 0.001)"
     'usrsub_dll_name     = "mbdtire"
     'usrsub_fnc_name     = "grasub"
  '/>

    'GRASUB for CP FORCES
    '====================
    'branchId     = (int)par[0]; = not used
    'tireId       = (int)par[1]; = 11001 tire GFORCE id
    'npoints      = (int)par[2]; = 20 number of points defining the cylinder cross section (higher the number -> circle)
    'scale        = (int)par[5]; = scale factor that determines the length of the vector force

'*******************************************************************************************************************************************************
}
  *EndDefine()
  *DefineSystem( def_disk_brakes, TYPED, Brakes, , arg_j_front_wheel_spindle, arg_j_rear_wheel_spindle )
    *Attachment( arg_j_front_wheel_spindle, "Front Wheel Spindle", JointPair, "Select front wheel spindle joint", ,  )
    *Attachment( arg_j_rear_wheel_spindle, "Rear Wheel Spindle", JointPair, "Select rear wheel spindle joint", ,  )
    *DataSet( ds_brakes, "Brake System Information", def_ds_brakes )
    *SolverVariable( sv_front_brake_pressure, "Front Brake Line Pressure" )
    *SolverVariable( sv_rear_brake_pressure, "Rear Brake Line Pressure" )
    *SolverVariable( sv_forward_brake_bias, "Brake Bias (Frontwards)" )
    *SolverVariable( sv_brake_boost, "Brake Boost Ratio" )
    *SolverVariable( sv_brake_demand, "Driver Brake Demand" )
    *System( sys_front_disk_brake, "Front Brakes", def_sys_disk_brake, ds_brakes.int_sv_br_lin_pr_f_l
             , ds_brakes.int_sv_br_lin_pr_f_r, arg_j_front_wheel_spindle )
    *System( sys_rear_disk_brake, "Rear Brakes", def_sys_disk_brake, ds_brakes.int_sv_br_lin_pr_r_l
             , ds_brakes.int_sv_br_lin_pr_r_r, arg_j_rear_wheel_spindle )
    *System( sys_abs_esp, "Anti-lock Brake System (ABS)", def_sys_abs, sys_instrumentation.sv_veh_long_accel
             , sys_front_disk_brake.sv_wheel_w_l, sys_front_disk_brake.sv_wheel_w_r, sys_rear_disk_brake.sv_wheel_w_l, sys_rear_disk_brake.sv_wheel_w_r, sv_brake_demand
             , sv_front_brake_pressure, sv_rear_brake_pressure )
    *SetReal( ds_brakes.real_pedal_ratio,       3.5 )
    *SetReal( ds_brakes.real_front_mc_piston_area,       500 )
    *SetReal( ds_brakes.real_rea_mc_piston_area,       500 )
    *SetReal( ds_brakes.real_max_pedal_force,       500 )
    *SetReal( ds_brakes.real_brake_scaling_factor,       1 )
    *SetReal( ds_brakes.real_brake_boost_ratio,       1 )
    *SetInteger( ds_brakes.int_sv_br_lin_pr_f_l,       sys_abs_esp.sys_four_channel.label != "" ? ( sys_abs_esp.sys_four_channel.state == true ? sys_abs_esp.sys_four_channel.sv_brk_lin_out_pr_f_l.id : sv_front_brake_pressure.id ) : sv_front_brake_pressure.id )
    *SetInteger( ds_brakes.int_sv_br_lin_pr_f_r,       sys_abs_esp.sys_four_channel.label != "" ? ( sys_abs_esp.sys_four_channel.state == true ? sys_abs_esp.sys_four_channel.sv_brk_lin_out_pr_f_r.id : sv_front_brake_pressure.id ) : sv_front_brake_pressure.id )
    *SetInteger( ds_brakes.int_sv_br_lin_pr_r_l,       sys_abs_esp.sys_four_channel.label != "" ? ( sys_abs_esp.sys_four_channel.state == true ? sys_abs_esp.sys_four_channel.sv_brk_lin_out_pr_r_l.id : sv_rear_brake_pressure.id  ) : sv_rear_brake_pressure.id )
    *SetInteger( ds_brakes.int_sv_br_lin_pr_r_r,       sys_abs_esp.sys_four_channel.label != "" ? ( sys_abs_esp.sys_four_channel.state == true ? sys_abs_esp.sys_four_channel.sv_brk_lin_out_pr_r_r.id : sv_rear_brake_pressure.id  ) : sv_rear_brake_pressure.id )
    *SetSolverVariable( sv_forward_brake_bias,       LIN, 0.6, OFF )
    *SetSolverVariable( sv_front_brake_pressure,       EXPR, `VARVAL({sv_brake_demand.idstring})*VARVAL({sv_brake_boost.idstring})*{ds_brakes.real_pedal_ratio.value}*VARVAL({sv_forward_brake_bias.idstring})/{ds_brakes.real_front_mc_piston_area.value}*{ds_brakes.real_max_pedal_force.value}/{ds_brakes.real_brake_scaling_factor.value}`, OFF )
    *SetSolverVariable( sv_rear_brake_pressure,       EXPR, `VARVAL({sv_brake_demand.idstring})*VARVAL({sv_brake_boost.idstring})*{ds_brakes.real_pedal_ratio.value}*(1 - VARVAL({sv_forward_brake_bias.idstring}))/{ds_brakes.real_front_mc_piston_area.value}*{ds_brakes.real_max_pedal_force.value}/{ds_brakes.real_brake_scaling_factor.value}`, OFF )
    *SetSolverVariable( sv_brake_boost,             LIN, ds_brakes.real_brake_boost_ratio.value, OFF )
  *EndDefine()
  *DefineDataSet( def_ds_brakes )
    *Real( real_pedal_ratio, "Pedal Ratio", EDIT )
    *Real( real_front_mc_piston_area, "Front Master Cyl Piston Area", EDIT )
    *Real( real_rea_mc_piston_area, "Rear Master Cyl Piston Area", EDIT )
    *Real( real_max_pedal_force, "Maximum Pedal Force", EDIT )
    *Real( real_brake_scaling_factor, "Brake Demand Scaling Factor", EDIT )
    *Real( real_brake_boost_ratio, "Brake Boost ratio", EDIT )
    *Integer( int_sv_br_lin_pr_f_l, "Sol. Var. ID - Brake line pressure - Front-left", EDIT )
    *Integer( int_sv_br_lin_pr_f_r, "Sol. Var. ID - Brake line pressure - Front-right", EDIT )
    *Integer( int_sv_br_lin_pr_r_l, "Sol. Var. ID - Brake line pressure - Rear-left", EDIT )
    *Integer( int_sv_br_lin_pr_r_r, "Sol. Var. ID - Brake line pressure - Rear-right", EDIT )
  *EndDefine()
  *DefineSystem( def_sys_disk_brake, TYPED, Brake Type, , arg_sv_brake_line_pressure_l_id, arg_sv_brake_line_pressure_r_id, arg_j_wheel_spindle )
    *Attachment( arg_sv_brake_line_pressure_l_id, "Sol. Var. ID of Brake Line Pressure-left", IntegerData, "Select brake line pressure ID data", ,  )
    *Attachment( arg_sv_brake_line_pressure_r_id, "Sol. Var. ID of Brake Line Pressure-right", IntegerData, "Select brake line pressure ID data", ,  )
    *Attachment( arg_j_wheel_spindle, "Wheel Spindle", JointPair, "Select wheel spindle joint", ,  )
    *DataSet( ds_disk_brake, "Disk Brake Info", def_ds_disk_brake )
    *ActionReactionForcePair( frc_brake_torque, "Brake Torque", SC_ROT, arg_j_wheel_spindle.b1, arg_j_wheel_spindle.b2, arg_j_wheel_spindle.i.origin, VECTOR, arg_j_wheel_spindle.i.zaxis )
    *Output( o_brake_torque, {THIS.label + " - Brake Torque"}, EXPR, `{frc_brake_torque.l.t.expr}`, `{frc_brake_torque.r.t.expr}`, `0`, `0`, `0`, `0` )
    *SolverVariable( sv_wheel_w_l, {THIS.label + " - Wheel Omega-left" } )
    *SolverVariable( sv_wheel_w_r, {THIS.label + " - Wheel Omega-right"} )
    *SetSolverVariable( sv_wheel_w_l,               EXPR, `-WZ({arg_j_wheel_spindle.l.i.idstring}, {arg_j_wheel_spindle.l.j.idstring}, {arg_j_wheel_spindle.l.j.idstring})`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_wheel_w_r,               EXPR, `WZ({arg_j_wheel_spindle.r.i.idstring}, {arg_j_wheel_spindle.r.j.idstring}, {arg_j_wheel_spindle.r.j.idstring})`, OFF, 0.0, false, false )
    *SetForce( frc_brake_torque,         , EXPR, `-STEP5(WZ({arg_j_wheel_spindle.l.i.idstring}, {arg_j_wheel_spindle.l.j.idstring}, {arg_j_wheel_spindle.l.j.idstring}), -{ds_disk_brake.real_stiction_omega.value}, -1, {ds_disk_brake.real_stiction_omega.value}, 1)*VARVAL( {arg_sv_brake_line_pressure_l_id.value} )*{ds_disk_brake.real_left_piston_area.value}*{ds_disk_brake.real_left_pad_friction.value}*{ds_disk_brake.real_left_disk_radius.value}`
                                         , EXPR, `-STEP5(WZ({arg_j_wheel_spindle.r.i.idstring}, {arg_j_wheel_spindle.r.j.idstring}, {arg_j_wheel_spindle.r.j.idstring}), -{ds_disk_brake.real_stiction_omega.value}, -1, {ds_disk_brake.real_stiction_omega.value}, 1)*VARVAL( {arg_sv_brake_line_pressure_r_id.value} )*{ds_disk_brake.real_right_piston_area.value} * {ds_disk_brake.real_right_pad_friction.value}*{ds_disk_brake.real_right_disk_radius.value}` )
  *EndDefine()
  *DefineDataSet( def_ds_disk_brake )
    *Real( real_left_disk_radius, "Left disk Effective Radius", EDIT )
    *Real( real_right_disk_radius, "Right disk Effective Radius", EDIT )
    *Real( real_left_piston_area, "Left Piston Area", EDIT )
    *Real( real_right_piston_area, "Right Piston Area", EDIT )
    *Real( real_left_pad_friction, "Left Pad Coefficient of Friction", EDIT )
    *Real( real_right_pad_friction, "Right Pad Coefficient of Friction", EDIT )
    *Real( real_stiction_omega, "Stiction Omega", EDIT )
  *EndDefine()
  *DefineSystem( def_sys_abs, sv_veh_long_acc, sv_whl_omega_fl, sv_whl_omega_fr
           , sv_whl_omega_rl, sv_whl_omega_rr, sv_brake_demand, sv_brk_lin_pr_f, sv_brk_lin_pr_r )
    *Attachment( sv_veh_long_acc, "Vehicle Long. Acceleration", SolverVariable, "Vehicle Long. Acceleration", ,  )
    *Attachment( sv_whl_omega_fl, "Wheel Omega - Front-left", SolverVariable, "Wheel Omega - Front-left", ,  )
    *Attachment( sv_whl_omega_fr, "Wheel Omega - Front-right", SolverVariable, "Wheel Omega - Front-right", ,  )
    *Attachment( sv_whl_omega_rl, "Wheel Omega - Rear-left", SolverVariable, "Wheel Omega - Rear-left", ,  )
    *Attachment( sv_whl_omega_rr, "Wheel Omega - Rear-right", SolverVariable, "Wheel Omega - Rear-right", ,  )
    *Attachment( sv_brake_demand, "Driver Brake Demand", SolverVariable, "Driver Brake Demand", ,  )
    *Attachment( sv_brk_lin_pr_f, "Brake Line Pressure - Front", SolverVariable, "Brake Line Pressure - Front", ,  )
    *Attachment( sv_brk_lin_pr_r, "Brake Line Pressure - Rear", SolverVariable, "Brake Line Pressure - Rear", ,  )
    *System( sys_four_channel, "ABS - Four Channel", sys_def_abs_four_channel, sv_veh_long_acc
             , sv_whl_omega_fl, sv_whl_omega_fr, sv_whl_omega_rl, sv_whl_omega_rr, sv_brake_demand
             , sv_brk_lin_pr_f, sv_brk_lin_pr_r )
  *EndDefine()
  *DefineSystem( sys_def_abs_four_channel, sv_veh_long_acc, sv_whl_omega_fl, sv_whl_omega_fr
           , sv_whl_omega_rl, sv_whl_omega_rr, sv_brake_demand, sv_brk_lin_pr_f, sv_brk_lin_pr_r )
    *Attachment( sv_veh_long_acc, "Vehicle Long. Acceleration", SolverVariable, "Vehicle Long. Acceleration", ,  )
    *Attachment( sv_whl_omega_fl, "Wheel Omega - Front-left", SolverVariable, "Wheel Omega - Front-left", ,  )
    *Attachment( sv_whl_omega_fr, "Wheel Omega - Front-right", SolverVariable, "Wheel Omega - Front-right", ,  )
    *Attachment( sv_whl_omega_rl, "Wheel Omega - Rear-left", SolverVariable, "Wheel Omega - Rear-left", ,  )
    *Attachment( sv_whl_omega_rr, "Wheel Omega - Rear-right", SolverVariable, "Wheel Omega - Rear-right", ,  )
    *Attachment( sv_brake_demand, "Driver Brake Demand", SolverVariable, "Driver Brake Demand", ,  )
    *Attachment( sv_brk_lin_pr_f, "Brake Line Pressure - Front", SolverVariable, "Brake Line Pressure - Front", ,  )
    *Attachment( sv_brk_lin_pr_r, "Brake Line Pressure - Rear", SolverVariable, "Brake Line Pressure - Rear", ,  )
    *SolverVariable( sv_brk_lin_out_pr_f_l, "Modulated Brake Line Pressure - Front-left" )
    *SolverVariable( sv_brk_lin_out_pr_f_r, "Modulated Brake Line Pressure - Front-right" )
    *SolverVariable( sv_brk_lin_out_pr_r_l, "Modulated Brake Line Pressure - Rear-left" )
    *SolverVariable( sv_brk_lin_out_pr_r_r, "Modulated Brake Line Pressure - Rear-right" )
    *SolverVariable( sv_activation_signal, "ABS Activation Signal" )
    *SolverVariable( sv_est_veh_long_vel, "Vehicle Long. Vel. (Estimated)" )
    *Output( o_abs_inputs_whl_omega, "ABS - FMU Inputs - Wheel Omega", EXPR, `{sv_whl_omega_fl.VARVAL}`, `{sv_whl_omega_fr.VARVAL}`, `{sv_whl_omega_rl.VARVAL}`, `{sv_whl_omega_rr.VARVAL}`, `0`, `0` )
    *Output( o_abs_inputs_vh_long_acc, "ABS - FMU Inputs - Veh. Long. acc.", EXPR, `{sv_veh_long_acc.VARVAL}`, `0`, `0`, `0`, `0`, `0` )
    *Output( o_abs_inputs_pr, "ABS - FMU Inputs - Brake Line Pressure", EXPR, `{sv_brk_lin_pr_f.VARVAL}`, `{sv_brk_lin_pr_r.VARVAL}`, `0`, `0`, `0`, `0` )
    *Output( o_abs_outputs_pr, "ABS - FMU Outputs - Brake Line Pressure", EXPR, `{sv_brk_lin_out_pr_f_l.VARVAL}`, `{sv_brk_lin_out_pr_f_r.VARVAL}`, `{sv_brk_lin_out_pr_r_l.VARVAL}`, `{sv_brk_lin_out_pr_r_r.VARVAL}`, `0`, `0` )
    *Output( o_abs_act_sig_est_long_vel, "ABS - FMU Outputs - Activation Signal and Estimated Long. Vel.", EXPR, `{sv_activation_signal.VARVAL}`, `{sv_est_veh_long_vel.VARVAL}`, `0`, `0`, `0`, `0` )
    *FMU( fmu_abs, "ABS FMU", { getenv("ALTAIR_HOME") + "/hw/mdl/mdllib/Common/FMU_Library/ABS/FMU_source/FMUs/" + sysarch() + "/abs.fmu" } )
    *SetSolverVariable( sv_brk_lin_out_pr_f_l,       EXPR, `{fmu_abs.y_array.output_1}`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_brk_lin_out_pr_f_r,       EXPR, `{fmu_abs.y_array.output_2}`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_brk_lin_out_pr_r_l,       EXPR, `{fmu_abs.y_array.output_3}`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_brk_lin_out_pr_r_r,       EXPR, `{fmu_abs.y_array.output_4}`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_activation_signal,       EXPR, `{fmu_abs.y_array.output_5}`, OFF, 0.0, false, false )
    *SetSolverVariable( sv_est_veh_long_vel,        EXPR, `{fmu_abs.y_array.output_6}`, OFF, 0.0, false, false )
    *Set( o_abs_inputs_whl_omega.use_units, true )
    *Set( o_abs_inputs_whl_omega.cnames, {"", "Front-left", "Front-right", "Rear-left", "", "Rear-right", "", "" } )
    *Set( o_abs_inputs_whl_omega.cunits, {"", "rad/s", "rad/s", "rad/s", "", "rad/s", "", "" } )
    *Set( o_abs_inputs_vh_long_acc.use_units, true )
    *Set( o_abs_inputs_vh_long_acc.cnames, {"", "Long. acc.", "", "", "", "", "", "" } )
    *Set( o_abs_inputs_vh_long_acc.cunits, {"", "mm/s^2", "", "", "", "", "", "" } )
    *Set( o_abs_inputs_pr.use_units, true )
    *Set( o_abs_inputs_pr.cnames, {"", "Front", "Rear", "", "", "", "", "" } )
    *Set( o_abs_inputs_pr.cunits, {"", "N/mm^2", "N/mm^2", "", "", "", "", "" } )
    *Set( o_abs_outputs_pr.use_units, true )
    *Set( o_abs_outputs_pr.cnames, {"", "Front-left", "Front-right", "Rear-left", "", "Rear-right", "", "" } )
    *Set( o_abs_outputs_pr.cunits, {"", "N/mm^2", "N/mm^2", "N/mm^2", "", "N/mm^2", "", "" } )
    *Set( o_abs_act_sig_est_long_vel.use_units, true )
    *Set( o_abs_act_sig_est_long_vel.cnames, {"", "Activation signal", "Est. veh. long. velocity", "", "", "", "", "" } )
    *Set( o_abs_act_sig_est_long_vel.cunits, {"", "[0-1]", "mm/s", "", "", "", "", "" } )
    *SetFMUInputs( fmu_abs,                    { "FL_omega_rad_s;`{sv_whl_omega_fl.VARVAL}`", "FR_omega_rad_s;`{sv_whl_omega_fr.VARVAL}`", "RL_omega_rad_s;`{sv_whl_omega_rl.VARVAL}`", "RR_omega_rad_s;`{sv_whl_omega_rr.VARVAL}`", "Vehicle_Long_Accel_mm_s2;`{sv_veh_long_acc.VARVAL}`", "Brake_Pedal_signal;`{sv_brake_demand.VARVAL}`", "Front _Master_Cylinder_bar;`{sv_brk_lin_pr_f.VARVAL}`", "Rear_Master_Cylinder_bar;`{sv_brk_lin_pr_r.VARVAL}`" } )
  *EndDefine()
  *DefineSystem( sysdef_fwd, b_wheel, p_wc, b_diff_mt
           , ds_wheelalign )
    *Attachment( b_wheel, "Wheel Body", BodyPair, "Wheel body", ,  )
    *Attachment( p_wc, "Wheel Center", PointPair, "Wheel center", ,  )
    *Attachment( b_diff_mt, "Diff mount body", Body, "Differential mount body", ,  )
    *Attachment( ds_wheelalign, "Wheel alignment", DataSet, "Wheel alignment dataset", ,  )
    *PointPair( p_half_cg, "Halfshaft cg" )
    *PointPair( p_outer_cv, "Halfshaft Outer CV Joint" )
    *Point( p_diff_cg, "Differential cg" )
    *Point( p_diff_mount, "Differential to Trans Mount" )
    *PointPair( p_output_cg, "Output Shaft cg" )
    *PointPair( p_output_diff, "Output Shaft to Diff." )
    *PointPair( p_inner_cv, "Inner CV Joint" )
    *BodyPair( b_half_plunge, "Halfshaft Plunge Body", p_inner_cv, , , ,  )
    *BodyPair( b_halfshaft, "Halfshaft", p_half_cg, , , ,  )
    *Body( b_diff, "Differential", p_diff_cg, , , ,  )
    *BodyPair( b_out_shaft, "Output Shaft", p_output_cg, , , ,  )
    *RevJoint( j_carrier, "Carrier to Case", b_diff_mt, b_diff, p_diff_mount, POINT, p_inner_cv.l )
    *RevJointPair( j_output_shaft, "Output Shaft to Carrier", b_out_shaft, b_diff, p_output_diff, POINT, p_inner_cv )
    *TransJointPair( j_plunge, "Plunge to Output Shaft", b_out_shaft, b_half_plunge, p_inner_cv, POINT, p_output_diff )
    *CVJointPair( j_cv_inner, "CV Inner", b_half_plunge, b_halfshaft, p_inner_cv, POINT, p_output_diff, POINT, p_outer_cv )
    *CVJointPair( j_cv_outer, "CV Outer", b_wheel, b_halfshaft, p_outer_cv, POINT, p_wc, POINT, p_inner_cv )
    *Coupler( c_output_shafts_carrier, "Output Shafts to Carrier (spider gears)", 2JOINT, j_output_shaft.l, j_output_shaft.r, TRANS, TRANS )
    *Graphic( g_diff_tube, "Diff tube", CYLINDER, b_diff, p_output_diff.l, POINT, p_output_diff.r, 50.8, g_diff_tube.r1, , 0.0, CAPNONE, 3 )
    *Graphic( g_diff_cap1, "Diff end cap 1", CYLINDER, b_diff, p_output_diff.l, POINT, p_output_diff.r, 12.7, 50.8, 1, -1, CAPNONE, 3 )
    *Graphic( g_diff_cap2, "Diff end cap 2", CYLINDER, b_diff, p_output_diff.r, POINT, p_output_diff.l, 12.7, 50.8, 1, -1, CAPNONE, 3 )
    *Graphic( g_ring_gr, "Ring gear", CYLINDER, b_diff, p_diff_mount, POINT, p_output_diff.r, 76.2, 76.2, 25.4, -12.7, CAPBOTH, 3 )
    *GraphicPair( g_out_shaft, "Output shaft", CYLINDER, b_out_shaft, p_output_diff, POINT, p_inner_cv, 12.7, g_out_shaft.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_inner_cv, "Inner CV joint", CYLINDER, j_plunge.b1, p_inner_cv, POINT, p_output_diff, 25.4, 25.4, 75, -37.5, CAPEND, 3 )
    *GraphicPair( g_halfshaft, "Halfshaft", CYLINDER, b_halfshaft, p_inner_cv, POINT, p_outer_cv, 12.7, g_halfshaft.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_outer_cv_hs, "Outer CV on halfshaft", CYLINDER, b_halfshaft, p_outer_cv, POINT, p_inner_cv, 25.4, 12.7, 38.1, 0, CAPNONE, 3 )
    *GraphicPair( g_hs_wheel, "Halfshaft at wheel", CYLINDER, b_wheel, p_outer_cv, POINT, p_wc, 12.7, g_hs_wheel.r1, , 0.0, CAPNONE, 3 )
    *GraphicPair( g_outer_cv_wh, "Outer CV on wheel", CYLINDER, b_wheel, p_outer_cv, POINT, p_wc, 25.4, 12.7, 38.1, 0, CAPNONE, 3 )
    *DataSet( ds_axle, "Axle Data", def_ds_axle )
    *SetPoint( p_half_cg,                , (p_inner_cv.l.x+p_outer_cv.l.x)/2, (p_inner_cv.l.y+p_outer_cv.l.y)/2, (p_inner_cv.l.z+p_outer_cv.l.z)/2
                                         , (p_inner_cv.r.x+p_outer_cv.r.x)/2, (p_inner_cv.r.y+p_outer_cv.r.y)/2, (p_inner_cv.r.z+p_outer_cv.r.z)/2 )
    *SetPoint( p_outer_cv,           LEFT, p_wc.l.x + ds_axle.cv_joint_offset.value*COS(ds_wheelalign.camb.value*PI/180)*SIN(ds_wheelalign.toe.value*PI/180), p_wc.l.y + ds_axle.cv_joint_offset.value*COS(ds_wheelalign.camb.value*PI/180)*COS(ds_wheelalign.toe.value*PI/180), p_wc.l.z + ds_axle.cv_joint_offset.value*SIN(ds_wheelalign.camb.value*PI/180) )
    *SetPoint( p_diff_cg,                  1000, -175, 1060 )
    *SetPoint( p_diff_mount,               1000, -231.5, 1060 )
    *SetPoint( p_output_diff,            , 1000, -231.5, 1060
                                         , 1000, -118.5, 1060 )
    *SetPoint( p_inner_cv,               , 1000, -300.0, 1060
                                         , 1000, 100.0, 1060 )
    *SetPoint( p_output_cg,              , 1000, -288, 1060
                                         , 1000, -62, 1060 )
    *SetBodyInertia( b_half_plunge,        LEFT, 1.5, 2500, 2500, 280, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_halfshaft,          LEFT, 3.5, 3.7e4, 3.7e4, 700, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_out_shaft,          LEFT, 1.5, 2500, 2500, 280, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetBodyInertia( b_diff,                     8.5, 13800, 13800, 20700, 0.000e+00, 0.000e+00, 0.000e+00 )
    *SetOrientation( b_half_plunge.cm.l,         ONEAXIS, Z, POINT, p_inner_cv.r )
    *SetOrientation( b_half_plunge.cm.r,         ONEAXIS, Z, POINT, p_inner_cv.l )
    *SetOrientation( b_halfshaft.cm.l,           ONEAXIS, Z, POINT, p_inner_cv.l )
    *SetOrientation( b_halfshaft.cm.r,           ONEAXIS, Z, POINT, p_inner_cv.r )
    *SetOrientation( b_out_shaft.cm.l,           ONEAXIS, Z, POINT, p_inner_cv.r )
    *SetOrientation( b_out_shaft.cm.r,           ONEAXIS, Z, POINT, p_inner_cv.l )
    *SetOrientation( b_diff.cm,                  ONEAXIS, Z, POINT, p_inner_cv.r )
    *SetReal( ds_axle.cv_joint_offset,       40 )
    *SetCoupler( c_output_shafts_carrier,       -1 )
  *EndDefine()
  *DefineDataSet( def_ds_axle )
    *Real( cv_joint_offset, "CV Joint Offset from Wheel center", EDIT )
  *EndDefine()

  *BeginContext( sys_body )
    *SetBodyInertia( b_body,                     1031.47, 2.67e8, 1.162e9, 1.106e9 )
    *SetPoint( p_body_cg,                  2635 )
    *SetState( g_veh_glass,                true )
    *SetState( g_veh_shell,                true )
    *SetState( g_veh_lights,               true )
  *EndContext()

  *BeginContext( sys_frnt_susp )
    *SetState( tire,                       false )
    *SetState( g_tire_rot,                 false )

    *BeginContext( sys_frnt_strut )
      *SetCoilSpring( cspr,                 LEFT, LIN, 16.92, LIN, , 3394 )
      *SetState( dmp,                        false )

      *BeginContext( ts_AutoDamper_front )
        *SetOption( op_outputToggle,            "On" )
      *EndContext()
    *EndContext()
  *EndContext()

  *BeginContext( sys_steering )
    *SetPoint( p_itrb,               LEFT, , , 985 )
  *EndContext()

  *BeginContext( sys_rear_susp )
    *SetState( tire,                       false )
    *SetState( g_tire_rot,                 false )

    *BeginContext( sys_rear_strut )
      *SetCoilSpring( cspr,                 LEFT, LIN, 27.12, LIN, , 3308.5 )
      *SetState( dmp,                        false )

      *BeginContext( ts_AutoDamper_rear )
        *SetOption( op_outputToggle,            "On" )
      *EndContext()
    *EndContext()
  *EndContext()

  *BeginContext( sys_tires )
    *SetState( tpl_tires_xml,              false )
    *SetState( gf_tire_frc_frnt_ms,        false )
    *SetState( gf_tire_frc_rear_ms,        false )
    *SetState( o_ms_rolling_states_left_frnt,       false )
    *SetState( o_ms_kinematics_left_frnt,       false )
    *SetState( o_ms_cp_forces_left_frnt,       false )
    *SetState( o_ms_cp_forces_sae_left_frnt,       false )
    *SetState( o_ms_kinematics_sae_left_frnt,       false )
    *SetState( o_ms_hub_forces_left_frnt,       false )
    *SetState( o_ms_cp_location_left_frnt,       false )
    *SetState( o_ms_hub_velocity_left_frnt,       false )
    *SetState( o_ms_rolling_states_right_frnt,       false )
    *SetState( o_ms_kinematics_right_frnt,       false )
    *SetState( o_ms_cp_forces_right_frnt,       false )
    *SetState( o_ms_cp_forces_sae_right_frnt,       false )
    *SetState( o_ms_kinematics_sae_right_frnt,       false )
    *SetState( o_ms_hub_forces_right_frnt,       false )
    *SetState( o_ms_cp_location_right_frnt,       false )
    *SetState( o_ms_hub_velocity_right_frnt,       false )
    *SetState( o_ms_rolling_states_left_rear,       false )
    *SetState( o_ms_kinematics_left_rear,       false )
    *SetState( o_ms_cp_forces_left_rear,       false )
    *SetState( o_ms_cp_forces_sae_left_rear,       false )
    *SetState( o_ms_kinematics_sae_left_rear,       false )
    *SetState( o_ms_hub_forces_left_rear,       false )
    *SetState( o_ms_cp_location_left_rear,       false )
    *SetState( o_ms_hub_velocity_left_rear,       false )
    *SetState( o_ms_rolling_states_right_rear,       false )
    *SetState( o_ms_kinematics_right_rear,       false )
    *SetState( o_ms_cp_forces_right_rear,       false )
    *SetState( o_ms_cp_forces_sae_right_rear,       false )
    *SetState( o_ms_kinematics_sae_right_rear,       false )
    *SetState( o_ms_hub_forces_right_rear,       false )
    *SetState( o_ms_cp_location_right_rear,       false )
    *SetState( o_ms_hub_velocity_right_rear,       false )
    *SetSolverArray( sa_event_flag,              VALUE, 1
, 0.0 )
    *SetState( sa_event_flag,              false )
    *SetSolverArray( ar_front_lt_ms,             VALUE, 7
, 0.0, 18.0, 0.0, 318009.0, 318001.0, 318011.0, 318005.0 )
    *SetState( ar_front_lt_ms,             false )
    *SetSolverArray( ar_front_rt_ms,             VALUE, 7
, 0.0, 18.0, 1.0, 318009.0, 318002.0, 318011.0, 318006.0 )
    *SetState( ar_front_rt_ms,             false )
    *SetSolverArray( ar_rear_lt_ms,              VALUE, 7
, 0.0, 18.0, 0.0, 318010.0, 318003.0, 318011.0, 318007.0 )
    *SetState( ar_rear_lt_ms,              false )
    *SetSolverArray( ar_rear_rt_ms,              VALUE, 7
, 0.0, 18.0, 1.0, 318010.0, 318004.0, 318011.0, 318008.0 )
    *SetState( ar_rear_rt_ms,              false )
    *SetState( st_tpf_left_frnt,           false )
    *SetState( st_tpf_right_frnt,          false )
    *SetState( st_tpf_left_rear,           false )
    *SetState( st_tpf_right_rear,          false )
    *SetState( st_rpf_left_frnt,           false )
    *SetState( st_rpf_right_frnt,          false )
    *SetState( st_rpf_left_rear,           false )
    *SetState( st_rpf_right_rear,          false )
    *SetState( st_role_frnt,               false )
    *SetState( st_role_rear,               false )
    *SetState( st_simulation,              false )
    *SetState( st_contact,                 false )
    *SetState( ss_frc_frnt,                false )
    *SetState( ss_frc_rear,                false )
    *SetOrientation( m_road_ref_frnt,          , TWOAXES, ZX, DXDYDZ, 0.0, 0.0, 1.0, DXDYDZ, 1.0, 0.0, 0.0
                                               , TWOAXES, ZX, VECTOR, m_road_ref_frnt.l.zaxis, VECTOR, m_road_ref_frnt.l.xaxis )
    *SetOrientation( m_road_ref_rear,          , TWOAXES, ZX, VECTOR, m_road_ref_frnt.l.zaxis, VECTOR, m_road_ref_frnt.l.xaxis
                                               , TWOAXES, ZX, VECTOR, m_road_ref_frnt.l.zaxis, VECTOR, m_road_ref_frnt.l.xaxis )

    *BeginContext( ts_front )

      *BeginContext( sys_tire_left )
        *SetFileName( ds_tire_properties.t_propertyFile,       { getenv("ALTAIR_HOME") + "/hw/mdl/autoentities/properties/Tires/MF_SWIFT/TNO_car205_60R15.tir"} )
        *SetReal( ds_tire_properties.unloaded_radius,       313.5 )
        *SetReal( ds_tire_properties.aspect_ratio,       0.6 )
        *SetOption( ds_tire_properties.opt_TireType,       "TNO" )
        *SetFileName( ds_tire_properties.r_propertyFile,       { getenv("ALTAIR_HOME") + "/hw/mdl/autoentities/properties/Tires/MF_SWIFT/TNO_FlatRoad.rdf"} )
        *SetString( ds_tire_properties.st_roadType,       `2D-FLAT` )

        *BeginContext( sys_varsub )
          *SetSolverVariable( sv_long_slip,               EXPR, , OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_long_slip,               true )
          *SetLocalUserFunction( sv_long_slip,               "mbdtire" )
          *SetSolverVariable( sv_long_slip,               USER, `USER(167, {arg_gforce.idstring}, 1)`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_slip_angle,              true )
          *SetLocalUserFunction( sv_slip_angle,              "mbdtire" )
          *SetSolverVariable( sv_slip_angle,              USER, `USER(167, {arg_gforce.idstring}, 2 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_camber_angle,            true )
          *SetLocalUserFunction( sv_camber_angle,            "mbdtire" )
          *SetSolverVariable( sv_camber_angle,            USER, `USER(167, {arg_gforce.idstring}, 3 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_force_x,              true )
          *SetSolverVariable( sv_cp_force_x,              USER, `USER(167, {arg_gforce.idstring}, 4 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_force_x,              "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_force_y,              true )
          *SetLocalUserFunction( sv_cp_force_y,              "mbdtire" )
          *SetSolverVariable( sv_cp_force_y,              USER, `USER(167, {arg_gforce.idstring}, 5 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_force_z,              true )
          *SetLocalUserFunction( sv_cp_force_z,              "mbdtire" )
          *SetSolverVariable( sv_cp_force_z,              USER, `USER(167, {arg_gforce.idstring}, 6 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_x,             true )
          *SetLocalUserFunction( sv_cp_moment_x,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_x,             USER, `USER(167, {arg_gforce.idstring}, 7 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_y,             true )
          *SetLocalUserFunction( sv_cp_moment_y,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_y,             USER, `USER(167, {arg_gforce.idstring}, 8 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_z,             true )
          *SetLocalUserFunction( sv_cp_moment_z,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_z,             USER, `USER(167, {arg_gforce.idstring}, 9 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_ang_vel,             true )
          *SetLocalUserFunction( sv_rim_ang_vel,             "mbdtire" )
          *SetSolverVariable( sv_rim_ang_vel,             USER, `USER(167, {arg_gforce.idstring}, 10 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_long_vel,            true )
          *SetLocalUserFunction( sv_rim_long_vel,            "mbdtire" )
          *SetSolverVariable( sv_rim_long_vel,            USER, `USER(167, {arg_gforce.idstring}, 11 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_vert_vel,            true )
          *SetLocalUserFunction( sv_rim_vert_vel,            "mbdtire" )
          *SetSolverVariable( sv_rim_vert_vel,            USER, `USER(167, {arg_gforce.idstring}, 12 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_roll_rad,                true )
          *SetSolverVariable( sv_roll_rad,                USER, `USER(167, {arg_gforce.idstring}, 13 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_roll_rad,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_x,                true )
          *SetSolverVariable( sv_cp_loc_x,                USER, `USER(167, {arg_gforce.idstring}, 14 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_loc_x,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_y,                true )
          *SetSolverVariable( sv_cp_loc_y,                USER, `USER(167, {arg_gforce.idstring}, 15 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_loc_y,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_z,                true )
          *SetLocalUserFunction( sv_cp_loc_z,                "mbdtire" )
          *SetSolverVariable( sv_cp_loc_z,                USER, `USER(167, {arg_gforce.idstring}, 16 )`, OFF, 0.0, false, false )
        *EndContext()
      *EndContext()

      *BeginContext( sys_tire_right )
        *SetFileName( ds_tire_properties.t_propertyFile,       { getenv("ALTAIR_HOME") + "/hw/mdl/autoentities/properties/Tires/MF_SWIFT/TNO_car205_60R15.tir"} )
        *SetReal( ds_tire_properties.unloaded_radius,       313.5 )
        *SetReal( ds_tire_properties.aspect_ratio,       0.6 )
        *SetOption( ds_tire_properties.opt_TireType,       "TNO" )
        *SetFileName( ds_tire_properties.r_propertyFile,       { getenv("ALTAIR_HOME") + "/hw/mdl/autoentities/properties/Tires/MF_SWIFT/TNO_FlatRoad.rdf"} )
        *SetString( ds_tire_properties.st_roadType,       `2D-FLAT` )

        *BeginContext( sys_varsub )
          *SetSolverVariable( sv_long_slip,               EXPR, , OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_long_slip,               true )
          *SetLocalUserFunction( sv_long_slip,               "mbdtire" )
          *SetSolverVariable( sv_long_slip,               USER, `USER(167, {arg_gforce.idstring}, 1)`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_slip_angle,              true )
          *SetLocalUserFunction( sv_slip_angle,              "mbdtire" )
          *SetSolverVariable( sv_slip_angle,              USER, `USER(167, {arg_gforce.idstring}, 2 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_camber_angle,            true )
          *SetLocalUserFunction( sv_camber_angle,            "mbdtire" )
          *SetSolverVariable( sv_camber_angle,            USER, `USER(167, {arg_gforce.idstring}, 3 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_force_x,              true )
          *SetSolverVariable( sv_cp_force_x,              USER, `USER(167, {arg_gforce.idstring}, 4 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_force_x,              "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_force_y,              true )
          *SetLocalUserFunction( sv_cp_force_y,              "mbdtire" )
          *SetSolverVariable( sv_cp_force_y,              USER, `USER(167, {arg_gforce.idstring}, 5 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_force_z,              true )
          *SetLocalUserFunction( sv_cp_force_z,              "mbdtire" )
          *SetSolverVariable( sv_cp_force_z,              USER, `USER(167, {arg_gforce.idstring}, 6 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_x,             true )
          *SetLocalUserFunction( sv_cp_moment_x,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_x,             USER, `USER(167, {arg_gforce.idstring}, 7 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_y,             true )
          *SetLocalUserFunction( sv_cp_moment_y,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_y,             USER, `USER(167, {arg_gforce.idstring}, 8 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_z,             true )
          *SetLocalUserFunction( sv_cp_moment_z,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_z,             USER, `USER(167, {arg_gforce.idstring}, 9 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_ang_vel,             true )
          *SetLocalUserFunction( sv_rim_ang_vel,             "mbdtire" )
          *SetSolverVariable( sv_rim_ang_vel,             USER, `USER(167, {arg_gforce.idstring}, 10 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_long_vel,            true )
          *SetLocalUserFunction( sv_rim_long_vel,            "mbdtire" )
          *SetSolverVariable( sv_rim_long_vel,            USER, `USER(167, {arg_gforce.idstring}, 11 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_vert_vel,            true )
          *SetLocalUserFunction( sv_rim_vert_vel,            "mbdtire" )
          *SetSolverVariable( sv_rim_vert_vel,            USER, `USER(167, {arg_gforce.idstring}, 12 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_roll_rad,                true )
          *SetSolverVariable( sv_roll_rad,                USER, `USER(167, {arg_gforce.idstring}, 13 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_roll_rad,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_x,                true )
          *SetSolverVariable( sv_cp_loc_x,                USER, `USER(167, {arg_gforce.idstring}, 14 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_loc_x,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_y,                true )
          *SetSolverVariable( sv_cp_loc_y,                USER, `USER(167, {arg_gforce.idstring}, 15 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_loc_y,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_z,                true )
          *SetLocalUserFunction( sv_cp_loc_z,                "mbdtire" )
          *SetSolverVariable( sv_cp_loc_z,                USER, `USER(167, {arg_gforce.idstring}, 16 )`, OFF, 0.0, false, false )
        *EndContext()
      *EndContext()
    *EndContext()

    *BeginContext( ts_rear )

      *BeginContext( sys_tire_left )
        *SetFileName( ds_tire_properties.t_propertyFile,       { getenv("ALTAIR_HOME") + "/hw/mdl/autoentities/properties/Tires/MF_SWIFT/TNO_car205_60R15.tir"} )
        *SetReal( ds_tire_properties.unloaded_radius,       313.5 )
        *SetReal( ds_tire_properties.aspect_ratio,       0.6 )
        *SetOption( ds_tire_properties.opt_TireType,       "TNO" )
        *SetFileName( ds_tire_properties.r_propertyFile,       { getenv("ALTAIR_HOME") + "/hw/mdl/autoentities/properties/Tires/MF_SWIFT/TNO_FlatRoad.rdf"} )
        *SetString( ds_tire_properties.st_roadType,       `2D-FLAT` )

        *BeginContext( sys_varsub )
          *SetSolverVariable( sv_long_slip,               EXPR, , OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_long_slip,               true )
          *SetLocalUserFunction( sv_long_slip,               "mbdtire" )
          *SetSolverVariable( sv_long_slip,               USER, `USER(167, {arg_gforce.idstring}, 1)`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_slip_angle,              true )
          *SetLocalUserFunction( sv_slip_angle,              "mbdtire" )
          *SetSolverVariable( sv_slip_angle,              USER, `USER(167, {arg_gforce.idstring}, 2 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_camber_angle,            true )
          *SetLocalUserFunction( sv_camber_angle,            "mbdtire" )
          *SetSolverVariable( sv_camber_angle,            USER, `USER(167, {arg_gforce.idstring}, 3 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_force_x,              true )
          *SetSolverVariable( sv_cp_force_x,              USER, `USER(167, {arg_gforce.idstring}, 4 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_force_x,              "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_force_y,              true )
          *SetLocalUserFunction( sv_cp_force_y,              "mbdtire" )
          *SetSolverVariable( sv_cp_force_y,              USER, `USER(167, {arg_gforce.idstring}, 5 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_force_z,              true )
          *SetLocalUserFunction( sv_cp_force_z,              "mbdtire" )
          *SetSolverVariable( sv_cp_force_z,              USER, `USER(167, {arg_gforce.idstring}, 6 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_x,             true )
          *SetLocalUserFunction( sv_cp_moment_x,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_x,             USER, `USER(167, {arg_gforce.idstring}, 7 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_y,             true )
          *SetLocalUserFunction( sv_cp_moment_y,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_y,             USER, `USER(167, {arg_gforce.idstring}, 8 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_z,             true )
          *SetLocalUserFunction( sv_cp_moment_z,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_z,             USER, `USER(167, {arg_gforce.idstring}, 9 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_ang_vel,             true )
          *SetLocalUserFunction( sv_rim_ang_vel,             "mbdtire" )
          *SetSolverVariable( sv_rim_ang_vel,             USER, `USER(167, {arg_gforce.idstring}, 10 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_long_vel,            true )
          *SetLocalUserFunction( sv_rim_long_vel,            "mbdtire" )
          *SetSolverVariable( sv_rim_long_vel,            USER, `USER(167, {arg_gforce.idstring}, 11 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_vert_vel,            true )
          *SetLocalUserFunction( sv_rim_vert_vel,            "mbdtire" )
          *SetSolverVariable( sv_rim_vert_vel,            USER, `USER(167, {arg_gforce.idstring}, 12 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_roll_rad,                true )
          *SetSolverVariable( sv_roll_rad,                USER, `USER(167, {arg_gforce.idstring}, 13 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_roll_rad,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_x,                true )
          *SetSolverVariable( sv_cp_loc_x,                USER, `USER(167, {arg_gforce.idstring}, 14 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_loc_x,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_y,                true )
          *SetSolverVariable( sv_cp_loc_y,                USER, `USER(167, {arg_gforce.idstring}, 15 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_loc_y,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_z,                true )
          *SetLocalUserFunction( sv_cp_loc_z,                "mbdtire" )
          *SetSolverVariable( sv_cp_loc_z,                USER, `USER(167, {arg_gforce.idstring}, 16 )`, OFF, 0.0, false, false )
        *EndContext()
      *EndContext()

      *BeginContext( sys_tire_right )
        *SetFileName( ds_tire_properties.t_propertyFile,       { getenv("ALTAIR_HOME") + "/hw/mdl/autoentities/properties/Tires/MF_SWIFT/TNO_car205_60R15.tir"} )
        *SetReal( ds_tire_properties.unloaded_radius,       313.5 )
        *SetReal( ds_tire_properties.aspect_ratio,       0.6 )
        *SetOption( ds_tire_properties.opt_TireType,       "TNO" )
        *SetFileName( ds_tire_properties.r_propertyFile,       { getenv("ALTAIR_HOME") + "/hw/mdl/autoentities/properties/Tires/MF_SWIFT/TNO_FlatRoad.rdf"} )
        *SetString( ds_tire_properties.st_roadType,       `2D-FLAT` )

        *BeginContext( sys_varsub )
          *SetSolverVariable( sv_long_slip,               EXPR, , OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_long_slip,               true )
          *SetLocalUserFunction( sv_long_slip,               "mbdtire" )
          *SetSolverVariable( sv_long_slip,               USER, `USER(167, {arg_gforce.idstring}, 1)`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_slip_angle,              true )
          *SetLocalUserFunction( sv_slip_angle,              "mbdtire" )
          *SetSolverVariable( sv_slip_angle,              USER, `USER(167, {arg_gforce.idstring}, 2 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_camber_angle,            true )
          *SetLocalUserFunction( sv_camber_angle,            "mbdtire" )
          *SetSolverVariable( sv_camber_angle,            USER, `USER(167, {arg_gforce.idstring}, 3 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_force_x,              true )
          *SetSolverVariable( sv_cp_force_x,              USER, `USER(167, {arg_gforce.idstring}, 4 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_force_x,              "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_force_y,              true )
          *SetLocalUserFunction( sv_cp_force_y,              "mbdtire" )
          *SetSolverVariable( sv_cp_force_y,              USER, `USER(167, {arg_gforce.idstring}, 5 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_force_z,              true )
          *SetLocalUserFunction( sv_cp_force_z,              "mbdtire" )
          *SetSolverVariable( sv_cp_force_z,              USER, `USER(167, {arg_gforce.idstring}, 6 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_x,             true )
          *SetLocalUserFunction( sv_cp_moment_x,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_x,             USER, `USER(167, {arg_gforce.idstring}, 7 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_y,             true )
          *SetLocalUserFunction( sv_cp_moment_y,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_y,             USER, `USER(167, {arg_gforce.idstring}, 8 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_cp_moment_z,             true )
          *SetLocalUserFunction( sv_cp_moment_z,             "mbdtire" )
          *SetSolverVariable( sv_cp_moment_z,             USER, `USER(167, {arg_gforce.idstring}, 9 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_ang_vel,             true )
          *SetLocalUserFunction( sv_rim_ang_vel,             "mbdtire" )
          *SetSolverVariable( sv_rim_ang_vel,             USER, `USER(167, {arg_gforce.idstring}, 10 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_long_vel,            true )
          *SetLocalUserFunction( sv_rim_long_vel,            "mbdtire" )
          *SetSolverVariable( sv_rim_long_vel,            USER, `USER(167, {arg_gforce.idstring}, 11 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_rim_vert_vel,            true )
          *SetLocalUserFunction( sv_rim_vert_vel,            "mbdtire" )
          *SetSolverVariable( sv_rim_vert_vel,            USER, `USER(167, {arg_gforce.idstring}, 12 )`, OFF, 0.0, false, false )
          *SetLocalUserDLLFlag( sv_roll_rad,                true )
          *SetSolverVariable( sv_roll_rad,                USER, `USER(167, {arg_gforce.idstring}, 13 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_roll_rad,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_x,                true )
          *SetSolverVariable( sv_cp_loc_x,                USER, `USER(167, {arg_gforce.idstring}, 14 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_loc_x,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_y,                true )
          *SetSolverVariable( sv_cp_loc_y,                USER, `USER(167, {arg_gforce.idstring}, 15 )`, OFF, 0.0, false, false )
          *SetLocalUserFunction( sv_cp_loc_y,                "mbdtire" )
          *SetLocalUserDLLFlag( sv_cp_loc_z,                true )
          *SetLocalUserFunction( sv_cp_loc_z,                "mbdtire" )
          *SetSolverVariable( sv_cp_loc_z,                USER, `USER(167, {arg_gforce.idstring}, 16 )`, OFF, 0.0, false, false )
        *EndContext()
      *EndContext()
    *EndContext()
  *EndContext()

  *BeginContext( sys_brakes )

    *BeginContext( sys_front_disk_brake )
      *SetReal( ds_disk_brake.real_left_disk_radius,       275 )
      *SetReal( ds_disk_brake.real_right_disk_radius,       ds_disk_brake.real_left_disk_radius.value )
      *SetReal( ds_disk_brake.real_left_piston_area,       10000 )
      *SetReal( ds_disk_brake.real_left_pad_friction,       0.32 )
      *SetReal( ds_disk_brake.real_right_piston_area,       ds_disk_brake.real_left_piston_area.value )
      *SetReal( ds_disk_brake.real_right_pad_friction,       ds_disk_brake.real_left_pad_friction.value )
      *SetReal( ds_disk_brake.real_stiction_omega,       0.001 )
    *EndContext()

    *BeginContext( sys_rear_disk_brake )
      *SetReal( ds_disk_brake.real_left_disk_radius,       260 )
      *SetReal( ds_disk_brake.real_right_disk_radius,       ds_disk_brake.real_left_disk_radius.value )
      *SetReal( ds_disk_brake.real_left_piston_area,       8000 )
      *SetReal( ds_disk_brake.real_left_pad_friction,       0.32 )
      *SetReal( ds_disk_brake.real_right_piston_area,       ds_disk_brake.real_left_piston_area.value )
      *SetReal( ds_disk_brake.real_right_pad_friction,       ds_disk_brake.real_left_pad_friction.value )
      *SetReal( ds_disk_brake.real_stiction_omega,       0.001 )
    *EndContext()
  *EndContext()

  *BeginContext( altair_driver )
    *SetReal( ds_vehicle_params.veh_mass,       1595.91336064 )
    *SetReal( ds_vehicle_params.drive_ratio,       1.0 )
    *SetReal( ds_vehicle_params.max_f_brake_torque,       1848000.0 )
    *SetReal( ds_vehicle_params.max_r_brake_torque,       931840.0 )
    *SetReal( ds_vehicle_params.brake_bias,       0.6 )
    *SetReal( ds_vehicle_params.wh_rad_f,       310.464 )
    *SetReal( ds_vehicle_params.wh_rad_r,       310.464 )
    *SetReal( ds_vehicle_params.veh_a,       1350.45561506 )
    *SetReal( ds_vehicle_params.veh_b,       1349.54438494 )
    *SetReal( ds_vehicle_params.veh_izz,       2382673967.11 )
    *SetFileName( ds_analysis_settings.driver_task_file,       { getenv("ALTAIR_HOME") + "/hw/mdl/mdllib/Libs/Tasks/AltairDriver/ADF_examples/straight_line_acc.adf"} )
    *SetBoolean( ds_vehicle_params.auto_calculate,       false )
    *SetOption( ds_vehicle_params.op_driver_type,       "Non-leaning" )

    *BeginContext( sys_gyro )
      *SetPoint( p_gyro,                     att_b_veh.cg.x  +  ds_gyro.cg2gyrox.value, att_b_veh.cg.y  +  ds_gyro.cg2gyroy.value, att_b_veh.cg.z  +  ds_gyro.cg2gyroz.value )
    *EndContext()
  *EndContext()
*EndMDL()

